


function WorkflowDesigner(e) {
    function t() {
        var e = {
            actions: new Array,
            conditions: new Array,
            rules: new Array,
            referenceContainers: new Array
        },
            t = n.data;
        return t.Activities.forEach(function (i) {
            void 0 != i.Implementation && $.each(i.Implementation, function (n, a) {
                if (t.AdditionalParams.Actions.includes(a.ActionName)) return !0;
                var o = function (e) {
                    return "Action" === e.Type && e.Name === a.ActionName
                };
                $.grep(t.CodeActions, o).length || (e.actions.includes(a.ActionName) || e.actions.push(a.ActionName), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
            }), void 0 != i.PreExecutionImplementation && $.each(i.PreExecutionImplementation, function (n, a) {
                if (t.AdditionalParams.Actions.includes(a.ActionName)) return !0;
                var o = function (e) {
                    return "Action" === e.Type && e.Name === a.ActionName
                };
                $.grep(t.CodeActions, o).length || (e.actions.includes(a.ActionName) || e.actions.push(a.ActionName), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
            })
        }), t.Transitions.forEach(function (i) {
            $.each(i.Conditions, function (n, a) {
                if (a.Action && "Action" === a.Type) {
                    if (t.AdditionalParams.Conditions.includes(a.Action.ActionName)) return !0;
                    var o = function (e) {
                        return "Condition" === e.Type && e.Name === a.Action.ActionName
                    };
                    $.grep(t.CodeActions, o).length || (e.conditions.includes(a.Action.ActionName) || e.conditions.push(a.Action.ActionName), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
                }
            })
        }), t.Actors.forEach(function (i) {
            if (void 0 != i.Rule && !t.AdditionalParams.Rules.includes(i.Rule)) {
                var n = function (e) {
                    return ("RuleCheck" === e.Type || "RuleGet" === e.Type) && e.Name === i.Rule
                };
                $.grep(t.CodeActions, n).length || (e.rules.includes(i.Rule) || e.rules.push(i.Rule), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
            }
        }), e
    }

    function i() {
        var e = t();
        e.referenceContainers.length > 0 && WorkflowDesignerWindows.ConfirmDialog(WorkflowDesignerConstants.BrokenReferencesDialogText, WorkflowDesignerConstants.ButtonTextYes, function () {
            var t = n.data;
            return t.AdditionalParams.Actions = t.AdditionalParams.Actions.concat(e.actions), t.AdditionalParams.Conditions = t.AdditionalParams.Conditions.concat(e.conditions), t.AdditionalParams.Rules = t.AdditionalParams.Rules.concat(e.rules), !0
        }, WorkflowDesignerConstants.ButtonTextNo, function () {
            return !0
        })
    }
    var n = this;
    this.Settings = e, window.localStorage || WorkflowDesignerCommon.defineLocalStorage(), Array.prototype.includes || WorkflowDesignerCommon.defineArrayIncludes(), this.GetName = function () {
        return n.Settings.name
    }, this.error = function (e, t) {
        alert(e), void 0 !== t && null !== t && console.log(e, t)
    }, this.refresh = function () {
        var e = void 0 !== this.data && void 0 !== this.data.__loadParams ? this.data.__loadParams : this.loadParams;
        void 0 === e ? alert("You might use refresh method after called load method only.") : this.load(e)
    }, this.getParam = function (e) {
        return localStorage["WorkflowDesigner_" + e]
    }, this.setParam = function (e, t) {
        var i = "WorkflowDesigner_" + e;
        localStorage[i] = t
    }, this.load = function (e) {
        var t = new Array;
        this.loadParams = e, this.schemecode = e.schemecode, this.processid = e.processid, this.schemeid = e.schemeid, e.readonly && (this.Settings.readonly = e.readonly), t.push({
            name: "schemecode",
            value: this.schemecode
        }), t.push({
            name: "processid",
            value: this.processid
        }), t.push({
            name: "schemeid",
            value: this.schemeid
        }), t.push({
            name: "operation",
            value: "load"
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: t,
            async: !0,
            success: function (t) {
                var a = {};
                try {
                    a = JSON.parse(t)
                } catch (e) {
                    return void n.error(t)
                }
                if (a.isError) return void n.error(a.errorMessage);
                a.__loadParams = e, n.data = a, e.processid && n.data.IsSubprocessScheme || i(), n.render()
            },
            error: function (e, t, i) {
                n.error(t + " " + i)
            }
        })
    }, this.exists = function (e) {
        var t = new Array;
        this.schemecode = e.schemecode, this.processid = e.processid, this.schemeid = e.schemeid, e.readonly && (this.Settings.readonly = e.readonly), t.push({
            name: "schemecode",
            value: this.schemecode
        }), t.push({
            name: "processid",
            value: this.processid
        }), t.push({
            name: "schemeid",
            value: this.schemeid
        }), t.push({
            name: "operation",
            value: "exists"
        });
        var i = $.ajax({
            url: this.Settings.apiurl,
            data: t,
            async: !1,
            error: function (e, t, i) {
                n.error(t + " " + i)
            }
        }).responseText;
        try {
            return JSON.parse(i)
        } catch (e) {
            return n.error(i), !1
        }
    }, this.create = function () {
        var e = new Array;
        e.push({
            name: "operation",
            value: "load"
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: e,
            async: !0,
            success: function (e) {
                var t = {};
                try {
                    t = JSON.parse(e)
                } catch (t) {
                    return void n.error(e)
                }
                if (t.isError) return void n.error(t.errorMessage);
                n.data = t, n.render()
            }
        })
    }, this.render = function () {
        var e = !1;
        n.Graph && (n.Graph.destroy(), void 0 != n.data && void 0 != n.data.__loadParams && (void 0 != n.data.__loadParams.isFullScreen && (e = n.data.__loadParams.isFullScreen), void 0 != n.data.__loadParams.readonly && (this.Settings.readonly = n.data.__loadParams.readonly)));
        var t = [WorkflowDesignerActivityManager, WorkflowDesignerTransitionManager, WorkflowDesignerKeyboard];
        if (Array.isArray(n.Settings.externalComponents) && n.Settings.externalComponents.forEach(function (e) {
            t.push(e)
        }), this.Settings.printable || t.push(WorkflowDesignerBackground), this.Settings.notrendertoolbar || t.push(WorkflowDesignerToolbar), n.Settings.printable && void 0 != n.data) {
            var i = 0,
                a = 0;
            $(n.data.Activities).each(function (e) {
                var t = parseInt(this.DesignerSettings.X),
                    n = parseInt(this.DesignerSettings.Y);
                t > i && (i = t), n > a && (a = n)
            }), n.Settings.graphwidth = i + n.Settings.DefaultActivityWidth, n.Settings.graphheight = a + n.Settings.DefaultActivityHeight
        }
        n.Graph = new WorkflowGraph(this.Settings.renderTo, n, n.Settings, t), n.Graph.setFullScreen(e), void 0 != n.data && (WorkflowDesignerCommon.DataCorrection(n.data), void 0 != n.data.__loadParams && void 0 != n.data.__loadParams.graphData && (n.Graph.graphData = n.data.__loadParams.graphData, n.Graph.graphDataIndex = n.data.__loadParams.graphDataIndex), n.Graph.Draw(n.data))
    }, this.save = function (e, t) {
        if (n.Settings.readonly) return void alert(WorkflowDesignerConstants.ErrorReadOnlySaveText);
        var i = new Array;
        i.push({
            name: "schemecode",
            value: this.schemecode
        }), i.push({
            name: "processid",
            value: this.processid
        }), i.push({
            name: "schemeid",
            value: this.schemeid
        }), i.push({
            name: "operation",
            value: "save"
        }), i.push({
            name: "data",
            value: JSON.stringify(this.data)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (i) {
                var a = {};
                try {
                    a = JSON.parse(i)
                } catch (e) {
                    return void (void 0 !== t ? t(i) : n.error(i))
                }
                if (a.isError) return void (void 0 !== t ? t(a.errorMessage, a.errorDetails) : n.error(a.errorMessage, a.errorDetails));
                n.data = a, n.render(), e && setTimeout(function () {
                    e(n)
                }, 100)
            }
        })
    }, this.downloadscheme = function (e) {
        var t = new Array;
        t.push({
            name: "operation",
            value: "downloadscheme"
        }), t.push({
            name: "data",
            value: JSON.stringify(this.data)
        }), e && e.name && t.push({
            name: "scheme",
            value: e.name
        }), WorkflowDesignerCommon.download(this.Settings.apiurl, t, "post")
    }, this.uploadscheme = function (e, t) {
        var a = this.createurl("uploadscheme"),
            o = new FormData(e),
            r = new XMLHttpRequest;
        r.open("POST", a), r.onload = function () {
            var e = r.response,
                a = {};
            try {
                a = JSON.parse(e)
            } catch (t) {
                return void n.error(e)
            }
            if (a.isError) return void n.error(a.errorMessage);
            n.data = a, i(), n.render(), t && t(n)
        }, r.send(o)
    }, this.createurl = function (e) {
        var t = this.Settings.apiurl,
            i = "?";
        return t.indexOf("?") >= 0 && (i = "&"), t += i + "operation=" + e, i = "&", void 0 != this.schemeid && (t += i + "schemeid=" + this.schemeid), void 0 != this.processid && (t += i + "processid=" + this.processid), void 0 != this.schemecode && (t += i + "schemecode=" + this.schemecode), t
    }, this.validate = function () {
        if (1 != $.grep(n.data.Activities, function (e) {
            return e.IsInitial
        }).length) return WorkflowDesignerConstants.ErrorActivityIsInitialCountText;
        if (n.data.CanBeInlined) {
            if (0 == $.grep(n.data.Activities, function (e) {
                return e.IsFinal
            }).length) return WorkflowDesignerConstants.ErrorActivityIsFinalCountText
        }
        var e = t().referenceContainers;
        return $.each(n.data.Transitions, function (t, i) {
            var n = !1;
            "Auto" !== i.Trigger.Type && (("Timer" === i.Trigger.Type && !i.Trigger.Timer || "Command" === i.Trigger.Type && !i.Trigger.Command) && e.push(i.Name), n = !0), null !== i.Restrictions && void 0 !== i.Restrictions && $.each(i.Restrictions, function (t, a) {
                a.Actor || n || (e.push(i.Name), n = !0)
            })
        }), $.each(n.data.Activities, function (t, i) {
            "Inline" !== i.ActivityType || void 0 != i.SchemeCode && "" !== i.SchemeCode || e.push(i.Name)
        }), e.length > 0 ? WorkflowDesignerConstants.ErrorInvalidObjectsSaveText(e.join(", ")) : void 0
    }, this.destroy = function () {
        this.schemecode = void 0, this.processid = void 0, this.schemeid = void 0, this.data = void 0, void 0 !== this.Graph && this.Graph.destroy()
    }, this.compile = function (e, t) {
        e = {
            Name: e.Name,
            Type: e.Type,
            IsGlobal: e.IsGlobal,
            IsAsync: e.IsAsync,
            ActionCode: e.ActionCode,
            Usings: e.Usings
        };
        var i = new Array;
        i.push({
            name: "schemecode",
            value: this.schemecode
        }), i.push({
            name: "processid",
            value: this.processid
        }), i.push({
            name: "schemeid",
            value: this.schemeid
        }), i.push({
            name: "operation",
            value: "compile"
        }), i.push({
            name: "data",
            value: JSON.stringify(e)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (e) {
                try {
                    e = JSON.parse(e)
                } catch (t) {
                    n.error(e)
                }
                t && setTimeout(function () {
                    t(e)
                }, 100)
            }
        })
    }, this.deleteGlobalCodeAction = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "deleteglobalcodeaction"
        }), i.push({
            name: "names",
            value: JSON.stringify(e)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (e) {
                try {
                    e = JSON.parse(e)
                } catch (t) {
                    n.error(e)
                }
                t && setTimeout(function () {
                    t(e)
                }, 100)
            }
        })
    }, this.getemptytype = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "getemptytype"
        }), i.push({
            name: "data",
            value: JSON.stringify(e)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (e) {
                t && setTimeout(function () {
                    t(e)
                }, 100)
            }
        })
    }, this.requestcodeactionparameter = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "getcodeactionparameter"
        }), i.push({
            name: "type",
            value: e
        }), i.push({
            name: "name",
            value: t
        });
        for (var n = $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !1,
            type: "post"
        }), a = JSON.parse(n.responseText), o = 0; o < a.length; o += 1) null === a[o].Name && (a[o].Name = "");
        return a
    }, this.requestautocompletesuggestions = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "getautocompletesuggestions"
        }), i.push({
            name: "category",
            value: e
        }), i.push({
            name: "value",
            value: t
        });
        var n = $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !1,
            type: "post"
        });
        return JSON.parse(n.responseText)
    }, this.readonlymode = function (e) {
        var t = this;
        void 0 === e || null == e ? (t.Settings.notrendertoolbar = !1, t.Settings.notshowwindows = !1, t.Settings.disableobjectmovements = !1) : (void 0 != e.notrendertoolbar ? t.Settings.notrendertoolbar = e.notrendertoolbar : t.Settings.notrendertoolbar = !1, void 0 != e.notshowwindows ? t.Settings.notshowwindows = e.notshowwindows : t.Settings.notshowwindows = !1, void 0 != e.disableobjectmovements ? t.Settings.disableobjectmovements = e.disableobjectmovements : t.Settings.disableobjectmovements = !1), t.Settings.readonly = !0, t.Settings.printable && (t.Settings.graphheight = t.Settings.originalgraphheighth, t.Settings.graphwidth = t.Settings.originalgraphwidth, t.Settings.printable = !1), t.render()
    }, this.printablemode = function () {
        var e = this;
        e.Settings.printable || (e.Settings.originalgraphheighth = e.Settings.graphheight, e.Settings.originalgraphwidth = e.Settings.graphwidth), e.Settings.notrendertoolbar = !0, e.Settings.notshowwindows = !0, e.Settings.disableobjectmovements = !1, e.Settings.readonly = !0, e.Settings.printable = !0, e.render()
    }, this.editablemode = function () {
        var e = this;
        e.Settings.notrendertoolbar = !1, e.Settings.notshowwindows = !1, e.Settings.disableobjectmovements = !1, e.Settings.readonly = !1, e.Settings.printable && (e.Settings.graphheight = e.Settings.originalgraphheighth, e.Settings.graphwidth = e.Settings.originalgraphwidth, e.Settings.printable = !1), e.render()
    }, void 0 === this.Settings.mode || ("readonly" === this.Settings.mode.toLowerCase() ? this.readonlymode(e) : "printable" === this.Settings.mode.toLowerCase() ? this.printablemode() : this.editablemode()), this.autoarrangement = function () {
        var e = this.Graph.GetComponentByType("WorkflowDesignerToolbar");
        void 0 != e && e.AutoArrangement()
    }, this.downloadschemeBPMN = function (e) {
        var t = new Array;
        t.push({
            name: "operation",
            value: "downloadschemebpmn"
        }), t.push({
            name: "data",
            value: JSON.stringify(this.data)
        }), e && e.name && t.push({
            name: "scheme",
            value: e.name
        }), WorkflowDesignerCommon.download(this.Settings.apiurl, t, "post")
    }, this.uploadschemeBPMN = function (e, t) {
        var a = this.GetName() + "_uploadiframe",
            o = document.createElement("iframe");
        o.setAttribute("id", a), o.setAttribute("name", a), o.setAttribute("width", "0"), o.setAttribute("height", "0"), o.setAttribute("border", "0"), o.setAttribute("style", "width: 0; height: 0; border: none;"), e.parentNode.appendChild(o), window.frames[a].name = a;
        var r = document.getElementById(a),
            s = function () {
                r.detachEvent ? r.detachEvent("onload", s) : r.removeEventListener("load", s, !1), r.contentDocument ? content = r.contentDocument.body.innerText : r.contentWindow ? content = r.contentWindow.document.body.innerHTML : r.document && (content = r.document.body.innerHTML), setTimeout(function () {
                    r.parentNode.removeChild(r)
                }, 250);
                var e = {};
                try {
                    e = JSON.parse(content)
                } catch (e) {
                    return void n.error(content)
                }
                if (e.isError) return void n.error(e.errorMessage);
                n.data = e, i(), n.render(), t && t(n)
            };
        r.addEventListener && r.addEventListener("load", s, !0), r.attachEvent && r.attachEvent("onload", s), e.setAttribute("target", a), e.setAttribute("action", this.createurl("uploadschemebpmn")), e.setAttribute("method", "post"), e.setAttribute("enctype", "multipart/form-data"), e.setAttribute("encoding", "multipart/form-data"), e.submit()
    }
}

function WorkflowDesignerOverviewMap() {
    this.type = "WorkflowDesignerOverviewMap";
    var e = this;
    this.init = function (t) {
        this.graph = t, this.Layer = new Konva.Layer, this.Layer.scale(.5), this.graph.Stage.add(this.Layer), this.Layer.setZIndex(1e3);
        var i = this.graph.Stage.width(),
            n = this.graph.Stage.height(),
            a = void 0 != this.graph.Settings.overviewMapWidth ? this.graph.Settings.overviewMapWidth : WorkflowDesignerConstants.OverviewMap.width,
            o = void 0 != this.graph.Settings.overviewMapHeight ? this.graph.Settings.overviewMapHeight : WorkflowDesignerConstants.OverviewMap.height;
        e.background = new Konva.Image({
            x: i - a - 5,
            y: n - o - 5,
            width: a,
            height: o,
            fill: "white",
            shadowEnabled: !0,
            shadowBlur: 5,
            shadowOpacity: .3
        }), e.Layer.add(e.background)
    }, this.draw = function () {
        this.GraphRedrawAll()
    }, this.GraphRedrawAll = function () {
        console.log("GraphRedrawAll")
    }
}

function WorkflowDesignerForm(e) {
    this.type = "WorkflowDesignerForm", this.parameters = e, this.id = WorkflowDesignerCommon.createUUID(), this.isReadOnly = function () {
        return this.parameters.readonly
    }, this.showModal = function (e, t, i) {
        var n = this;
        n.window = $('<div tabindex="0" class="ui modal WorkflowDesignerDialog"></div>'), void 0 != WorkflowDesignerConstants.FormMaxHeight && "" != WorkflowDesignerConstants.FormMaxHeight && n.window.css("max-height", WorkflowDesignerConstants.FormMaxHeight), void 0 != this.parameters.width && "" != this.parameters.width && n.window.width(this.parameters.width), n.window.id = this.id;
        var a = void 0;
        switch (this.parameters.type) {
            case "table":
                a = this.generateTable(this.parameters);
                break;
            case "form":
                a = this.generateForm(this.parameters);
                break;
            case "tabs":
                a = this.generateTabs(this.parameters)
        }
        void 0 == a && (a = new Array), void 0 != n.parameters.top && a.unshift(n.parameters.top), void 0 != n.parameters.bottom && a.push(n.parameters.bottom), void 0 != this.parameters.renderFinalFunc && this.parameters.renderFinalFunc(a, n);
        var o = n.getEditData(n.parameters);
        n.ClearTempField(o), n.window.append($('<div class="header">' + this.parameters.title + '<div class="headerbuttons"> <span class="close"></span> <span class="fillscreen"></span> </div>')), n.window.append($('<div class="content scrolling"></div>').append(a));
        var r = $('<div class="actions"></div>');
        n.isReadOnly() ? r.append('<div class="ui secondary  cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (r.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), r.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), n.window.append(r);
        var s = function () {
            if (n.ClearError(), void 0 != e && !n.isReadOnly()) {
                return !!e(n.getEditData(n.parameters), n.parameters) && (n.allowDestroy = !0, !0)
            }
        },
            l = function () {
                if (!n.isReadOnly()) {
                    var e = n.getEditData(n.parameters);
                    return void 0 !== i && i(e, n.parameters), n.ClearTempField(e), JSON.stringify(o) === JSON.stringify(e) ? (n.allowDestroy = !0, !0) : (WorkflowDesignerWindows.ConfirmDialog(WorkflowDesignerConstants.CloseWithoutSaving, WorkflowDesignerConstants.ButtonTextYes, function () {
                        n.allowDestroy = !0, WorkflowDesignerCommon.modal(n.window, "hide")
                    }, WorkflowDesignerConstants.ButtonTextNo, function () {
                        return !0
                    }), !0)
                }
                n.allowDestroy = !0
            };
        WorkflowDesignerCommon.modal(n.window, {
            closable: !1,
            onApprove: s,
            onDeny: l,
            allowMultiple: !0,
            onHidden: function () {
                n.allowDestroy && n.destroy(), n.parameters.onHidden && n.parameters.onHidden()
            },
            dimmerSettings: {
                opacity: .2,
                duration: {
                    show: 0,
                    hide: 0
                }
            },
            transition: "fade"
        }), WorkflowDesignerCommon.modal(n.window, "show"), WorkflowDesignerCommon.modal(n.window, "refresh"), void 0 != this.refreshFunc && this.refreshFunc(), $(".item", n.window).tab({
            context: "parent"
        }), $(".ui.accordion", n.window).accordion({
            exclusive: !1
        }), $(".close", n.window).click(function () {
            (n.isReadOnly() || l()) && (n.allowDestroy = !0, WorkflowDesignerCommon.modal(n.window, "hide"))
        }), $(".fillscreen", n.window).click(function () {
            n.window.hasClass("fullscreen") ? n.window.removeClass("fullscreen") : n.window.addClass("fullscreen"), setTimeout(function () {
                void 0 != n.refreshFunc && n.refreshFunc()
            }, 500)
        })
    }, this.destroy = function () {
        void 0 != this.destroyFunc && this.destroyFunc(), $(".WorkflowDesignerDialogautoComplete").remove(), this.window.remove()
    }, this.InfoDialog = function (e, t, i) {
        var n = "ui modal WorkflowDesignerConfirmDialog";
        void 0 != i && (n += " " + i);
        var a = $('<div tabindex="0" class="' + n + '"></div>');
        a.append($('<div class="header">' + e + "</div>")), a.append($('<div class="content scrolling"><p>' + t + "</p></div>"));
        var o = $('<div class="actions"></div>').append('<div tabindex="1" class="ui primary ok button">' + WorkflowDesignerConstants.EditCodeLabel.OK + "</div>");
        a.append(o), WorkflowDesignerCommon.modal(a, {
            allowMultiple: !0,
            dimmerSettings: {
                opacity: .2,
                duration: {
                    show: 0,
                    hide: 0
                }
            },
            transition: "fade"
        }), WorkflowDesignerCommon.modal(a, "show")
    }, this.getEditData = function (e) {
        var t, i = this;
        if ("form" === e.type || "group" === e.type) t = {}, e.elements.forEach(function (e) {
            void 0 != e.field && (t["control_" + e.field] = e.control), "table" === e.type || "form" === e.type ? t[e.field] = i.getEditData(e) : "group" === e.type ? i.objAssign(t, i.getEditData(e)) : "scheme" === e.type || i.SetValueByPropertyName(t, e.field, i.getEasyControlValue(e))
        });
        else if ("table" === e.type) {
            void 0 == t && (t = []);
            var n = e.control;
            if (e.elements.forEach(function (e) {
                var a = i.getElementCode(e),
                    o = "[name=" + a + "]",
                    r = n.find(o);
                if (void 0 != r)
                    for (var s = 0; s < r.length; s++) void 0 == t[s] && (t[s] = {}), t[s]["control_" + e.field] = r[s], "table" === e.type || "form" === e.type ? t[s][e.field] = i.getEditData({
                        type: e.type,
                        control: $(r[s]),
                        elements: e.elements
                    }) : i.SetValueByPropertyName(t[s], e.field, i.getEasyControlValue({
                        type: e.type,
                        control: r[s]
                    }))
            }), e.keyproperty)
                for (var a = n.children("tbody").children("tr"), o = 0; o < a.length; o++) void 0 == t[o] && (t[o] = {}), t[o].keyproperty = $(a[o]).attr("keyproperty")
        }
        return t
    }, this.generateTabs = function (e, t) {
        var i = this,
            n = new Array,
            a = $('<div class="ui top attached tabular menu" />'),
            o = !0;
        e.elements.forEach(function (e) {
            var t = $('<a class="item">' + e.name + "</a>");
            t.attr("data-tab", e.tabKey), o && (t.addClass("active"), o = !1), a.append(t)
        }), n.push(a), o = !0;
        var r = null;
        return e.elements.forEach(function (e) {
            var t = $('<div class="ui bottom attached tab segment" />');
            switch (t.attr("data-tab", e.tabKey), o && (t.addClass("active"), o = !1), e.type) {
                case "table":
                    r = i.generateTable(e);
                    break;
                case "form":
                    r = i.generateForm(e);
                    break;
                case "accordion":
                    r = i.generateAccordion(e);
                    break;
                default:
                    r = null
            }
            t.append(r), n.push(t)
        }), n
    }, this.generateAccordion = function (e, t) {
        var i, n, a = this,
            o = $('<div class="ui accordion" />'),
            r = !0;
        return $.each(e.data, function (t, s) {
            i = $('<div class="title"><i class="dropdown icon"></i>' + t + "</div>"), r && i.addClass("active"), o.append(i), n = $('<div class="content" />'), r && (n.addClass("active"), r = !1), e.elements.forEach(function (e) {
                switch (e.type) {
                    case "table":
                        e.data = s, n.append(a.generateTable(e))
                }
            }), o.append(n)
        }), o
    }, this.generateForm = function (e, t) {
        var i = this,
            n = "group" == e.type ? $('<div class="fields">') : $('<div class="ui form">');
        void 0 != e.width && n.width(e.width), n.attr("name", i.getElementCode(e));
        var a = new Array;
        return e.elements.forEach(function (n) {
            var o = $('<div class="field">');
            void 0 != n.width && o.width(n.width), void 0 == t && (t = "");
            var r = t + "_" + n.field,
                s = void 0;
            if (void 0 != n.name && (s = "table" === n.type ? $('<h4 class="ui dividing header"></h4>') : $("<label></label>"), s[0].innerHTML = n.name, o.append(s)), "table" === n.type) {
                n.data || (n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field]);
                var l = i.generateTable(n, r);
                o.append(l)
            } else if ("form" === n.type) {
                n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field];
                var l = i.generateForm(n, r);
                o.append(l)
            } else if ("group" === n.type) {
                n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data;
                var l = i.generateForm(n, r);
                o.append(l)
            } else if ("accordion" === n.type) {
                n.data || (n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field]);
                var l = i.generateAccordion(n, r);
                o.append(l)
            } else if ("scheme" === n.type) {
                var d = n.group + "_group",
                    c = $('<div id="' + d + '"></div>'),
                    h = $(window).height() - 550;
                h < 400 && (h = 400), c.height(h), n.control = c[0], o.append(c[0]), i.refreshFunc = function () {
                    void 0 != i.wfdesigner && i.wfdesigner.destroy(), i.wfdesigner = new WorkflowDesigner({
                        name: d,
                        renderTo: d,
                        imagefolder: i.parameters.graph.Settings.imagefolder,
                        apiurl: i.parameters.graph.Settings.apiurl,
                        graphwidth: c.width(),
                        graphheight: h,
                        readonly: !0,
                        group: n.group,
                        hideElementsToolbar: !0,
                        hideLegend: !0,
                        hideInfoBlock: !0
                    }), i.wfdesigner.data = i.parameters.graph.data, i.wfdesigner.render()
                }, i.destroyFunc = function () {
                    c.remove(), void 0 != i.wfdesigner && i.wfdesigner.destroy()
                }
            } else {
                var c = i.generateEasyControls(n, i.GetValueByPropertyName(e.data, n.field), r);
                void 0 != s && (s[0].for = c[0].id), n.control = c[0], o.append(c[0])
            }
            a.push(o)
        }), e.control = n, n.append(a), n
    }, this.generateTable = function (e, t) {
        var i = this,
            n = $('<table class="ui form WorkflowDesignerTable"></table>');
        n.attr("name", i.getElementCode(e));
        var a = $("<thead></thead>"),
            o = $("<tr></tr>");
        if (!i.isReadOnly()) {
            var r = $('<th class="movecol"></th>');
            o.append(r)
        }
        e.elements.forEach(function (e) {
            var t = $("<th></th>");
            t[0].innerHTML = e.name, void 0 != e.width && (t[0].width = e.width), o.append(t)
        }), this.isReadOnly() || o.append("<th></th>"), a.append(o), n.append(a);
        var s = function (a) {
            void 0 != e.beforerowadded && e.beforerowadded(a, i);
            var o = $("<tr></tr>");
            e.keyproperty && o.attr("keyproperty", a[e.keyproperty]), void 0 == t && (t = "");
            var r = t + WorkflowDesignerCommon.createUUID();
            if (!i.isReadOnly()) {
                var s = $("<td class='movecol'><div class='btnmove'></div></td>");
                s.attr("draggable", !0), s.bind("dragstart", function (e) {
                    if (null !== e && void 0 !== e && null !== e.originalEvent && void 0 !== e.originalEvent && null !== e.originalEvent.dataTransfer && void 0 !== e.originalEvent.dataTransfer) try {
                        e.originalEvent.dataTransfer.setData("text/plain", "anything")
                    } catch (e) { }
                    o.css("opacity", .5), n.row = o
                }).bind("dragover", function (e) {
                    e.preventDefault()
                }).bind("drop", function (e) {
                    if (e.preventDefault(), void 0 != n.row) {
                        var t = n.find("tr");
                        t.index(n.row[0]) > t.index(o[0]) ? n.row.insertBefore(o) : n.row.insertAfter(o), n.row.css("opacity", ""), n.row = void 0
                    }
                }), o.append(s)
            }
            if (e.elements.forEach(function (t) {
                if ("table" === t.type) {
                    t.fieldFunc ? t.data = t.fieldFunc(a) : t.data = a[t.field];
                    var n = i.generateTable(t, r);
                    o.append($("<td></td>").append(n))
                } else {
                    var s = i.generateEasyControls(t, i.GetValueByPropertyName(a, t.field), r, a);
                    void 0 !== e.onrowchanged && s.change(function () {
                        e.onrowchanged(o, i)
                    }), o.append($("<td></td>").append(s))
                }
            }), !i.isReadOnly()) {
                var l = $('<a class="btnDelete"></a>');
                l[0].innerHTML = WorkflowDesignerConstants.ButtonTextDelete, l[0].href = "#", l.on("click", function () {
                    return !(void 0 !== e.onrowdelete && !e.onrowdelete(o, i)) && (o.remove(), 0 == $("tr", $(n).find("tbody")).length && n.css("display", "none"), WorkflowDesignerCommon.modal(i.window, "refresh"), !1)
                }), o.append($("<td></td>").append(l))
            }
            n.append(o), void 0 !== e.onrowadded && e.onrowadded(o, i)
        };
        void 0 != e.data && e.data.forEach(function (e) {
            s(e)
        }), void 0 != e.data && 0 != e.data.length || n.css("display", "none"), e.control = n;
        var l = new Array;
        if (l.push(n), !this.isReadOnly()) {
            var d = $('<a class="btnAdd"></a>');
            d[0].innerHTML = WorkflowDesignerConstants.ButtonTextCreate, d[0].href = "#", d.on("click", function () {
                var t = {};
                return e.datadefault && (t = e.datadefault), "none" == n.css("display") && 0 == $("tr", $(n).find("tbody")).length && n.css("display", ""), s(t), WorkflowDesignerCommon.modal(i.window, "refresh"), !1
            }), l.push(d)
        }
        return l
    }, this.generateEasyControls = function (e, t, i, n) {
        var a = this,
            o = null;
        if ("input" === e.type) return new InputControl(a).generate(e, t, i);
        if ("checkbox" === e.type) return new CheckboxControl(a).generate(e, t, i);
        if ("select" === e.type) return new SelectControl(a).generate(e, t, i);
        if ("textarea" === e.type) return o = $('<textarea rows="6" style="width: 100%;"></textarea>'), o[0].id = a.generateid(e.field, i), o[0].name = a.getElementCode(e), void 0 != t && (o[0].value = t), this.isReadOnly() && o.attr("readonly", !0), o;
        if ("json" === e.type) return new JsonControl(a, e, i).generateBasicControl(t);
        if ("jsonparameter" === e.type) return new JsonControl(a, e, i).generateParameterControl(t, n);
        if ("code" === e.type) return a.generateCodeControl(e, t, i, n);
        if ("transitionclassifier" === e.type) {
            switch (o = $('<img class="table-icon" />'), t) {
                case 0:
                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.not-specified.png"), o.attr("alt", "NotSpecified"), o.attr("title", "NotSpecified");
                    break;
                case 1:
                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.direct.png"), o.attr("alt", "Direct"), o.attr("title", "Direct");
                    break;
                case 2:
                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.reverse.png"), o.attr("alt", "Reverse"), o.attr("title", "Reverse")
            }
            return o
        }
        return "parameters" === e.type ? new ParametersControl(a).generate(e, t, i) : "defaultvalue" === e.type ? new DefaultValueControl(a, e, i).generate(t, n) : void 0
    }, this.generateCodeControl = function (e, i, n, a) {
        void 0 == i && (i = "");
        var o = $('<button class="ui button basic">' + WorkflowDesignerConstants.EditCodeLabel.EditCodeButton + "</button>");
        o[0].id = this.generateid(e.field, n), o[0].name = t.getElementCode(e), o[0].code = {}, o[0].code.code = decodeURIComponent(i);
        var r = a.Usings;
        r = void 0 == r ? t.parameters.graph.data.AdditionalParams.Usings.join(";") + ";" : decodeURIComponent(r), o[0].code.usings = r;
        var s = t.isReadOnly() ? ' readonly="true"' : "",
            l = $('<div class="ui large modal WorkflowDesignerDialogChild">');
        l[0].id = o[0].id + "_form", l.append('<div class="header">' + WorkflowDesignerConstants.EditCodeLabel.Title + "</div>");
        var d = $('<div class="content scrolling"></div>'),
            c = $('<a class="ui button">' + WorkflowDesignerConstants.EditCodeLabel.ShowUsings + "</a>");
        d.append(c);
        var h = $('<div id="' + o[0].id + '_usings" style="padding-top: 6px;display:none"/>');
        h.append('<textarea style="width:100%;height: 100px; max-width:inherit;" id="' + o[0].id + '_usingsedit"' + s + ">asdfasdfasd</textarea>"), d.append(h), d.append('<div id="' + o[0].id + '_function_upper" />'), d.append('<div id="' + o[0].id + '_editor" style="height:' + WorkflowDesignerConstants.EditCodeSettings.CodeHeight + 'px" ' + s + "></div>"), d.append('<div id="' + o[0].id + '_function_lower">}</div>'), c.on("click", function (e) {
            h.is(":visible") ? (h.hide(), c[0].innerText = WorkflowDesignerConstants.EditCodeLabel.ShowUsings) : (h.show(), c[0].innerText = WorkflowDesignerConstants.EditCodeLabel.HideUsings), WorkflowDesignerCommon.modal(l, "refresh")
        }), l.append(d);
        var u = $('<div class="actions"></div>'),
            m = $('<div class="ui button">' + WorkflowDesignerConstants.EditCodeLabel.Compile + "</div>");
        return u.append(m), m.on("click", function () {
            for (var e = t.getEditData(t.parameters), i = void 0, n = 0; n < e.length; n++)
                if (e[n].control_ActionCode.id == o[0].id) {
                    i = e[n];
                    break
                }
            if (void 0 != i) {
                i.ActionCode = encodeURIComponent(ace.edit(o[0].id + "_editor").getValue()), i.Usings = encodeURIComponent($("#" + o[0].id + "_usingsedit")[0].value.replace(/(\r\n|\n|\r)/gm, ""));
                var a = function (e) {
                    var i = e.Success ? WorkflowDesignerConstants.EditCodeLabel.Success : WorkflowDesignerConstants.EditCodeLabel.Error,
                        n = e.Success ? WorkflowDesignerConstants.EditCodeLabel.CompileSucceeded : e.Message;
                    return t.InfoDialog(i, n, e.Success ? "mini" : void 0), !1
                };
                t.parameters.graph.designer.compile(i, a)
            }
        }), o[0].readOnly ? u.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (u.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), u.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), l.append(u), o.on("click", function (e) {
            WorkflowDesignerCommon.modal(l, {
                closable: !1,
                allowMultiple: !0,
                onApprove: function () {
                    o[0].code = {}, o[0].code.code = ace.edit(o[0].id + "_editor").getValue(), o[0].code.usings = $("#" + o[0].id + "_usingsedit")[0].value.replace(/(\r\n|\n|\r)/gm, "")
                },
                onHidden: function () {
                    setTimeout(function () {
                        WorkflowDesignerCommon.modal(t.window, "show")
                    }, 10)
                },
                dimmerSettings: {
                    opacity: .2,
                    duration: {
                        show: 0,
                        hide: 0
                    }
                },
                transition: "fade"
            });
            var i = ace.edit(o[0].id + "_editor");
            $("#" + o[0].id + "_usingsedit")[0].value = t.htmlEncode(t.modifyUsingString(o[0].code.usings)), $("#" + o[0].id + "_usings").accordion({
                collapsible: !0,
                active: !1,
                heightStyle: "content scrolling"
            });
            var a = $("#" + t.generateid("Type", n))[0].value.toLowerCase(),
                r = $("#" + t.generateid("Name", n))[0].value,
                s = $("#" + t.generateid("IsAsync", n))[0].checked;
            r = "" === r ? "???" : "<b>" + r + "</b>";
            var d = "{";
            if ("action" === a) {
                d = (s ? "async Task " : "void ") + r + (s ? " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter, CancellationToken token) {" : " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {")
            }
            if ("condition" === a) {
                d = (s ? "async Task&lt;bool&gt; " : "bool ") + r + (s ? " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter, CancellationToken token) {" : " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {")
            }
            "ruleget" === a && (d = "IEnumerable&lt;string&gt; " + r + " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {"), "rulecheck" === a && (d = "bool " + r + " (ProcessInstance processInstance, WorkflowRuntime runtime, string identityId, string parameter) {"), $("#" + o[0].id + "_function_upper").html(d);
            var i = ace.edit(o[0].id + "_editor");
            i.getSession().setMode("ace/mode/csharp"), i.setValue(o[0].code.code), i.clearSelection(), t.isReadOnly() ? i.setOptions({
                readOnly: !0
            }) : (i.setOptions({
                readOnly: !1
            }), i.focus()), WorkflowDesignerCommon.modal(t.window, "hide"), WorkflowDesignerCommon.modal(l, "show")
        }), o
    }, this.addAutoComplete = function (e, t) {
        if (void 0 != e.datasource) {
            var n;
            n = Array.isArray(e.datasource) ? function (t, n) {
                t = t.toLowerCase();
                var a = e.datasource,
                    o = [];
                for (i = 0; i < a.length; i++) ~a[i].toLowerCase().indexOf(t) && o.push(a[i]);
                n(o)
            } : e.datasource.bind(t);
            var a = {
                minChars: 0,
                source: n
            };
            t.autoComplete(a)
        }
    }, this.modifyUsingString = function (e) {
        return ";" === e.substring(e.length - 1) && (e = e.substring(0, e.length - 1)), e.split(";").join(";\r\n") + ";"
    }, this.getEasyControlValue = function (e) {
        var t = this;
        if ("input" === e.type) return e.control.value;
        if ("json" === e.type || "jsonparameter" === e.type) return "div" === e.control.localName ? $(e.control).find("input").val() : e.control.value;
        if ("code" === e.type) return e.control.code;
        if ("parameters" === e.type) return e.control.parameters;
        if ("checkbox" === e.type) return "div" === e.control.localName ? e.indeterminable && $(e.control).checkbox("is indeterminate") ? null : e.control.children[0].checked : e.indeterminable && $(e.control).parent().checkbox("is indeterminate") ? null : e.control.checked;
        if ("select" === e.type) return e.control.value;
        if ("textarea" === e.type) return e.control.value;
        if ("defaultvalue" === e.type) {
            switch (e.control.type) {
                case "text":
                    return t.getEasyControlValue({
                        type: "input",
                        control: e.control
                    });
                case "checkbox":
                    return t.getEasyControlValue({
                        type: "checkbox",
                        control: e.control,
                        indeterminable: !0
                    });
                case "select-one":
                    return t.getEasyControlValue({
                        type: "select",
                        control: e.control
                    })
            }
            return null
        }
    }, this.generateid = function (e, t) {
        return t ? e + "_" + t + "_" + this.id : e + "_" + this.id
    }, this.GetValueByPropertyName = function (e, t) {
        if (void 0 != e) {
            if (t.indexOf(".") < 0) return e[t];
            var i = e;
            return t.split(".").forEach(function (e) {
                void 0 != i && (i = i[e])
            }), i
        }
    }, this.SetValueByPropertyName = function (e, t, i) {
        if (t.indexOf(".") < 0) return e[t] = i;
        for (var n = e, a = t.split("."), o = 0; o < a.length; o++) {
            var r = a[o];
            o == a.length - 1 ? n[r] = i : (void 0 == n[r] && (n[r] = {}), n = n[r])
        }
    }, this.ClearError = function () {
        var e = this.window.find(".field-validation-error");
        e.attr("title", ""),
            e.removeClass("field-validation-error"), this.window.find(".error-message").remove()
    }, this.ControlAddError = function (e, t) {
        var i = $(e);
        i.addClass("field-validation-error"), i.attr("title", t)
    }, this.CheckRequired = function (e, t, i) {
        var n = this,
            a = !0;
        return e.forEach(function (e) {
            t.forEach(function (t) {
                "" == n.GetValueByPropertyName(e, t) && (n.ControlAddError(e["control_" + t], i), a = !1)
            })
        }), a
    }, this.CheckUnique = function (e, t, i) {
        for (var n = this, a = !0, o = 0; o < e.length; o++)
            for (var r = o + 1; r < e.length; r++) this._checkUniqueEquals(e[o], e[r], t) && (t.forEach(function (t) {
                n.ControlAddError(e[o]["control_" + t], i), n.ControlAddError(e[r]["control_" + t], i)
            }), a = !1);
        return a
    }, this._checkUniqueEquals = function (e, t, i) {
        for (var n = 0; n < i.length; n++) {
            var a = i[n];
            if (e[a] != t[a]) return !1
        }
        return !0
    };
    var t = this;
    this.ClearTempField = function (e, i) {
        void 0 != e && (void 0 == i && (i = this.parameters.elements), i.forEach(function (n) {
            $.isArray(e) ? e.forEach(function (e) {
                t.ClearTempField(e, i)
            }) : void 0 != e["control_" + n.field] && delete e["control_" + n.field], n.elements && (void 0 == n.field ? t.ClearTempField(e, n.elements) : t.ClearTempField(e[n.field], n.elements))
        }))
    }, this.getElementCode = function (e) {
        return void 0 != e.code ? e.code : e.field
    }, this.htmlEncode = function (e) {
        return $("<div/>").text(e).html()
    }, this.htmlDecode = function (e) {
        return $("<div/>").html(e).text()
    }, this.toCompactJSON = function (e) {
        try {
            return JSON.stringify(JSON.parse(e))
        } catch (t) {
            try {
                return JSON5.stringify(JSON5.parse(e))
            } catch (t) {
                return e
            }
        }
    }, this.toPrettyJSON = function (e) {
        try {
            return JSON.stringify(JSON.parse(e), null, "\t")
        } catch (t) {
            try {
                return JSON5.stringify(JSON5.parse(e), null, "\t")
            } catch (t) {
                return e
            }
        }
    }, this.objAssign = function (e, t) {
        "use strict";
        if (null == e) throw new TypeError("Cannot convert undefined or null to object");
        for (var i = Object(e), n = 1; n < arguments.length; n++) {
            var a = arguments[n];
            if (null != a)
                for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (i[o] = a[o])
        }
        return i
    }
}

function WorkflowDesignerTransitionManager() {
    this.type = "WorkflowDesignerTransitionManager", this.init = function (e) {
        var t = this;
        this.graph = e, this.Layer = new Konva.Layer, this.graph.Stage.add(this.Layer), this.Layer.setZIndex(2), this.graph = e, this.APLayer = new Konva.Layer, this.graph.Stage.add(this.APLayer), this.APLayer.setZIndex(3);
        var i = function () {
            t.APLayer.batchDraw(), t.Layer.batchDraw()
        };
        this.ImageTimer = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.timer.png", i), this.ImageCondition = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.condition.png", i), this.ImageActor = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transtion.actor.png", i), this.ImageOtherwise = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.otherwise.png", i)
    }, this.ItemControls = new Array, this.draw = function () {
        null != this.ItemControls && this.ItemControls.forEach(function (e) {
            e.destroy()
        }), this.ItemControls = new Array;
        var e = this;
        void 0 != this.graph.data.Transitions && this.graph.data.Transitions.forEach(function (t) {
            var i = e.graph.GetComponentByType("WorkflowDesignerActivityManager"),
                n = i.find(t.From),
                a = i.find(t.To),
                o = !1;
            if (void 0 == n && t.From.DesignerSettings.Group != e.graph.Settings.group && (n = i.findGroup(t.From.DesignerSettings.Group, e.graph.Settings.group), o = !0), void 0 == a && t.To.DesignerSettings.Group != e.graph.Settings.group && (a = i.findGroup(t.To.DesignerSettings.Group, e.graph.Settings.group), o = !0), void 0 != n && void 0 != a && (!o || n != a)) {
                var r = new WorkflowDesignerTransitionControl({
                    from: n,
                    to: a,
                    item: t,
                    graph: e.graph,
                    manager: e,
                    group: o
                });
                e.ItemControls.push(r), r.Draw()
            }
        }), this.batchDraw()
    }, this.batchDraw = function () {
        this.CorrectItems(), this.Layer.batchDraw(), this.APLayer.batchDraw()
    }, this.CorrectItems = function () {
        for (var e = 0; e < this.ItemControls.length; e++)
            for (var t = this.ItemControls[e], i = 0; i < this.ItemControls.length; i++)
                if (e != i) {
                    var n = this.ItemControls[i];
                    t.start.x == n.start.x && t.start.y == n.start.y && (n.start.x += 5), t.end.x == n.end.x && t.end.y == n.end.y && (n.end.x += 5), t.middle.x == n.middle.x && t.middle.y == n.middle.y && (n.middle.x += 15)
                }
    }, this.getIntersectingActivity = function (e) {
        return this.graph.GetComponentByType("WorkflowDesignerActivityManager").getIntersectingActivity(e)
    }, this.LayerSetOffset = function (e) {
        this.Layer.setOffset(e), this.APLayer.setOffset(e)
    }, this.LayerScale = function (e) {
        var t = (e.scale, e.delta);
        this.Layer.setScale({
            x: this.Layer.getScale().x + t,
            y: this.Layer.getScale().y + t
        }), this.APLayer.setScale({
            x: this.APLayer.getScale().x + t,
            y: this.APLayer.getScale().y + t
        })
    }, this.LayerScaleNorm = function () {
        this.Layer.setScale({
            x: 1,
            y: 1
        }), this.Layer.setOffset({
            x: 0,
            y: 0
        }), this.APLayer.setScale({
            x: 1,
            y: 1
        }), this.APLayer.setOffset({
            x: 0,
            y: 0
        })
    }, this.DeselectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Deselect()
        })
    }, this.SelectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Select()
        })
    }, this.GetSelected = function () {
        var e = new Array;
        return this.ItemControls.forEach(function (t) {
            t.selected && e.push(t)
        }), e
    }, this.SelectByPosition = function (e) {
        this.ItemControls.forEach(function (t) {
            t.getIntersectingRect(e) && t.Select()
        })
    }, this.SelectByItem = function (e) {
        this.ItemControls.forEach(function (t) {
            t.item == e && t.Select()
        })
    }, this.CreateNewTransition = function (e, t) {
        var i = this;
        if (void 0 == t) {
            var n = e.control.getX() + e.rectangle.attrs.width,
                a = e.control.getY() + e.rectangle.attrs.height / 2,
                o = {
                    x: n,
                    y: a
                },
                r = new WorkflowDesignerTransitionManagerTempControl({
                    x: o.x,
                    y: o.y,
                    manager: this
                });
            r.Draw(o.x + 10, o.y), this.batchDraw();
            var s = function (e) {
                var t = i.graph.CorrectPossition({
                    x: e.evt.offsetX,
                    y: e.evt.offsetY
                }, i.Layer);
                r.Redraw(t), i.Layer.batchDraw()
            },
                l = function (t) {
                    var n = {
                        x: t.evt.offsetX,
                        y: t.evt.offsetY
                    },
                        a = i.getIntersectingActivity(n);
                    void 0 != a && i.CreateNewTransition(e, a), r.Delete(), i.graph.Stage.off("mousemove.WorkflowDesignerTransitionManagerTempControl", s), i.graph.Stage.off("mouseup.WorkflowDesignerTransitionManagerTempControl", l), i.batchDraw(), i.graph.StoreGraphData()
                };
            return this.graph.Stage.on("mousemove.WorkflowDesignerTransitionManagerTempControl", s), this.graph.Stage.on("mouseup.WorkflowDesignerTransitionManagerTempControl", l), r
        }
        var d = {
            Name: this.GetDefaultName(e.GetName(), t.GetName()),
            From: e.item,
            To: t.item,
            Trigger: {
                Type: "Auto"
            },
            Conditions: [{
                Type: "Always"
            }],
            AllowConcatenationType: "And",
            RestrictConcatenationType: "And",
            ConditionsConcatenationType: "And",
            Classifier: "NotSpecified",
            DesignerSettings: {}
        },
            c = new WorkflowDesignerTransitionControl({
                from: e,
                to: t,
                item: d,
                graph: i.graph,
                manager: i
            });
        return i.ItemControls.push(c), i.graph.data.Transitions.push(d), c.Draw(), c
    }, this.GetDefaultName = function (e, t) {
        for (var i = e + "_" + t + "_", n = 1, a = 0; a < this.graph.data.Transitions.length; a++) {
            this.graph.data.Transitions[a].Name == i + n && (n++ , a = -1)
        }
        return i + n
    }
}

function WorkflowDesignerActivityControl(e) {
    var t = this;
    this.manager = e.manager, this.graph = e.graph, this.x = e.x, this.y = e.y, this.group = e.group, this.item = e.item, this.control = void 0, this.rectangle = void 0, this.text = void 0, this.createTransitionAndActivityButton = void 0, this.createTransitionButton = void 0, this.selected = !1, this.dependentTransitions = new Array, this.getX = function () {
        return this.rectangle.attrs.x + this.control.attrs.x
    }, this.getY = function () {
        return this.rectangle.attrs.y + this.control.attrs.y
    }, this.GetName = function () {
        return this.group && null !== this.item.FirstTimeInlineName && void 0 !== this.item.FirstTimeInlineName ? this.item.FirstTimeInlineName : this.item.Name
    }, this.SetName = function (e) {
        this.item.Name = e
    }, this.Draw = function () {
        var i = t.graph.Settings,
            n = !t.graph.Settings.disableobjectmovements;
        if (void 0 == this.graph.Settings.drawElements || void 0 == this.graph.Settings.drawElements.activity || this.graph.Settings.drawElements.activity(this) === !1) {
            t.control = new Konva.Group({
                x: e.x,
                y: e.y,
                rotation: 0,
                draggable: n,
                dragBoundFunc: function (e) {
                    var n = (i.DefaultMoveStep * t.manager.Layer.getScaleX(), i.DefaultMoveStep * t.manager.Layer.getScaleY()),
                        e = {
                            x: Math.round(e.x / n) * n,
                            y: Math.round(e.y / n) * n
                        };
                    if (t.selected) {
                        var a = this.getAbsolutePosition();
                        t.manager.ObjectMove({
                            sender: t,
                            changepos: {
                                x: e.x - a.x,
                                y: e.y - a.y
                            }
                        })
                    }
                    return e
                }
            });
            var a = WorkflowDesignerConstants.ActivityColor,
                o = WorkflowDesignerConstants.ActivityTextColor;
            t.item.IsFinal && (a = WorkflowDesignerConstants.ActivityFinalColor, o = WorkflowDesignerConstants.ActivityFinalTextColor, !1), t.item.IsInitial && (a = WorkflowDesignerConstants.ActivityInitialColor, o = WorkflowDesignerConstants.ActivityInitialTextColor, !1);
            (this.group ? t.graph.IsGroupActive(t.item.DesignerSettings.Group) : t.graph.GetCurrentActivity() == t.item.Name) && (a = WorkflowDesignerConstants.SelectColor, o = WorkflowDesignerConstants.SelectTextColor, !1), t.graph.isCurrentActivityForSubprocess(t.item.Name) && (a = WorkflowDesignerConstants.SelectSubProcessColor, o = WorkflowDesignerConstants.SelectSubProcessTextColor, !1);
            var r = "Inline" === this.item.ActivityType || this.group;
            t.rectangle = new Konva.Rect({
                x: 0,
                y: 0,
                width: this.graph.Settings.DefaultActivityWidth,
                height: this.graph.Settings.DefaultActivityHeight,
                fill: a,
                cornerRadius: 5,
                dash: r ? [8, 4] : void 0,
                stroke: r ? WorkflowDesignerConstants.ActivityShape : void 0,
                strokeWidth: r ? 4 : 0
            }), t.control.add(t.rectangle), this.group || (Array.isArray(t.item.Implementation) && t.item.Implementation.length > 0 && t.control.add(new Konva.Text({
                x: t.rectangle.attrs.width - 20,
                y: 38,
                text: "E",
                fontSize: 12,
                fontFamily: "Arial",
                fill: o,
                fontStyle: "bold"
            })), Array.isArray(t.item.PreExecutionImplementation) && t.item.PreExecutionImplementation.length > 0 && t.control.add(new Konva.Text({
                x: t.rectangle.attrs.width - 30,
                y: 38,
                text: "P",
                fontSize: 12,
                fontFamily: "Arial",
                fill: o,
                fontStyle: "bold"
            }))), t.text = new Konva.Text({
                x: 10,
                y: 10,
                text: this.GetName(),
                fontSize: 12,
                fontFamily: "Arial",
                fontStyle: "bold",
                fill: o
            }), void 0 == t.item.State && (t.item.State = "");
            var s = this.group ? t.item.OriginalSchemeCode : t.item.State;
            r && (t.control.add(new Konva.Text({
                x: t.rectangle.attrs.width - 20,
                y: 10,
                text: "I",
                fontSize: 12,
                fontFamily: "Arial",
                fill: o,
                fontStyle: "bold"
            })), void 0 != t.item.SchemeCode && (s = t.item.SchemeCode)), t.stateText = new Konva.Text({
                x: 10,
                y: 25,
                text: s,
                fontSize: 12,
                fontFamily: "Arial",
                fill: o
            }), t.control.add(t.text), t.control.add(t.stateText);
            var l = "";
            1 == t.item.IsInitial && (l.length > 0 && (l += " "), l += WorkflowDesignerConstants.ActivityFormLabel.IsInitial), 1 == t.item.IsFinal && (l.length > 0 && (l += " "), l += WorkflowDesignerConstants.ActivityFormLabel.IsFinal), 1 == t.graph.getParam("exinfo") && (t.createExInfo(t.control), 1 == t.item.IsForSetState && (l.length > 0 && (l += " - "), l += WorkflowDesignerConstants.ActivityFormLabel.IsForSetState)), "" != l && (t.typeText = new Konva.Text({
                x: 10,
                y: 40,
                text: l,
                fontSize: 12,
                fontFamily: "Arial",
                fill: o
            }), t.control.add(t.typeText)), t.graph.Settings.disableobjectmovements || (this.control.on("dragend", this.Sync), this.control.on("dragmove", this._onMove), this.control.on("click", this._onClick), this.control.on("touchend", this._onClick)), this.control.on("dblclick", this._onDblClick);
            var d = t.graph.Settings.imagefolder,
                c = [];
            if (t.graph.Settings.notshowwindows || c.push({
                img: d + "wfe.settings.png",
                click: function () {
                    t.ShowProperties()
                }
            }), t.graph.Settings.readonly || t.group || (c.push({
                img: d + "wfe.transition.png",
                click: function () {
                    t._onCreateTransition()
                }
            }), c.push({
                img: d + "wfe.activity.png",
                click: function () {
                    t._onCreateTransitionAndActivity()
                }
            }), c.push({
                img: d + "wfe.clone.png",
                click: function () {
                    t.manager.Clone(t)
                }
            }), c.push({
                img: d + "wfe.delete.png",
                click: function () {
                    t._onDelete()
                }
            })), c.length > 0) {
                var h = {
                    x: t.rectangle.getWidth() - 30 * c.length,
                    y: -40
                };
                t.bar = WorkflowDesignerBar(t.manager.Layer, c, h), t.control.add(t.bar), t.bar.hide()
            }
            t.manager.Layer.add(t.control)
        }
    }, this.Delete = function () {
        this.control.destroy(), this.graph.data.Activities.splice(this.graph.data.Activities.indexOf(this.item), 1), this.manager.ItemControls.splice(this.manager.ItemControls.indexOf(this), 1);
        for (var e = new Array, t = 0; t < this.dependentTransitions.length; t++) e.push(this.dependentTransitions[t]);
        for (var t = 0; t < e.length; t++) e[t].Delete()
    }, this.Select = function () {
        if (!this.selected) {
            var e = this;
            this.rectangle.setStrokeWidth(4), this.rectangle.setStroke(WorkflowDesignerConstants.SelectColor), void 0 != e.bar && e.bar.show(), this.selected = !0
        }
    }, this.Deselect = function () {
        if (this.selected) {
            var e = "Inline" === this.item.ActivityType || this.group;
            this.rectangle.setStrokeWidth(e ? 4 : 0), this.rectangle.setStroke(e ? WorkflowDesignerConstants.ActivityShape : this.rectangle.fill()), void 0 != t.bar && t.bar.hide(), this.selected = !1
        }
    }, this.ObjectMove = function (e) {
        var i = this.control.getAbsolutePosition();
        if (i.x += e.x, i.y += e.y, this.control.setAbsolutePosition(i), this.Sync(), !(t.dependentTransitions.length < 1))
            for (var n = 0; n < t.dependentTransitions.length; n++) {
                var a = t.dependentTransitions[n];
                a.middle = void 0, a.Draw()
            }
    }, this._onMove = function () {
        if (!(t.dependentTransitions.length < 1)) {
            var e = !1;
            if (void 0 == t.oldpos) t.oldpos = t.control.getPosition();
            else {
                var i = t.control.getPosition();
                (Math.abs(i.x - t.oldpos.x) > 20 || Math.abs(i.y - t.oldpos.y) > 20) && (e = !0)
            }
            for (var n = 0; n < t.dependentTransitions.length; n++) {
                var a = t.dependentTransitions[n];
                e && (a.middle = void 0, a.item.DesignerSettings = {}), a.Draw()
            }
            t.manager.redrawTransitions()
        }
    }, this._onClick = function (e) {
        var i = t.selected;
        e.evt.ctrlKey || t.graph.DeselectAll(), i ? t.Deselect() : t.Select(), t.graph.onSelectionChanged(!i), t.manager.batchDraw()
    }, this._onDblClick = function () {
        t.graph.DeselectAll(), t.Select(), t.manager.batchDraw(), t.graph.Settings.notshowwindows || t.ShowProperties()
    }, this._onDelete = function () {
        var e = this;
        e.graph.confirm(WorkflowDesignerConstants.DeleteConfirmCurrent, function () {
            e.Delete(), e.graph.onSelectionChanged(), e.graph.redrawAll(), e.graph.StoreGraphData()
        })
    }, this._onCreateTransitionAndActivity = function () {
        t.manager.createTransitionAndActivity(t), t.graph.StoreGraphData()
    }, this._onCreateTransition = function () {
        t.manager.createTransition(t)
    }, this.RegisterTransition = function (e) {
        for (var t = !1, i = 0; i < this.dependentTransitions.length; i++)
            if (this.dependentTransitions[i].GetName() == e.GetName()) {
                t = !0;
                break
            }
        t || this.dependentTransitions.push(e)
    }, this.UnregisterTransition = function (e) {
        for (var t = new Array, i = 0; i < this.dependentTransitions.length; i++) this.dependentTransitions[i].GetName() != e.GetName() && t.push(this.dependentTransitions[i]);
        this.dependentTransitions = t
    }, this.RegisterTransition = function (e) {
        for (var t = !1, i = 0; i < this.dependentTransitions.length; i++)
            if (this.dependentTransitions[i].GetName() == e.GetName()) {
                t = !0;
                break
            }
        t || this.dependentTransitions.push(e)
    }, this.UnregisterTransition = function (e) {
        for (var t = new Array, i = 0; i < this.dependentTransitions.length; i++) this.dependentTransitions[i].GetName() != e.GetName() && t.push(this.dependentTransitions[i]);
        this.dependentTransitions = t
    }, this.getRectPos = function () {
        var e = this.rectangle.getAbsolutePosition(),
            t = e.x,
            i = e.y;
        return {
            xl: t,
            yl: i,
            xr: t + this.rectangle.getWidth() * this.manager.Layer.getScaleX(),
            yr: i + this.rectangle.getHeight() * this.manager.Layer.getScaleY()
        }
    }, this.getIntersectingActivity = function (e) {
        var t = this.getRectPos();
        return e.x >= t.xl && e.x < t.xr && e.y >= t.yl && e.y < t.yr
    }, this.getIntersectingActivityRect = function (e) {
        var t = this.getRectPos();
        return !(e.xl > t.xr || e.xr < t.xl || e.yl > t.yr || e.yr < t.yl)
    }, this.ShowInlineProperties = function () {
        var e = WorkflowDesignerConstants.ActivityFormLabel,
            i = t.graph.data.AdditionalParams.InlinedSchemeCodes,
            n = {
                type: "form",
                title: e.TitleForInline,
                width: "800px",
                data: this.item,
                elements: [{
                    name: e.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: e.Scheme,
                    field: "SchemeCode",
                    type: "select",
                    datasource: i,
                    width: "100%"
                }],
                graph: t.graph,
                readonly: t.graph.Settings.readonly,
                saveFunc: function (e) {
                    t.item.Name = e.Name, t.item.SchemeCode = e.SchemeCode, WorkflowDesignerCommon.DataCorrection(t.graph.data), t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.activity) this.graph.Settings.forms.activity(n);
        else {
            var a = new WorkflowDesignerForm(n),
                o = function (e, i) {
                    var n = !0;
                    return n &= e.CheckRequired([i], ["Name", "Scheme"], WorkflowDesignerConstants.FieldIsRequired), t.graph.data.Activities.forEach(function (a) {
                        a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                    }), n
                },
                r = function (e) {
                    return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0)
                };
            a.showModal(r)
        }
    }, this.ShowProperties = function () {


        var e;
        if (this.group) return void this.ShowGroup();
        if ("Inline" === this.item.ActivityType) return void this.ShowInlineProperties();
        var i = WorkflowDesignerConstants.ActivityFormLabel,
            n = [{
                name: i.ImpAction,
                code: "impAction",
                field: "ActionName",
                type: "select",
                datasource: t.graph.getActionNames(),
                onchange: function (e) {
                    var t = $(e),
                        i = t.closest("tr").find("[name=impparam]").closest("td"),
                        n = i.children(),
                        a = n[0].rebuild($(e).val(), n.find("input").val());
                    n.remove(), i.append(a)
                }
            }, {
                name: i.ImpActionParameter,
                code: "impparam",
                field: "ActionParameter",
                type: "jsonparameter",
                graph: t.graph,
                parametertype: "Action",
                openautocompleteonclick: !0,
                datasource: function (e, i) {
                    var n = $(this).closest("tr"),
                        a = n.find("[name=impAction]")[0].value;
                    i(t.graph.getAutoCompleteSuggestions("actionparameter", a, e))
                }
            }],
            a = {
                type: "form",
                title: i.Title,
                data: this.item,
                elements: [{
                    type: "group",
                    elements: [{
                        name: i.Name,
                        field: "Name",
                        type: "select",
                        datasource: [
                            "WorkFlow Start", "Workorder Approval",
                            "Workorder Cancelled", "Processing Facility",
                            "Shipping Type", "Get Quote and confirm from different carriers",
                            "Box Shipping Type", "Pickup by Third Party(Sending Email)",
                            "Box Pick (Fulfillment)", "Generate and send Reclaim Label",
                            "Generate and send label through email", "Truck Vendor",
                            "Get confirmed dates for pickup and schedule(Third)", "Send to Click soft",
                            "Generate Return Label", "Shipping", "Parcel Receive", "Load Pickup from customer location",
                            "Load Recieve at facility","Capture Pallet details from Load", "Sort", "Test ",
                            "Repair",
                            "Harvest","Imaging",
                            "Recycle FG",
                            "De - install",
                            "Data Erasure",
                            "Shredding",
                            "Degaussing",
"Crushing / Punching",
"Pulverize",
"Drill",
"Payment",
"Upload Asset information by Third Party",
"Finished Goods(Inventory)",
"Generate Report to Customer",
"Get Confirmation on the Report from Customer",
"Invoice Generation",
"Payment(Asset Recovery & Processing fees)"
],
                        width: "100%"

                    }, {
                        name: i.State,
                        field: "State",
                            type: "select",
                        datasource: ["Account Manager","Pickup Executive",
                            "Warehouse Executive",
                        "Truck Vendor"],
                        width: "100%"
                    }]
                }, /*{
                    type: "group",
                    elements: [{
                        name: i.IsInitial,
                        field: "Initial",
                        type: "checkbox"
                    }, {
                        name: i.IsFinal,
                        field: "Final",
                        type: "checkbox"
                    }, {
                        name: i.IsForSetState,
                        field: "IsForSetState",
                        type: "checkbox"
                    }, {
                        name: i.IsAutoSchemeUpdate,
                        field: "IsAutoSchemeUpdate",
                        type: "checkbox"
                    }]
                },*/ {
                    name: i.Implementation,
                    field: "Implementation",
                    type: "table",
                    elements: n
                }, /*{
                    name: i.PreExecutionImplementation,
                    field: "PreExecutionImplementation",
                    type: "table",
                    elements: n
                }, {
                    name: i.Annotations,
                    type: "table",
                    field: "Annotations",
                    keyproperty: "Name",
                    elements: [{
                        name: i.AnnotationName,
                        field: "Name",
                        type: "input"
                    }, {
                        name: i.AnnotationValue,
                        field: "JsonValue",
                        type: "json"
                    }]
                }*/],
                graph: t.graph,
                readonly: t.graph.Settings.readonly,
                saveFunc: function (e) {
                    if (Array.isArray(e.Implementation)) {
                        var i = 1;
                        e.Implementation.forEach(function (e) {
                            e.Order = i, i++
                        })
                    }
                    if (Array.isArray(e.PreExecutionImplementation)) {
                        var i = 1;
                        e.PreExecutionImplementation.forEach(function (e) {
                            e.Order = i, i++
                        })
                    }
                    t.item.Name = e.Name, t.item.State = e.State,
                        //t.item.IsInitial = e.IsInitial, t.item.IsFinal = e.IsFinal, t.item.IsForSetState = e.IsForSetState, t.item.IsAutoSchemeUpdate = e.IsAutoSchemeUpdate, 
                        t.item.Implementation = e.Implementation,
                        //t.item.PreExecutionImplementation = e.PreExecutionImplementation, t.item.Annotations = e.Annotations,
                        WorkflowDesignerCommon.DataCorrection(t.graph.data), t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.activity) this.graph.Settings.forms.activity(a);
        else {
            e = new WorkflowDesignerForm(a);
            var o = function (e, i) {
                var n = !0;
                return n &= e.CheckRequired([i], ["Name"], WorkflowDesignerConstants.FieldIsRequired), t.graph.data.Activities.forEach(function (a) {

                    a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                }), e.CheckRequired(i.Implementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired)
                    //||
                    //(n = !1), e.CheckRequired(i.PreExecutionImplementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired) ||
                    //(n = !1), e.CheckRequired(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) ||
                    //(n = !1), e.CheckUnique(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)
                    //||
                    //(n = !1), i.Annotations.forEach(function (a) {
                    //a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                    //}
                    //)
                    , n
            },
                r = function (t) {
                    return !!o(e, t) && (e.ClearTempField(t), e.parameters.saveFunc(t), !0)
                };
            e.showModal(r)
        }
    }, this.ShowGroup = function () {
        new WorkflowDesignerForm({
            type: "form",
            title: this.GetName(),
            data: this.manager.graph.data,
            elements: [{
                type: "scheme",
                group: this.item.DesignerSettings.Group
            }],
            graph: t.graph,
            readonly: !0
        }).showModal()
    }, this.Sync = function () {
        if (t.group) {
            void 0 == t.item.DesignerSettings.InlineElementSettings && (t.item.DesignerSettings.InlineElementSettings = {});
            var e = t.control.getPosition();
            t.item.DesignerSettings.InlineElementSettings.X = e.x, t.item.DesignerSettings.InlineElementSettings.Y = e.y
        } else {
            void 0 == t.item.DesignerSettings && (t.item.DesignerSettings = {});
            var e = t.control.getPosition();
            t.item.DesignerSettings.X = e.x, t.item.DesignerSettings.Y = e.y
        }
        t.oldpos = void 0
    }, this.createExInfo = function (e) {
        var i = "";
        Array.isArray(t.item.Implementation) && t.item.Implementation.length > 0 && t.item.Implementation.forEach(function (e) {
            i.length > 0 && (i += ", "), i += e.ActionName
        });
        var n = "";
        if (Array.isArray(t.item.PreExecutionImplementation) && t.item.PreExecutionImplementation.length > 0 && (t.item.PreExecutionImplementation.forEach(function (e) {
            n.length > 0 && (n += ", "), n += e.ActionName
        }), "" == i && (i = WorkflowDesignerConstants.None)), i.length > 0) {
            var a = new Konva.Text({
                x: 10,
                y: this.graph.Settings.DefaultActivityHeight + 5,
                text: i,
                fontFamily: "Arial",
                fontSize: 12,
                fill: "#4A4A4A",
                fontStyle: "bold"
            });
            if (e.add(a), n.length > 0) {
                var o = new Konva.Text({
                    x: 10,
                    y: this.graph.Settings.DefaultActivityHeight + a.getHeight() + 5,
                    text: n,
                    fontFamily: "Arial",
                    fontSize: 12,
                    fill: "#4A4A4A",
                    fontStyle: "italic"
                });
                e.add(o)
            }
        }
    }, this.destroy = function () {
        this.control.destroy()
    }
}

function WorkflowGraph(e, t, i, n) {
    var a = this;
    a.container = e, a.designer = t, a.suggestionsCache = new Object, a.parametersCache = new Object, void 0 == i && (i = new Object), void 0 == i.Container && (i.Container = "container"), void 0 == i.graphwidth && (i.graphwidth = 1024), void 0 == i.graphheight && (i.graphheight = 768), void 0 == i.DefaultActivityWidth && (i.DefaultActivityWidth = 200), void 0 == i.DefaultActivityHeight && (i.DefaultActivityHeight = 60), void 0 == i.DefaultMoveStep && (i.DefaultMoveStep = 10), void 0 == i.imagefolder && (i.imagefolder = "/images/"), this.Settings = i, this.Settings.ContainerStage = this.container + "_stage", $("#" + this.container).append("<div id='" + this.Settings.ContainerStage + "' class='workflowenginecontainerstage'></div>"), this.Stage = new Konva.Stage({
        container: this.Settings.ContainerStage,
        width: parseInt(this.Settings.graphwidth),
        height: parseInt(this.Settings.graphheight)
    }), this.getParam = function (e) {
        var t = this.designer.getParam(e);
        return "true" === t || "false" !== t && t
    }, this.setParam = function (e, t) {
        this.designer.setParam(e, t)
    }, this.Components = new Array, this.AddComponent = function (e) {
        var t = new e;
        return t.init(this), a.Components.push(t), t
    }, this.GetComponentByType = function (e) {
        for (var t = 0; t < this.Components.length; t++)
            if (this.Components[t].type == e) return this.Components[t]
    }, this.ComponentsExecute = function (e, t) {
        a.Components.forEach(function (i) {
            i[e] && i[e](t)
        })
    }, n && n.forEach(function (e) {
        a.AddComponent(e)
    }), this.Draw = function (e) {
        a.data = e, 0 == a.graphData.length && a.StoreGraphData(), a.onSelectionChanged(), a.ComponentsExecute("draw")
    }, this.GraphLayerSetOffset = function (e, t) {
        a.ComponentsExecute("LayerSetOffset", {
            x: e,
            y: t
        }), a.redrawAll()
    }, this.GraphLayerScale = function (e, t) {
        void 0 == a._bg && (a._bg = a.GetComponentByType("WorkflowDesignerBackground"));
        var i = a._bg.BackgroundLayer.getScale(),
            n = i.x + e;
        n > .3 && n < 2 && (a.ComponentsExecute("LayerScale", {
            scale: i.x,
            delta: e
        }), void 0 != t && a.ComponentsExecute("setPosition", t), a.redrawAll())
    }, this.GraphLayerScaleNorm = function () {
        a.ComponentsExecute("LayerScaleNorm", 1), a.redrawAll()
    }, this.GraphUpdatePosition = function (e) {
        void 0 == a._bg && (a._bg = a.GetComponentByType("WorkflowDesignerBackground")), a._bg.updatePosition(e), a.redrawAll()
    }, this.Refresh = function () {
        a.designer.refresh()
    }, this.onFullScreenClick = function () {
        void 0 !== this.data.__loadParams && this.data.__loadParams.isFullScreen ? (this.setFullScreen(!1), this.data.__loadParams.isFullScreen = !1) : (this.setFullScreen(!0), void 0 === this.data.__loadParams && (this.data.__loadParams = {}), this.data.__loadParams.isFullScreen = !0), this.redrawAll()
    }, this.setFullScreen = function (e) {
        var t = $("#" + this.container);
        void 0 == this._toolbar && (this._toolbar = this.GetComponentByType("WorkflowDesignerToolbar"));
        var i = this._toolbar;
        if (e) {
            this.originalContainerStyle = t.attr("style"), void 0 == this.originalContainerStyle && (this.originalContainerStyle = ""), this.originalWidth = this.Stage.width(), this.originalHeight = this.Stage.height();
            var n = $(window).width() - 2,
                a = $(window).height() - 2;
            this.Stage.hide(), this.Stage.width(n), this.Stage.height(a), void 0 != i && (i.setItemActive("fullscreen", !0), i.changeSize(n, a)), t.css({
                position: "absolute",
                top: 0,
                left: 0,
                width: n,
                height: a,
                "z-index": 1e3,
                background: "white"
            }), this.Stage.show()
        } else void 0 != this.originalContainerStyle && void 0 != this.originalWidth && void 0 != this.originalHeight && (this.Stage.hide(), t.attr("style", this.originalContainerStyle), this.Stage.width(this.originalWidth), this.Stage.height(this.originalHeight), void 0 != i && (i.setItemActive("fullscreen", !1), i.changeSize(this.originalWidth, this.originalHeight)), this.Stage.show())
    }, this.DeselectAll = function () {
        a.ComponentsExecute("DeselectAll"), a.onSelectionChanged(!1), a.redrawAll()
    }, this.SelectAll = function () {
        a.ComponentsExecute("SelectAll"), a.onSelectionChanged(!1), a.redrawAll()
    }, this.redrawAll = function () {
        void 0 == this._toolbal && (this._toolbal = a.GetComponentByType("WorkflowDesignerToolbar")), void 0 != this._toolbal && this._toolbal.draw(), a.Stage.batchDraw()
    }, this.CorrectPossition = function (e, t) {
        return 0 == t.getScaleX() || 0 == t.getScaleY() ? {
            x: t.getOffsetX(),
            y: 0
        } : {
                x: e.x / t.getScaleX() + t.getOffsetX(),
                y: e.y / t.getScaleY() + t.getOffsetY()
            }
    }, this.DeleteSelected = function () {
        var e = this,
            t = new Array;
        this.Components.forEach(function (e) {
            e.GetSelected && (t = t.concat(e.GetSelected()))
        }), t.length > 0 && e.confirm(WorkflowDesignerConstants.DeleteConfirm, function () {
            t.forEach(function (e) {
                e.Delete()
            }), e.onSelectionChanged(!1), e.StoreGraphData(), e.redrawAll()
        })
    }, this.confirm = function (e, t) {
        var i = $('<div class="ui mini modal"></div>');
        i.append($('<div class="content"><p>' + e + "</p></div>"));
        var n = $('<div class="actions"></div>').append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextYes + "</div>").append('<div class="ui secondary  cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>");
        i.append(n), WorkflowDesignerCommon.modal(i, {
            onApprove: function () {
                t()
            }
        }), WorkflowDesignerCommon.modal(i, "show")
    }, this.destroy = function () {
        if (void 0 != this.originalContainerStyle) {
            $("#" + this.container).attr("style", this.originalContainerStyle)
        }
        void 0 != this.data && (void 0 == this.data.__loadParams && (this.data.__loadParams = {}), this.data.__loadParams.graphData = this.graphData, this.data.__loadParams.graphDataIndex = this.graphDataIndex), this.Stage.destroy(), this.ComponentsExecute("destroy")
    }, this.GetCurrentActivity = function () {
        if (void 0 != a.data && void 0 != a.data.AdditionalParams && void 0 != a.data.AdditionalParams.ProcessParameters)
            for (var e = 0; e < a.data.AdditionalParams.ProcessParameters.length; e++) {
                var t = a.data.AdditionalParams.ProcessParameters[e];
                if ("CurrentActivity" === t.Name) return t.Value
            }
    }, this.isCurrentActivityForSubprocess = function (e) {
        if (void 0 == a.data || void 0 == a.data.AdditionalParams || !Array.isArray(a.data.AdditionalParams.SubprocessCurrentActivities)) return !1;
        for (var t = 0; t < a.data.AdditionalParams.SubprocessCurrentActivities.length; t++)
            if (e === a.data.AdditionalParams.SubprocessCurrentActivities[t]) return !0;
        return !1
    }, this.IsGroupActive = function (e) {
        var t = this.GetCurrentActivity();
        if (void 0 == t) return !1;
        for (var i = 0; i < a.data.Activities.length; i++) {
            var n = a.data.Activities[i];
            if (t === n.Name) return a.CheckActive(n, e)
        }
        return !1
    }, this.CheckActive = function (e, t) {
        var i = this,
            n = e.DesignerSettings.Group;
        if (n === t) return !0;
        var a = null;
        if (void 0 !== e.DesignerSettings.InlineElementSettings && null !== e.DesignerSettings.InlineElementSettings && void 0 !== e.DesignerSettings.InlineElementSettings.Group && null !== e.DesignerSettings.InlineElementSettings.Group) a = e;
        else
            for (var o = 0; o < i.data.Activities.length; o++) {
                var r = i.data.Activities[o];
                if (r.DesignerSettings.Group === n && void 0 !== r.DesignerSettings.InlineElementSettings && null !== r.DesignerSettings.InlineElementSettings && void 0 !== r.DesignerSettings.InlineElementSettings.Group && null !== r.DesignerSettings.InlineElementSettings.Group) {
                    a = r;
                    break
                }
            }
        if (null === a) return !1;
        var s = a.DesignerSettings.InlineElementSettings.Group;
        if (s === t) return !0;
        for (var l = null, o = 0; o < i.data.Activities.length; o++) {
            var d = i.data.Activities[o];
            if (void 0 !== d.DesignerSettings.InlineElementSettings && null !== d.DesignerSettings.InlineElementSettings && d.DesignerSettings.Group === s) {
                l = d;
                break
            }
        }
        return null !== l && i.CheckActive(l, t)
    }, this.getActionParameterDefinition = function (e, t) {
        for (var i = 0; i < a.data.CodeActions.length; i++) {
            var n = a.data.CodeActions[i];
            if (n.Type === t && n.Name === e) {
                if (n.ParameterDefinitions && n.ParameterDefinitions.length > 0) return n.ParameterDefinitions;
                break
            }
        }
        return a.getCodeactionParameter(t, e)
    }, this.getActionNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.CodeActions.length; i++) {
            var n = e.data.CodeActions[i];
            "action" === n.Type.toLowerCase() && t.push(n.Name)
        }
        return e.data.AdditionalParams.Actions.concat(t)
    },
        this.getServices = function () {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            console.log(this.responseText);
            if (this.readyState === 4 && this.status === 200) {
                alert(this.responseText);
            }
        };
        xhttp.open("GET", "https://localhost:44381/api/WorkOrder/GetServices", true);

        }

        this.getConditionNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.CodeActions.length; i++) {
            var n = e.data.CodeActions[i];
            "condition" === n.Type.toLowerCase() && t.push(n.Name)
        }
        return e.data.AdditionalParams.Conditions.concat(t)
    }, this.getActorNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.CodeActions.length; i++) {
            var n = e.data.CodeActions[i];
            "ruleget" !== n.Type.toLowerCase() && "rulecheck" !== n.Type.toLowerCase() || t.push(n.Name)
        }
        return e.unique(e.data.AdditionalParams.Rules.concat(t))
    }, this.getTypeNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.Parameters.length; i++) {
            var n = e.data.Parameters[i];
            t.push(decodeURIComponent(n.Type))
        }
        return e.unique(e.data.AdditionalParams.Types.concat(t))
    }, this.getCodeactionParameter = function (e, t) {
        var i = null;
        return void 0 !== this.parametersCache[e] && void 0 !== this.parametersCache[e][t] ? i = this.parametersCache[e][t] : (void 0 === this.parametersCache[e] && (this.parametersCache[e] = new Object), i = this.designer.requestcodeactionparameter(e, t), this.parametersCache[e][t] = i), i
    }, this.getAutoCompleteSuggestions = function (e, t, i) {
        var n;
        return void 0 === t || "" === t ? new Array : (void 0 != this.suggestionsCache[e] && void 0 != this.suggestionsCache[e][t] ? n = this.suggestionsCache[e][t] : (void 0 == this.suggestionsCache[e] && (this.suggestionsCache[e] = new Object), n = this.designer.requestautocompletesuggestions(e, t), this.suggestionsCache[e][t] = n), $.grep(n, function (e) {
            return e.toLowerCase().indexOf(i.toLowerCase()) >= 0
        }))
    }, this.getNonSystemParameters = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.Parameters.length; i++) {
            var n = e.data.Parameters[i];
            "system" != n.Purpose.toLowerCase() && t.push(n)
        }
        return t
    }, this.unique = function (e) {
        return $.grep(e, function (t, i) {
            return i === $.inArray(t, e)
        })
    }, this.setInlinedFlag = function (e) {
        this.data.CanBeInlined = e, a.StoreGraphData()
    }, this.graphData = [], this.graphDataIndex = -1, this.StoreGraphData = function () {
        var e = void 0;
        void 0 != this.data.__loadParams && (e = this.data.__loadParams.graphData, this.data.__loadParams.graphData = void 0);
        var t = JSON.stringify(this.data);
        if (void 0 != e && (this.data.__loadParams.graphData = e), this.graphDataIndex < 0 || this.graphData[this.graphDataIndex] != t) {
            this.graphDataIndex++ , this.graphData.length > this.graphDataIndex && this.graphData.splice(this.graphDataIndex, this.graphData.length - this.graphDataIndex), this.graphData.push(t);
            var i = 200;
            void 0 != WorkflowDesignerConstants.UndoDepth && (i = WorkflowDesignerConstants.UndoDepth), this.graphData.length > i && (this.graphData.splice(0, 1), this.graphDataIndex--)
        }
        this.сheckToolbarButtonState()
    }, this.ClearGraphData = function () {
        this.graphData = [], this.graphDataIndex = -1
    }, this.Undo = function () {
        this.graphDataIndex > 0 && this.changeGraphDataIndex(this.graphDataIndex - 1)
    }, this.Redo = function () {
        this.graphData.length > this.graphDataIndex && this.changeGraphDataIndex(this.graphDataIndex + 1)
    }, this.changeGraphDataIndex = function (e) {
        if (this.graphData.length > e) {
            var t = JSON.parse(this.graphData[e]);
            WorkflowDesignerCommon.DataCorrection(t), this.designer.data = t, this.Draw(t), this.graphDataIndex = e
        }
        this.сheckToolbarButtonState()
    }, this.сheckToolbarButtonState = function () {
        void 0 == this._toolbal && (this._toolbal = a.GetComponentByType("WorkflowDesignerToolbar"));
        var e = this._toolbal;
        void 0 != e && (e.setItemDisabled("undo", this.graphDataIndex <= 0), e.setItemDisabled("redo", this.graphData.length <= this.graphDataIndex + 1), e.onChangeScheme(), e.Layer.batchDraw())
    }, this.onSelectionChanged = function (e) {
        void 0 == this._toolbal && (this._toolbal = a.GetComponentByType("WorkflowDesignerToolbar"));
        var t = this._toolbal;
        if (void 0 != t) {
            var i;
            if (void 0 == e) {
                var n = a.GetComponentByType("WorkflowDesignerActivityManager"),
                    o = a.GetComponentByType("WorkflowDesignerTransitionManager"),
                    r = n.GetSelected(),
                    s = o.GetSelected();
                i = r.length > 0 || s.length > 0
            } else i = e;
            t.setItemDisabled("copy", !i),
                t.setItemDisabled("delete", !i)
        }
    }
}

function WorkflowDesignerTransitionControl(e) {
    var t = this;
    this.manager = e.manager, this.graph = e.graph, this.from = e.from, this.to = e.to, this.item = e.item, this.group = e.group, this.setFrom = function (e) {
        this.from = e, this.item.From = e.item
    }, this.setTo = function (e) {
        this.to = e, this.item.To = e.item
    }, this.GetName = function () {
        return this.item.Name
    }, this.SetName = function (e) {
        this.item.Name = e
    }, this.control = void 0, this.arrow = void 0, this.line = void 0, void 0 != this.item.DesignerSettings && void 0 != this.item.DesignerSettings.X && void 0 != this.item.DesignerSettings.Y && (this.middle = {
        x: Number(this.item.DesignerSettings.X),
        y: Number(this.item.DesignerSettings.Y)
    }), this.from.RegisterTransition(this), this.to.RegisterTransition(this), this.start = void 0, this.end = void 0, this.angle = void 0, this.activePoint = void 0, this.touchpoints = [], this.DrawTransition = function (e, t) {
        var i, n, a, o, r = this,
            s = this.from.rectangle,
            l = this.to.rectangle;
        i = Number(this.from.getX()), n = Number(this.from.getY()), a = Number(this.to.getX()), o = Number(this.to.getY());
        var d = Number(s.attrs.width / 2),
            c = Number(s.attrs.height / 2),
            h = Number(l.attrs.width / 2),
            u = Number(l.attrs.height / 2),
            m = i + d,
            g = n + c,
            f = a + h,
            p = o + u;
        if (this.direction = {
            start: 0,
            end: 0
        }, this.from == this.to) this.start = {
            x: m + d,
            y: g - c + 14
        }, this.end = {
            x: f + h - 25,
            y: p - u
        }, this.direction.end = 1, void 0 == this.middle && (this.middle = {
            x: m + d + c,
            y: g - 2 * c
        });
        else {
            var v = !1;
            void 0 == this.middle && (v = !0, this.middle = {
                x: (m + f) / 2,
                y: (g + p) / 2
            });
            var y = m,
                w = g,
                S = f,
                b = p;
            if (g - c - 25 > this.middle.y && p - u - 25 > this.middle.y ? (w = g - c, b = p - u, this.direction.start = 1, this.direction.end = 1) : g + c + 25 < this.middle.y && p + u + 25 < this.middle.y ? (w = g + c, b = p + u, this.direction.start = 1, this.direction.end = 1) : m - d - 25 > this.middle.x && f - h - 25 > this.middle.x ? (y = m - d, S = f - h) : m + d + 25 < this.middle.x && f + h + 25 < this.middle.x ? (y = m + d, S = f + h) : (m + d + 25 < this.middle.x ? y += d : m - d - 25 > this.middle.x ? y -= d : g + c + 25 < this.middle.y ? (w += c, this.direction.start = 1) : g - c - 25 > this.middle.y ? (w -= c, this.direction.start = 1) : y <= this.middle.x ? y += d : y -= d, f + h + 25 < this.middle.x ? S += h : f - h - 25 > this.middle.x ? S -= h : p + u + 25 < this.middle.y ? (b += u, this.direction.end = 1) : p - u - 25 > this.middle.y ? (b -= u, this.direction.end = 1) : (w >= this.middle.y ? b += u : b -= u, this.direction.end = 1)), void 0 != e && (y = e.x, w = e.y, v = !0), void 0 != t && (S = t.x, b = t.y, v = !0), this.start = {
                x: y,
                y: w
            }, this.end = {
                x: S,
                y: b
            }, v) {
                this.middle = {
                    x: (y + S) / 2,
                    y: (w + b) / 2
                };
                for (var C = 0; C < r.manager.ItemControls.length; C++) {
                    var D = r.manager.ItemControls[C];
                    D != r && D.middle.x == r.middle.x && D.middle.y == r.middle.y && (0 == r.direction.start ? r.middle.y += 40 : r.middle.x += 40)
                }
            }
            void 0 == e && (0 == this.direction.start ? this.middle.y > w + c - 7 ? w += c - 7 : this.middle.y < w - c + 7 ? w -= c - 7 : w = this.middle.y : this.middle.x > y + d - 10 ? y += d - 10 : this.middle.x < y - d + 10 ? y -= d - 10 : y = this.middle.x), void 0 == t && (0 == this.direction.end ? this.middle.y > b + u - 7 ? b += u - 7 : this.middle.y < b - u + 7 ? b -= u - 7 : b = this.middle.y : this.middle.x > S + h - 10 ? S += h - 10 : this.middle.x < S - h + 10 ? S -= h - 10 : S = this.middle.x), this.start = {
                x: y,
                y: w
            }, this.end = {
                x: S,
                y: b
            }
        }
        this.points = this.GetPoints([this.start.x, this.start.y, this.middle.x, this.middle.y, this.end.x, this.end.y], this.direction);
        var T = this.GetColor();
        if (this.angle = Math.atan2(this.points[this.points.length - 1] - this.points[this.points.length - 3], this.points[this.points.length - 2] - this.points[this.points.length - 4]), void 0 == this.control) {
            this.control = new Konva.Group({
                x: 0,
                y: 0,
                rotation: 0
            }), this.arrow = WorkflowDesignerCommon.createArrowByAngle(this.end.x, this.end.y, this.angle, 15, T);
            var k = {
                points: this.points,
                stroke: T,
                strokeWidth: 2,
                lineCap: "round",
                lineJoin: "round"
            };
            this.item.IsFork && (k.dash = [10, 10]), this.line = new Konva.Line(k), this.control.add(this.line), this.control.add(this.arrow), this.manager.Layer.add(this.control)
        } else WorkflowDesignerCommon.updateArrowByAngle(this.arrow, this.end.x, this.end.y, this.angle, 15, T), this.line.setPoints(this.points)
    }, this.GetPoints = function (e, t) {
        if (e[0] == e[2] == e[4] || e[1] == e[3] == e[5]) return e;
        var i = new Array;
        return e[0] == e[2] || e[1] == e[3] ? i.push(e[0], e[1], e[2], e[3]) : (i.push(e[0], e[1]), 0 == t.start ? i.push(e[2], e[1]) : i.push(e[0], e[3]), i.push(e[2], e[3])), 0 == t.end && i[i.length - 2] != e[4] ? i.push(i[i.length - 2], e[5]) : 1 == t.end && i[i.length - 1] != e[5] && i.push(e[4], i[i.length - 1]), i.push(e[4], e[5]), i
    }, this.GetColor = function () {
        var e = void 0 == this.item.Classifier ? "notspecified" : this.item.Classifier.toLowerCase();
        return "notspecified" == e ? "#7F8C8D" : "direct" == e ? "#27AE60" : "#2980B9"
    }, this.DrawActivePoint = function () {
        if (this.activePoint) this._moveActivePoint(this.middle.x, this.middle.y);
        else {
            var e = void 0;
            void 0 != this.graph.Settings.drawElements && void 0 != this.graph.Settings.drawElements.transitionActivePoint && (e = this.graph.Settings.drawElements.transitionActivePoint(this, this.middle.x, this.middle.y)), e || (e = this.graph.Settings.transitionActivePointOldStyle ? this._createActivePointOld(this.middle.x, this.middle.y, this.control) : this._createActivePoint(this.middle.x, this.middle.y, this.control)), t.manager.APLayer.add(e), this.activePoint = e
        }
    }, this.DrawTouchPoints = function () {
        this._getLineLength(this.start.x, this.start.y, this.end.x, this.end.y);
        if (void 0 == this.touchpoints[0] || this.touchpoints[0].isdestroyed) {
            var e = this._createTouchPoint(this.points, this.control, !1);
            t.manager.APLayer.add(e), this.touchpoints[0] = e
        } else this._moveTouchPoints(this.touchpoints[0], this.points, !1);
        if (void 0 == this.touchpoints[1] || this.touchpoints[1].isdestroyed) {
            var i = this._createTouchPoint(this.points, this.control, !0);
            t.manager.APLayer.add(i), this.touchpoints[1] = i
        } else this._moveTouchPoints(this.touchpoints[1], this.points, !0)
    }, this.Draw = function (e, t) {
        this.DrawTransition(e, t), this.DrawActivePoint(), this.graph.Settings.readonly || this.DrawTouchPoints()
    }, this.DeleteTouchPoint = function (e) {
        for (var t = 0; t < this.touchpoints.length; t++) this.touchpoints[t].isend === e && (this.touchpoints[t].destroy(), this.touchpoints[t].isdestroyed = !0)
    }, this.Delete = function () {
        this.from.UnregisterTransition(this), this.to.UnregisterTransition(this), this.control.destroy(), void 0 != this.activePoint.ToolTip && this.activePoint.ToolTip.destroy(), this.activePoint.destroy();
        for (var e = 0; e < this.touchpoints.length; e++) this.touchpoints[e].destroy();
        var t = this.graph.data.Transitions.indexOf(this.item);
        t >= 0 && this.graph.data.Transitions.splice(t, 1), t = this.manager.ItemControls.indexOf(this), t >= 0 && this.manager.ItemControls.splice(t, 1)
    }, this._onDelete = function () {
        t.graph.confirm(WorkflowDesignerConstants.DeleteConfirmCurrent, function () {
            t.Delete(), t.graph.onSelectionChanged(), t.graph.redrawAll(), t.graph.StoreGraphData()
        })
    }, this.Select = function () {
        if (1 != this.selected) {
            var e = this;
            if (e.oldstroke = this.line.getStroke(), e.line.setStroke(WorkflowDesignerConstants.SelectColor), e.line.setStrokeWidth(3), void 0 == e.bar) {
                var t = e.graph.Settings.imagefolder,
                    i = -15,
                    n = [];
                e.graph.Settings.notshowwindows || n.push({
                    img: t + "wfe.settings.png",
                    click: function () {
                        e.ShowProperties()
                    }
                }), e.graph.Settings.readonly || (n.push({
                    img: t + "wfe.delete.png",
                    click: function () {
                        e._onDelete()
                    }
                }), i = -30), n.length > 0 && (e.bar = WorkflowDesignerBar(e.manager.APLayer, n, {
                    x: i,
                    y: -50
                }), e.activePoint.add(e.bar))
            } else this.bar.show();
            e.selected = !0
        }
    }, this.Deselect = function () {
        0 != this.selected && (this.line.setStrokeWidth(2), void 0 != this.oldstroke && this.line.setStroke(this.oldstroke), void 0 != this.bar && this.bar.hide(), this.selected = !1)
    }, this._moveTouchPoints = function (e, t, i) {
        var n = i ? {
            x: t[t.length - 2],
            y: t[t.length - 1]
        } : {
                x: t[0],
                y: t[1]
            },
            a = i ? {
                x: t[t.length - 4],
                y: t[t.length - 3]
            } : {
                    x: t[2],
                    y: t[3]
                },
            o = {
                x: 0,
                y: 0
            },
            r = i ? 24 : 10;
        n.x == a.x ? n.y < a.y ? o.y = r : o.y = -r : n.y == a.y && (n.x < a.x ? o.x = r : o.x = -r), e.setPosition(n), e.circle.setPosition(o)
    }, this._createTouchPoint = function (e, t, i) {
        var n = this,
            a = i ? {
                x: e[e.length - 2],
                y: e[e.length - 1]
            } : {
                    x: e[0],
                    y: e[1]
                },
            o = i ? {
                x: e[e.length - 4],
                y: e[e.length - 3]
            } : {
                    x: e[2],
                    y: e[3]
                },
            r = {
                x: 0,
                y: 0
            },
            s = i ? 24 : 10;
        a.x == o.x ? a.y < o.y ? r.y = s : r.y = -s : a.y == o.y && (a.x < o.x ? r.x = s : r.x = -s);
        var l = new Konva.Group({
            x: a.x,
            y: a.y,
            draggable: !0
        });
        l.isend = i;
        var d = this.GetColor(),
            c = new Konva.Circle({
                x: r.x,
                y: r.y,
                radius: 5,
                fill: d
            });
        l.add(c), l.circle = c, l.transition = t;
        var h = function () {
            var e = n.graph.CorrectPossition(c.getAbsolutePosition(), n.manager.Layer);
            i ? n.DrawTransition(void 0, e) : n.DrawTransition(e, void 0), n.DrawActivePoint(), n.DeleteTouchPoint(!i), n.manager.batchDraw()
        };
        return l.on("dragmove", function () {
            h()
        }), l.on("dragend", function () {
            var e = c.getAbsolutePosition(),
                t = n.manager.getIntersectingActivity(e);
            void 0 == t || t.group || (n.middle = void 0, n.Sync(), i ? (n.to.UnregisterTransition(n), n.setTo(t), n.to.RegisterTransition(n)) : (n.from.UnregisterTransition(n), n.setFrom(t), n.from.RegisterTransition(n)), n.graph.StoreGraphData()), n.Draw(), n.manager.batchDraw()
        }), l
    }, this._moveActivePoint = function (e, t) {
        this.activePoint.setPosition({
            x: e,
            y: t
        })
    }, this._createActivePoint = function (e, t, i) {
        var n = this,
            a = !n.graph.Settings.disableobjectmovements,
            o = new Konva.Group({
                x: e,
                y: t,
                draggable: a
            }),
            r = "";
        isTimer = !1;
       // var s = this.item.Trigger.Type.toLowerCase();
        var s = "auto";
        "auto" === s ? (r = WorkflowDesignerConstants.TransitionAuto, void 0 == r && (r = "Auto")) : "command" === s ? this.item.Trigger && this.item.Trigger.Command && this.item.Trigger.Command.Name && (r = this.item.Trigger.Command.Name, r.length > 15 && (r = r.substr(0, 15) + "...")) : "timer" === s && (isTimer = !0, this.item.Trigger && this.item.Trigger.Timer && this.item.Trigger.Timer.Name && (r = this.item.Trigger.Timer.Name, r.length > 15 && (r = r.substr(0, 15) + "...")));
        var l = [],
            d = [];
        isTimer && l.push(this.manager.ImageTimer), Array.isArray(this.item.Restrictions) && this.item.Restrictions.length > 0 && d.push(this.manager.ImageActor);
       // var c = this.item.Conditions[0].Type.toLowerCase();
        var c = "action";
        "action" === c ? d.push(this.manager.ImageCondition) : "otherwise" === c && d.push(this.manager.ImageOtherwise);
        var h = WorkflowDesignerCommon.getTextWidth(r, "bold 12px arial") + 2,
            u = 15 * l.length,
            m = 15 * d.length,
            g = (h + u + m) / 2,
            f = h + u + m + 10,
            p = new Konva.Text({
                x: -g + u + 1,
                y: -5,
                text: r,
                fontSize: 12,
                fontFamily: "Arial",
                fill: "#FFFFFF",
                fontStyle: "bold"
            }),
            v = new Konva.Rect({
                x: -g - 5,
                y: -12,
                width: f,
                height: 25,
                fill: n.GetColor(),
                cornerRadius: 15
            });
        o.add(v);
        for (var y = 0; y < l.length; y++) o.add(new Konva.Image({
            x: -g + 12 * y + 2,
            y: -5,
            image: l[y],
            width: 10,
            height: 10,
            strokeWidth: 0
        }));
        for (var y = 0; y < d.length; y++) o.add(new Konva.Image({
            x: -g + 2 + u + h + 12 * y,
            y: -5,
            image: d[y],
            width: 10,
            height: 10,
            strokeWidth: 0
        }));
        o.add(p), o.transition = i;
        var w = function (e, t) {
            var i = n.graph.CorrectPossition(o.getAbsolutePosition(), n.manager.Layer);
            n.middle = i, n.DrawTransition(), n.graph.Settings.readonly || n.DrawTouchPoints(), e && (n.DrawActivePoint(), n.Sync()), n.manager.batchDraw()
        },
            S = function (e) {
                if (!n.graph.Settings.disableobjectmovements) {
                    var t = n.selected;
                    e.evt.ctrlKey || n.graph.DeselectAll(), t ? n.Deselect() : n.Select(), void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide(), n.graph.onSelectionChanged(), n.manager.batchDraw()
                }
            };
        if (o.on("click", S), o.on("touchend", S), o.on("dblclick", function () {
            n.graph.DeselectAll(), n.Select(), n.manager.batchDraw(), n.graph.Settings.notshowwindows || n.ShowProperties()
        }), o.on("dragstart", function () {
            n.graph.Settings.disableobjectmovements || void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide()
        }), o.on("dragmove", function () {
            n.graph.Settings.disableobjectmovements || w(!1)
        }), o.on("dragend", function () {
            n.graph.Settings.disableobjectmovements || w(!0)
        }), 1 == n.graph.getParam("exinfo")) n.createExInfo(o);
        else {
         //   var b = this.item.Trigger.Type;
           // void 0 != n.item.Trigger && void 0 != n.item.Trigger.Command && "Command" === n.item.Trigger.Type && (b += " " + n.item.Trigger.Command.Name), void 0 != n.item.Trigger && void 0 != n.item.Trigger.Timer && "Timer" === n.item.Trigger.Type && (b += " " + n.item.Trigger.Timer.Name), b += "\r\n" + this.item.Conditions[0].Type, void 0 != n.item.Conditions[0] && "Action" === n.item.Conditions[0].Type && (b += " " + n.item.Conditions[0].Action.ActionName), WorkflowDesignerTooltip(n.manager.APLayer, o, b, 17)
        }
        return o
    }, this._createActivePointOld = function (e, t, i) {
        var n = this,
            a = !n.graph.Settings.disableobjectmovements,
            o = new Konva.Group({
                x: e,
                y: t,
                draggable: a
            }),
            r = "",
            s = this.item.Trigger.Type.toLowerCase();
        "auto" === s ? r += "A" : "command" === s ? r += "C" : "timer" === s && (r += "T");
        var l = this.item.Conditions[0].Type.toLowerCase();
        "always" === l ? r += "A" : "action" === l ? r += "C" : "otherwise" === l && (r += "O"), Array.isArray(this.item.Restrictions) && this.item.Restrictions.length > 0 && (r += "R");
        var d = new Konva.Rect({
            x: 3 == r.length ? -22 : -16,
            y: -15,
            width: 3 == r.length ? 47 : 34,
            height: 30,
            fill: n.GetColor(),
            cornerRadius: 15
        });
        o.add(d);
        var c = new Konva.Text({
            x: 3 == r.length ? -16 : -10,
            y: -7,
            text: r,
            fontSize: 16,
            fontFamily: "Arial",
            fill: "#FFFFFF",
            fontStyle: "bold"
        });
        o.add(c), o.transition = i;
        var h = function (e, t) {
            var i = n.graph.CorrectPossition(o.getAbsolutePosition(), n.manager.Layer);
            n.middle = i, n.DrawTransition(), n.graph.Settings.readonly || n.DrawTouchPoints(), e && (n.DrawActivePoint(), n.Sync()), n.manager.batchDraw()
        },
            u = function (e) {
                if (!n.graph.Settings.disableobjectmovements) {
                    var t = n.selected;
                    e.evt.ctrlKey || n.graph.DeselectAll(), t ? n.Deselect() : n.Select(), void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide(), n.graph.onSelectionChanged(), n.manager.batchDraw()
                }
            };
        if (o.on("click", u), o.on("touchend", u), o.on("dblclick", function () {
            n.graph.DeselectAll(), n.Select(), n.manager.batchDraw(), n.graph.Settings.notshowwindows || n.ShowProperties()
        }), o.on("dragstart", function () {
            n.graph.Settings.disableobjectmovements || void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide()
        }), o.on("dragmove", function () {
            n.graph.Settings.disableobjectmovements || h(!1)
        }), o.on("dragend", function () {
            n.graph.Settings.disableobjectmovements || h(!0)
        }), 1 == n.graph.getParam("exinfo")) n.createExInfo(o);
        else {
            var m = this.item.Trigger.Type;
            void 0 != n.item.Trigger && void 0 != n.item.Trigger.Command && "Command" === n.item.Trigger.Type && (m += " " + n.item.Trigger.Command.Name), void 0 != n.item.Trigger && void 0 != n.item.Trigger.Timer && "Timer" === n.item.Trigger.Type && (m += " " + n.item.Trigger.Timer.Name), m += "\r\n" + this.item.Conditions[0].Type, void 0 != n.item.Conditions[0] && "Action" === n.item.Conditions[0].Type && (m += " " + n.item.Conditions[0].Action.ActionName), WorkflowDesignerTooltip(n.manager.APLayer, o, m, 17)
        }
        return o
    }, this.createExInfo = function (e) {
        var i = "";
        if (void 0 != t.item.Trigger && void 0 != t.item.Trigger.Command && "Command" === t.item.Trigger.Type && (Array.isArray(t.item.Restrictions) && t.item.Restrictions.length > 0 && t.item.Restrictions.forEach(function (e) {
            if (void 0 != e.Actor) {
                var t = e.Actor.Name;
                "Restrict" == e.Type && (t = "(" + t + ")"), i.length > 0 && (i += ", "), i += t
            }
        }), i.length > 0 && (i += " -> "), i += t.item.Trigger.Command.Name), void 0 != t.item.Trigger && void 0 != t.item.Trigger.Timer && "Timer" === t.item.Trigger.Type) {
            var n = t.item.Trigger.Timer.Value;
            void 0 != n && "" != n && (i += " " + n)
        }
        if (i.length > 0) {
            var a = new Konva.Text({
                x: 0,
                y: -30,
                text: i,
                fontFamily: "Arial",
                fontSize: 12,
                fill: "#4A4A4A",
                fontStyle: "bold"
            });
            a.setX(-Number(a.getWidth() / 2)), e.add(a)
        }
        var o = "";
        if (Array.isArray(t.item.Conditions) && t.item.Conditions.length > 0 && t.item.Conditions.forEach(function (e) {
            if (void 0 != e.Action) {
                var t = e.Action.ActionName;
                1 == e.ConditionInversion && (t = "(" + t + ")"), o.length > 0 && (o += ", "), o += t
            }
        }), o.length > 0) {
            var a = new Konva.Text({
                x: 0,
                y: 20,
                text: o,
                fontFamily: "Arial",
                fontSize: 12,
                fill: "#4A4A4A",
                fontStyle: "bold"
            });
            a.setX(-Number(a.getWidth() / 2)), e.add(a)
        }
    }, this._getLineLength = function (e, t, i, n) {
        return Math.sqrt(Math.pow(i - e, 2) + Math.pow(n - t, 2))
    }, this._getBendingKoeff = function (e, t, i, n, a, o) {
        var r = t - n,
            s = i - e,
            l = e * n - i * t;
        s <= 0 && (r = -r, s = -s, l = -l);
        var d = -(l + r * a) / s,
            c = d < o ? -1 : 1,
            h = this._getLineLength(e, t, i, n),
            u = (e + i) / 2,
            m = (t + n) / 2,
            g = this._getLineLength(u, m, a, o),
            f = g / h * c;
        return 0 == s && (f = -f), f
    }, this.getIntersectingRect = function (e) {
        var t = this.activePoint.getAbsolutePosition();
        return t.x >= e.xl && t.x < e.xr && t.y >= e.yl && t.y < e.yr
    }, this.ShowProperties = function () {
        var e = WorkflowDesignerConstants.TransitionFormLabel,
            i = {
                name: e.From,
                field: "From.Name",
                type: "select",
                displayfield: "Name",
                datasource: t.graph.data.Activities,
                width: "100%"
            };
        void 0 != this.item.From && "Inline" === this.item.From.ActivityType && (i = {
            type: "group",
            width: "100%",
            elements: [i, {
                name: e.InlinedFinalActivityName,
                field: "InlinedFinalActivityName",
                type: "input",
                width: "100%"
            }]
        });
        var n = {
            type: "form",
            title: e.Title,
            data: this.item,
            readonly: this.graph.Settings.readonly,
            elements: [
                //{
                //type: "group",
                //elements: [
                //        {
                //        name: e.Name,
                //        field: "Name",
                //        type: "input",
                //        width: "100%"
                //    }, {
                //        name: e.Classifier,
                //        field: "Classifier",
                //        type: "select",
                //        width: "100%",
                //        datasource: ["Direct", "Reverse", "NotSpecified"]
                //        }
                //]
                //},
                {
                type: "group",
                elements: [i, {
                    name: e.To,
                    field: "To.Name",
                    type: "select",
                    displayfield: "Name",
                    datasource: t.graph.data.Activities,
                    width: "100%"
                }]
                },
                //{
                //field: "Trigger",
                //code: "trigger",
                //type: "form",
                //datadefault: {
                //    Type: "Command"
                //    },

                //elements: [{
                //    type: "group",
                //    elements: [{
                //        name: e.Trigger,
                //        code: "triggertype",
                //        field: "Type",
                //        type: "select",
                //        datasource: ["Auto", "Command", "Timer"]
                //    }, {
                //        name: e.TriggerCommand,
                //        code: "triggercommand",
                //        field: "Command.Name",
                //        type: "select",
                //        displayfield: "Name",
                //        datasource: t.graph.data.Commands
                //    }, {
                //        name: e.TriggerTimer,
                //        code: "triggertimer",
                //        field: "Timer.Name",
                //        type: "select",
                //        displayfield: "Name",
                //        datasource: t.graph.data.Timers
                //    }]
                //}]
                //},
                //{
                //type: "group",
                //elements: [{
                //    name: e.IsFork,
                //    field: "IsFork",
                //    code: "isfork",
                //    type: "checkbox"
                //}, {
                //    name: e.MergeViaSetState,
                //    field: "MergeViaSetState",
                //    code: "mergeviasetstate",
                //    type: "checkbox"
                //}, {
                //    name: e.DisableParentStateControl,
                //    field: "DisableParentStateControl",
                //    code: "disableparentstatecontrol",
                //    type: "checkbox"
                //}]
                //},
                {
                    name: "Work Order Attributes",
                    type: "table",
                    field: "Annotations",
                    keyproperty: "Name",
                    elements: [{
                        name: e.AnnotationName,
                        field: "Name",
                        type: "select",
                        datasource: ["Workorder Review Required",
                            "Workorder by Ingram",
                            "Type of pickup",
                            "Test or Recycle",
                            "Harevest",
                            "Imaging",
                            "De - install",

                            "Data Erasure",

                            "Shredding",

                            "Degaussing",

                            "Crushing / Punching",

                            "Pulverize",

                            "Drill",

                            "Site Survey"]
                    }, {
                        name: e.AnnotationValue,
                        field: "JsonValue",
                            type: "select",
                        datasource: ["True","False","Pickup","Delivery","Box Program"]
                    }]
                },
                {
                name: "Service Attributes",
                field: "Restrictions",
                code: "restrictions",
                type: "table",
                //datadefault: {
                //    Type: "Allow"
                //},
                elements: [{
                    name: "Name",
                    code: "resttype",
                    field: "Type",
                    type: "select",
                    datasource: ["workorder approval","Pickup Truck by"]
                }, {
                    name: "Operator",
                    code: "restactor",
                    field: "Actor.Name",
                    type: "select",
                    datasource: ["Equals","Greater Than","Less Than"]
                    },
                    {
                        name: "Value",
                        field: "JsonValue",
                        type: "select",
                        datasource: ["Approve","Reject","Ingram","Third Party"]
                    }
                        ]
                },
                //{
                //type: "group",
                //elements: [{
                //    name: e.AllowConcatenationType,
                //    field: "AllowConcatenationType",
                //    type: "select",
                //    datasource: ["And", "Or"]
                //}, {
                //    name: e.RestrictConcatenationType,
                //    field: "RestrictConcatenationType",
                //    type: "select",
                //    datasource: ["And", "Or"]
                //}]
                //},
                //{
                //    name: "Workorder Attributes",
                //    field: "Conditions",
                //    code: "condition",
                //    type: "select",
                //    elements: [
                //        {
                //            name: "Name",
                //            code: "conditiontype",
                //            type: "select",
                //            datasource: ["Workorder Review Required",
                //                "Workorder by Ingram",
                //                "Type of pickup",
                //                "Test or Recycle",
                //                "Harevest",
                //                "Imaging",
                //                "De - install",

                //                "Data Erasure",

                //                "Shredding",

                //                "Degaussing",

                //                "Crushing / Punching",

                //                "Pulverize",

                //                "Drill",

                //                "Site Survey"],
                //            width: "100%"
                //        },

                //        {
                //            name: "Value",
                //            code: "cond",
                //            type: "input",
                //            width: "100%"
                //        }
                //    ]

                //},

                //{
                //    name: e.Condition,
                //    field: "Conditions",
                //    code: "condition",
                //    type: "table",
                //    datadefault: {
                //        Type: "Always",
                //        ResultOnPreExecution: "Null"
                //    },
                //    elements: [{
                //        name: e.ConditionType,
                //        code: "conditiontype",
                //        field: "Type",
                //        type: "select",
                //        datasource: ["Workorder Review Required",
                //                "Workorder by Ingram",
                //                "Type of pickup",
                //                "Test or Recycle",
                //                "Harevest",
                //                "Imaging",
                //                "De - install",

                //                "Data Erasure",

                //                "Shredding",

                //                "Degaussing",

                //                "Crushing / Punching",

                //                "Pulverize",

                //                "Drill",

                //                "Site Survey"]
                //    }, {
                //        name: e.ConditionAction,
                //        code: "conditionaction",
                //        field: "Action.ActionName",
                //        type: "select",
                //       datasource: ["Equals","Greater than","Less than"],
                //        onchange: function (e) {
                //            var t = $(e),
                //                i = t.closest("tr").find("[name=conditionactionparameter]").closest("td"),
                //                n = i.children(),
                //                a = n[0].rebuild($(e).val(), n.find("input").val());
                //            n.remove(), i.append(a)
                //        }
                //    }, {
                //        name: e.ConditionActionParameter,
                //        code: "conditionactionparameter",
                //        field: "Action.ActionParameter",
                //        type: "input",
                //        },
                //    //    {
                //    //    name: e.ConditionInversion,
                //    //    code: "conditioninversion",
                //    //    field: "ConditionInversion",
                //    //    type: "checkbox"
                //    //}, {
                //    //    name: e.ResultOnPreExecution,
                //    //    code: "conditionresult",
                //    //    field: "ResultOnPreExecution",
                //    //    type: "select",
                //    //    datasource: ["True", "False"]
                //    //    }
                //    ],
                //    onrowadded: function (e) {
                //        var t = e.find("[name=conditiontype]"),
                //            i = e.find("[name=conditionaction]"),
                //            n = e.find("[name=conditionresult]"),
                //            a = e.find("[name=conditionactionparameter]").parent().parent(),
                //            o = e.find("[name=conditioninversion]").parent(),
                //            r = function () {
                //                "Action" === t[0].value ? (i.show(), n.show(), a.show(), o.show()) : (i.hide(), n.hide(), a.hide(), o.hide())
                //            };
                //        t.on("change", r), r()
                //    }
                //},


            //    {
            //    name: e.Condition,
            //    field: "Conditions",
            //    code: "condition",
            //    type: "table",
            //    datadefault: {
            //        Type: "Always",
            //        ResultOnPreExecution: "Null"
            //    },
            //    elements: [{
            //        name: e.ConditionType,
            //        code: "conditiontype",
            //        field: "Type",
            //        type: "select",
            //        datasource: ["Always", "Action", "Otherwise"]
            //    }, {
            //        name: e.ConditionAction,
            //        code: "conditionaction",
            //        field: "Action.ActionName",
            //        type: "select",
            //        datasource: t.graph.getConditionNames(),
            //        onchange: function (e) {
            //            var t = $(e),
            //                i = t.closest("tr").find("[name=conditionactionparameter]").closest("td"),
            //                n = i.children(),
            //                a = n[0].rebuild($(e).val(), n.find("input").val());
            //            n.remove(), i.append(a)
            //        }
            //    }, {
            //        name: e.ConditionActionParameter,
            //        code: "conditionactionparameter",
            //        field: "Action.ActionParameter",
            //        type: "jsonparameter",
            //        graph: t.graph,
            //        parametertype: "Condition",
            //        openautocompleteonclick: !0,
            //        datasource: function (e, i) {
            //            var n = $(this).closest("tr"),
            //                a = n.find("[name=conditionaction]")[0].value;
            //            i(t.graph.getAutoCompleteSuggestions("conditionparameter", a, e))
            //        }
            //    }, {
            //        name: e.ConditionInversion,
            //        code: "conditioninversion",
            //        field: "ConditionInversion",
            //        type: "checkbox"
            //    }, {
            //        name: e.ResultOnPreExecution,
            //        code: "conditionresult",
            //        field: "ResultOnPreExecution",
            //        type: "select",
            //        datasource: ["True", "False"]
            //    }],
            //    onrowadded: function (e) {
            //        var t = e.find("[name=conditiontype]"),
            //            i = e.find("[name=conditionaction]"),
            //            n = e.find("[name=conditionresult]"),
            //            a = e.find("[name=conditionactionparameter]").parent().parent(),
            //            o = e.find("[name=conditioninversion]").parent(),
            //            r = function () {
            //                "Action" === t[0].value ? (i.show(), n.show(), a.show(), o.show()) : (i.hide(), n.hide(), a.hide(), o.hide())
            //            };
            //        t.on("change", r), r()
            //    }
            //},
                //{
                //type: "group",
                //elements: [{
                //    name: e.ConditionsConcatenationType,
                //    field: "ConditionsConcatenationType",
                //    type: "select",
                //    datasource: ["And", "Or"]
                //}]
                //},
             ],
            renderFinalFunc: function (e, t) {
                var i = e.find("[name=restrictions]").parent(),
                    n = e.find("[name=triggertype]"),
                    a = e.find("[name=isfork]"),
                    o = e.find("[name=triggercommand]"),
                    r = e.find("[name=triggertimer]"),
                    s = e.find("[name=AllowConcatenationType]").parent().parent(),
                    l = e.find("[name=ConditionsConcatenationType]").parent().parent(),
                    d = e.find("[name=mergeviasetstate]").parent().parent(),
                    c = e.find("[name=disableparentstatecontrol]").parent().parent(),
                    h = function () {
                        var e = function (e) {
                            return e.prev()
                        },
                            //  a = n[0].value;
                            a = "Command";
                        "Command" == a ? (o.show(), e(o).show(), r.hide(), e(r).hide(), i.show()) : "Timer" == a ? (o.hide(), e(o).hide(), r.show(), e(r).show(), i.hide(), s.hide()) : (o.hide(), e(o).hide(), r.hide(), e(r).hide(), i.hide(), s.hide()), WorkflowDesignerCommon.modal(t.window, "refresh")
                    };
                n.on("change", h), h();
                var u = function () {
                   // a[0].checked ? (d.show(), c.show()) : (d.hide(), c.hide())
                    false ? (d.show(), c.show()) : (d.hide(), c.hide())
                };
                a.on("change", u), u();
                //var m = s.find("[name=AllowConcatenationType]")[0].value.toLowerCase(),
                //    g = s.find("[name=RestrictConcatenationType]")[0].value.toLowerCase(),
                //    f = l.find("[name=ConditionsConcatenationType]")[0].value.toLowerCase();
                //"and" === m && "and" === g && s.hide();
                //var p = e.find("[name=restrictions]").parent(),
                //    v = $('<a class="btnConcatParameters"></a>');
                //v[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters, v.on("click", function () {
                //    s.is(":visible") ? (s.hide(), v[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters) : (s.show(), v[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.HideConcatParameters), WorkflowDesignerCommon.modal(t.window, "refresh")
                //}), p.append("&nbsp;"), p.append(v), "and" === f && l.hide();
                //var y = e.find("[name=condition]").parent(),
                //    w = $('<a class="btnConcatParameters"></a>');
                //w[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters, w.on("click", function () {
                //    l.is(":visible") ? (l.hide(), w[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters) : (l.show(), w[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.HideConcatParameters), WorkflowDesignerCommon.modal(t.window, "refresh")
                //}), y.append("&nbsp;"), y.append(w), WorkflowDesignerCommon.modal(t.window, "refresh")
            },
            graph: t.graph,
            saveFunc: function (e) {
                t.item.Name = e.Name, t.item.From = {
                    Name: e.From.Name
                }, t.item.InlinedFinalActivityName = e.InlinedFinalActivityName, t.item.To = {
                    Name: e.To.Name
                }, t.item.Classifier = e.Classifier, t.item.Restrictions = e.Restrictions, t.item.Trigger = e.Trigger, t.item.Conditions = e.Conditions, t.item.IsFork = e.IsFork, t.item.MergeViaSetState = e.MergeViaSetState, t.item.DisableParentStateControl = e.DisableParentStateControl, t.item.ConditionsConcatenationType = e.ConditionsConcatenationType, t.item.AllowConcatenationType = e.AllowConcatenationType, t.item.RestrictConcatenationType = e.RestrictConcatenationType, t.item.Annotations = e.Annotations, WorkflowDesignerCommon.DataCorrection(t.graph.data), t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
            }
        };
        if (void 0 !== this.graph.Settings.forms && void 0 !== this.graph.Settings.forms.transition) this.graph.Settings.forms.transition(n);
        else {


               var  a = new WorkflowDesignerForm(n);
                var o = function (e, i) {
                    var n = !0;
                    n &= e.CheckRequired([i], ["Name"], WorkflowDesignerConstants.FieldIsRequired), n &= e.CheckRequired([i], ["Classifier"], WorkflowDesignerConstants.FieldIsRequired);
                    return t.graph.data.Transitions.forEach(function (a) {
                        a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                    })
                        , e.CheckRequired(i.Restrictions, ["Type", "Actor.Name"], WorkflowDesignerConstants.FieldIsRequired)||
                        //||
                        //(n = !1), e.CheckRequired(i.PreExecutionImplementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired) ||
                        //(n = !1), e.CheckRequired(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) ||
                        //(n = !1), e.CheckUnique(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)
                        //||
                        //(n = !1), i.Annotations.forEach(function (a) {
                        //a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                        //}
                        //)
                         (n = !1), n;
                },
                  r = function (e) {
                    return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0);
                };
                    //r = function (t) {
                    //    return !!o(e, t) && (e.ClearTempField(t), e.parameters.saveFunc(t), !0)
                    //};
            a.ClearTempField(e);
            a.showModal(r);
           // a.showModal(e)




            //var a = new WorkflowDesignerForm(n),
            //    o = function (e, i) {

            //        var n = !0;
            //        n &= e.CheckRequired([i], ["Name"], WorkflowDesignerConstants.FieldIsRequired), n &= e.CheckRequired([i], ["Classifier"], WorkflowDesignerConstants.FieldIsRequired);
            //        var a = ["Type"];
            //        //"Command" == i.Trigger.Type ? a.push("Command.Name") : "Timer" == i.Trigger.Type && a.push("Timer.Name"),
            //        //    n &= e.CheckRequired([i.Trigger], a, WorkflowDesignerConstants.FieldIsRequired),
            //        //    i.Conditions.forEach(function (t) {
            //        //    a = ["Type"], "Action" == t.Type && a.push("Action.ActionName"),
            //        //        n &= e.CheckRequired([t], a, WorkflowDesignerConstants.FieldIsRequired),
            //        //        "Always" == t.Type && i.Conditions.length > 1 ? (n = !1, e.ControlAddError(t.control_Type, WorkflowDesignerConstants.AlwaysConditionShouldBeSingle)) : "Otherwise" == t.Type && i.Conditions.length > 1 && (n = !1, e.ControlAddError(t.control_Type, WorkflowDesignerConstants.OtherwiseConditionShouldBeSingle))
            //        //});
            //      //  var o = i.control_Conditions.parent().children("h4");

            //        // changed for demo
            //        var value = false;

            //            //  (o.attr("title", void 0), o.css("color", "")),
            //        return  t.graph.data.Transitions.forEach(function (a) {
            //                a !== t.item && a.Name === i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
            //            }), e.CheckRequired(i.Restrictions, ["Type", "Actor.Name"], WorkflowDesignerConstants.FieldIsRequired) ||
            //            //  (n = !1), e.CheckRequired(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) ||
            //            //  (n = !1), e.CheckUnique(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique) ||
            //            (n = !1), n;
            //    },
            //    r = function (e) {
            //        return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0);
            //    };
            //a.showModal(r)
        }
    }, this.Sync = function () {
        this.group || (t.item.DesignerSettings.Bending = t.bending, void 0 != t.middle && (t.item.DesignerSettings.X = t.middle.x, t.item.DesignerSettings.Y = t.middle.y))
    }, this.destroy = function () {
        this.control.destroy(), this.activePoint.destroy(), this.touchpoints.forEach(function (e) {
            e.destroy()
        }), void 0 != this.bar && this.bar.destroy()
    }
}

function WorkflowDesignerTransitionManagerTempControl(e) {
    this.x = e.x, this.y = e.y, this.manager = e.manager, this.control = void 0, this.Draw = function (e, t) {
        this.control = new Konva.Group({
            x: 0,
            y: 0,
            rotation: 0
        }), this.line = new Konva.Line({
            points: [this.x, this.y, e, t],
            stroke: "#FFCC99",
            strrokeWidth: 1
        });
        var i = Math.atan2(t - this.y, e - this.x);
        this.arrow = WorkflowDesignerCommon.createArrowByAngle(e, t, i, 20, "#FFCC99"), this.control.add(this.line), this.control.add(this.arrow), this.manager.Layer.add(this.control)
    }, this.Redraw = function (e) {
        this.line.setPoints([this.x, this.y, e.x, e.y]);
        var t = Math.atan2(e.y - this.y, e.x - this.x);
        WorkflowDesignerCommon.updateArrowByAngle(this.arrow, e.x, e.y, t, 20, "#FFCC99")
    }, this.Delete = function () {
        this.control.destroy()
    }
}

function WorkflowDesignerActivityManager() {
    this.type = "WorkflowDesignerActivityManager", this.init = function (e) {
        this.graph = e, this.Layer = new Konva.Layer, this.graph.Stage.add(this.Layer), this.Layer.setZIndex(1)
    }, this.ItemControls = new Array, this.draw = function () {
        null != this.ItemControls && this.ItemControls.forEach(function (e) {
            e.destroy()
        }), this.ItemControls = new Array;
        var e = this;
        void 0 != this.graph.data.Activities && this.graph.data.Activities.forEach(function (t) {
            var i, n, a = void 0;
            if (e.graph.Settings.group != t.DesignerSettings.Group) {
                if (void 0 != t.DesignerSettings.InlineElementSettings && t.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group) {
                    if ("" != t.DesignerSettings.InlineElementSettings.X && "" != t.DesignerSettings.InlineElementSettings.Y) i = Number(t.DesignerSettings.InlineElementSettings.X), n = Number(t.DesignerSettings.InlineElementSettings.Y);
                    else {
                        var o = e.GetDefaultPosition();
                        i = o.x, n = o.y
                    }
                    a = new WorkflowDesignerActivityControl({
                        x: i,
                        y: n,
                        item: t,
                        graph: e.graph,
                        manager: e,
                        group: !0
                    })
                }
            } else {
                if ("" != t.DesignerSettings.X && "" != t.DesignerSettings.Y) i = Number(t.DesignerSettings.X), n = Number(t.DesignerSettings.Y);
                else {
                    var o = e.GetDefaultPosition();
                    i = o.x, n = o.y
                }
                var a = new WorkflowDesignerActivityControl({
                    x: i,
                    y: n,
                    item: t,
                    graph: e.graph,
                    manager: e
                })
            }
            void 0 != a && (e.ItemControls.push(a), a.Draw(), a.Sync())
        }), this.Layer.batchDraw()
    }, this.CreateNewActivity = function (e, t) {
        void 0 == e && (e = this.GetDefaultPosition()), void 0 == t && (t = {
            IsAutoSchemeUpdate: !0,
            IsForSetState: !0
        }), void 0 == t.Name && (t.Name = this.GetDefaultName()), 0 == this.graph.data.Activities.length && (t.IsInitial = !0), t.DesignerSettings && (t.DesignerSettings = new {
            X: e.x,
            Y: e.y
        });
        var i = new WorkflowDesignerActivityControl({
            x: e.x,
            y: e.y,
            item: t,
            graph: this.graph,
            manager: this
        });
        return this.graph.data.Activities.push(t), this.ItemControls.push(i), i.Draw(), i.Sync(), i
    }, this.CreateNewInline = function (e, t) {
        void 0 == e && (e = this.GetDefaultPosition()), void 0 == t && (t = {
            IsAutoSchemeUpdate: !1,
            IsForSetState: !1,
            ActivityType: "Inline"
        }), void 0 == t.Name && (t.Name = this.GetDefaultName()), 0 == this.graph.data.Activities.length && (t.IsInitial = !0), t.DesignerSettings && (t.DesignerSettings = new {
            X: e.x,
            Y: e.y
        });
        var i = new WorkflowDesignerActivityControl({
            x: e.x,
            y: e.y,
            item: t,
            graph: this.graph,
            manager: this
        });
        return this.graph.data.Activities.push(t), this.ItemControls.push(i), i.Draw(), i.Sync(), i
    }, this.GetDefaultName = function () {
        for (var e = WorkflowDesignerConstants.ActivityNamePrefix, t = 1, i = 0; i < this.graph.data.Activities.length; i++) {
            this.graph.data.Activities[i].Name == e + t && (t++ , i = -1)
        }
        return e + t
    }, this.GetDefaultPosition = function () {
        for (var e = this.graph.CorrectPossition({
            x: 60,
            y: 100
        }, this.Layer), t = 2 * this.graph.Settings.DefaultMoveStep / this.Layer.getScaleX(), i = 0; i < this.ItemControls.length; i++) {
            var n = this.ItemControls[i].control.getPosition();
            n.x == e.x && n.y == e.y && (e.x += t, e.y += t, i = -1)
        }
        return e
    }, this.find = function (e) {
        if ("object" == typeof e && void 0 != e.Name) return this.find(e.Name);
        for (var t = 0; t < this.ItemControls.length; t++)
            if (this.ItemControls[t].item.Name === e) return this.ItemControls[t]
    }, this.findGroup = function (e, t) {
        for (var i = 0; i < this.graph.data.Activities.length; i++) {
            var n = this.graph.data.Activities[i];
            if (n.DesignerSettings.Group == e && void 0 != n.DesignerSettings.InlineElementSettings && n.DesignerSettings.InlineElementSettings.Group == t) return this.find(n.Name)
        }
    }, this.getIntersectingActivity = function (e) {
        for (var t = 0; t < this.ItemControls.length; t++) {
            var i = this.ItemControls[t];
            if (i.getIntersectingActivity(e)) return i
        }
    }, this.LayerSetOffset = function (e) {
        this.Layer.setOffset(e)
    }, this.LayerScale = function (e) {
        var t = (e.scale, e.delta);
        this.Layer.setScale({
            x: this.Layer.getScale().x + t,
            y: this.Layer.getScale().y + t
        })
    }, this.LayerScaleNorm = function (e) {
        this.Layer.setScale({
            x: 1,
            y: 1
        }), this.Layer.setOffset({
            x: 0,
            y: 0
        })
    }, this.redrawTransitions = function () {
        return void 0 == this.cTransition && (this.cTransition = this.graph.GetComponentByType("WorkflowDesignerTransitionManager")), this.cTransition.batchDraw()
    }, this.batchDraw = function () {
        this.Layer.batchDraw()
    }, this.SelectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Select()
        })
    }, this.DeselectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Deselect()
        })
    }, this.GetSizeForSaveAsImage = function (e) {
        for (var t = 0; t < this.ItemControls.length; t++) {
            var i = this.ItemControls[t],
                n = i.rectangle.getAbsolutePosition(),
                a = n.x,
                o = n.y,
                r = a + i.rectangle.getWidth() * this.Layer.getScaleX(),
                s = o + i.rectangle.getHeight() * this.Layer.getScaleX();
            a < e.x1 && (e.x1 = a), o < e.y1 && (e.y1 = o), r > e.x2 && (e.x2 = r), s > e.y2 && (e.y2 = s)
        }
        return e
    }, this.GetSelected = function () {
        var e = new Array;
        return this.ItemControls.forEach(function (t) {
            t.selected && e.push(t)
        }), e
    }, this.SelectByPosition = function (e) {
        this.ItemControls.forEach(function (t) {
            t.getIntersectingActivityRect(e) && t.Select()
        })
    }, this.SelectByItem = function (e) {
        this.ItemControls.forEach(function (t) {
            t.item == e && t.Select()
        })
    }, this.ObjectMove = function (e) {
        this.ItemControls.forEach(function (t) {
            t.selected && e.sender != t && t.ObjectMove(e.changepos)
        }), this.redrawTransitions()
    }, this.createTransitionAndActivity = function (e) {
        var t = {
            x: e.control.getX() + e.rectangle.attrs.width + 100,
            y: e.control.getY()
        },
            i = this.CreateNewActivity(t);
        this.graph.GetComponentByType("WorkflowDesignerTransitionManager").CreateNewTransition(e, i), this.graph.redrawAll()
    }, this.createTransition = function (e) {
        return this.graph.GetComponentByType("WorkflowDesignerTransitionManager").CreateNewTransition(e)
    }, this.Clone = function (e) {
        var t = JSON.parse(JSON.stringify(e.item));
        t.DesignerSettings.Y += 160, t.Name = this.CopySelectedGenUniqueValue(t.Name, this.graph.data.Activities, "Name"), this.graph.data.Activities.push(t), this.graph.Draw(this.graph.data), this.SelectByItem(t)
    }, this.CopySelectedGenUniqueValue = function (e, t, i) {
        for (var n = e, a = 1; !0; a++) {
            for (var o = !1, r = 0; r < t.length; r++)
                if (t[r][i] == n) {
                    o = !0;
                    break
                }
            if (!o) break;
            n = e + "_" + a
        }
        return n
    }
}

function WorkflowDesignerBackground() {
    this.type = "WorkflowDesignerBackground", this.init = function (e) {
        var t = this;
        this.graph = e, this.BackgroundLayer = new Konva.Layer, this.graph.Stage.add(this.BackgroundLayer), this.BackgroundLayer.setZIndex(0), this.SelectionLayer = new Konva.Layer, this.graph.Stage.add(this.SelectionLayer), this.SelectionLayer.setZIndex(1), WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.grid.png", function (e) {
            t.RectBG.setFillPatternImage(e), t.BackgroundLayer.batchDraw()
        }), this.RectBG = new Konva.Rect({
            x: 0,
            y: 0,
            width: 5e3,
            height: 5e3,
            draggable: !1,
            dragBoundFunc: function (e) {
                var i = t.graph.Settings.DefaultMoveStep * t.BackgroundLayer.getScaleX(),
                    n = t.graph.Settings.DefaultMoveStep * t.BackgroundLayer.getScaleY(),
                    a = {
                        x: Math.round(e.x / i) * i,
                        y: Math.round(e.y / n) * n
                    },
                    o = t.BackgroundLayer.getScaleX(),
                    r = t.BackgroundLayer.getScaleY(),
                    s = t.graph.Stage.width() / o,
                    l = t.graph.Stage.height() / r;
                return t.RectBG.width() + e.x / o - s < 0 && t.RectBG.width(t.RectBG.width() + s), t.RectBG.height() + e.y / r - l < 0 && t.RectBG.height(t.RectBG.height() + l), t.graph.GraphLayerSetOffset(-a.x / o, -a.y / r), a
            },
            designerparam: "background"
        }), this.BackgroundLayer.add(this.RectBG), this.BackgroundLayer.batchDraw(), this.graph.Stage.on("mousedown.background", function (e) {
            "background" === e.target.attrs.designerparam && (1 != t._movemodeenabled ? t._mousedownpos = t.graph.CorrectPossition({
                x: e.evt.offsetX,
                y: e.evt.offsetY
            }, t.SelectionLayer) : t.graph.DeselectAll())
        }), this.graph.Stage.on("mousemove.background", function (e) {
            if (1 != t._movemodeenabled && void 0 != t._mousedownpos) {
                var i = t.graph.CorrectPossition({
                    x: e.evt.offsetX,
                    y: e.evt.offsetY
                }, t.SelectionLayer);
                t.DrawSelectionRect(i)
            }
        }), this.graph.Stage.on("mouseup.background", function (e) {
            if (!t._movemodeenabled && void 0 != t._mousedownpos) {
                var i = t.getSelectionRectPos();
                void 0 == i ? e.evt.ctrlKey || t.graph.DeselectAll() : (Math.abs(i.xl - i.xr) > 10 || Math.abs(i.yl - i.yr) > 10) && (t.graph.DeselectAll(), t.graph.ComponentsExecute("SelectByPosition", i), t.graph.onSelectionChanged())
            }
            t._mousedownpos = void 0, t.DeleteSelectionRect()
        })
    }, this.setMoveModeEnabled = function (e) {
        this._movemodeenabled = Boolean(e), this.RectBG.setDraggable(this._movemodeenabled), this.graph.setParam("movemodeenabled", this._movemodeenabled)
    }, this.updatePosition = function (e) {
        var t = this.RectBG.getPosition(),
            i = {
                x: -t.x - e.x,
                y: -t.y - e.y
            };
        this.RectBG.setPosition({
            x: -i.x,
            y: -i.y
        }), this.graph.ComponentsExecute("LayerSetOffset", {
            x: i.x,
            y: i.y
        })
    }, this.setPosition = function (e) {
        this.RectBG.setPosition({
            x: -e.x,
            y: -e.y
        }), this.graph.ComponentsExecute("LayerSetOffset", {
            x: e.x,
            y: e.y
        })
    }, this.LayerScale = function (e) {
        var t = (e.scale, e.delta);
        this.BackgroundLayer.setScale({
            x: this.BackgroundLayer.getScale().x + t,
            y: this.BackgroundLayer.getScale().y + t
        })
    }, this.LayerScaleNorm = function () {
        this.BackgroundLayer.setScale({
            x: 1,
            y: 1
        }), this.SelectionLayer.setScale({
            x: 1,
            y: 1
        }), this.RectBG.setPosition({
            x: 0,
            y: 0
        })
    }, this.DrawSelectionRect = function (e) {
        void 0 == this.RectSelection ? (this.RectSelection = new Konva.Rect({
            x: this._mousedownpos.x,
            y: this._mousedownpos.y,
            width: e.x - this._mousedownpos.x,
            height: e.y - this._mousedownpos.y,
            draggable: !1,
            fill: "#66CCFF",
            opacity: .2
        }), this.SelectionLayer.add(this.RectSelection)) : (this.RectSelection.setWidth(e.x - this._mousedownpos.x), this.RectSelection.setHeight(e.y - this._mousedownpos.y)), this.SelectionLayer.batchDraw()
    }, this.DeleteSelectionRect = function (e) {
        this.RectSelection && (this.RectSelection.destroy(), this.RectSelection = void 0, this.SelectionLayer.batchDraw())
    }, this.getSelectionRectPos = function () {
        if (void 0 != this.RectSelection) {
            var e = this.RectSelection.getAbsolutePosition(),
                t = e.x,
                i = e.y,
                n = t + this.RectSelection.getWidth() * this.SelectionLayer.getScaleX(),
                a = i + this.RectSelection.getHeight() * this.SelectionLayer.getScaleX();
            return {
                xl: Math.min(t, n),
                yl: Math.min(i, a),
                xr: Math.max(t, n),
                yr: Math.max(i, a)
            }
        }
    }
}

function WorkflowDesignerTooltip(e, t, i, n, a, o) {
    var r = function (e, t) {
        if (0 == t.getScaleX() || 0 == t.getScaleY()) return {
            x: t.getOffsetX(),
            y: 0
        };
        var i = void 0 == a ? 0 : a;
        return {
            x: e.x / t.getScaleX() + t.getOffsetX() + i,
            y: e.y / t.getScaleY() + t.getOffsetY()
        }
    };
    t.on("mouseover", function () {
        if (void 0 != t.ToolTip) {
            var a = r(t.getAbsolutePosition(), e);
            t.ToolTip.position({
                x: a.x + t.getWidth() / 2,
                y: a.y + n,
                opacity: 1
            }), t.ToolTip.show()
        } else {
            var a = r(t.getAbsolutePosition(), e),
                s = new Konva.Label({
                    x: a.x + t.getWidth() / 2,
                    y: a.y + n,
                    opacity: 1
                });
            s.add(new Konva.Tag({
                fill: "#3D4D59",
                pointerDirection: void 0 == o ? "up" : o,
                pointerWidth: 13,
                pointerHeight: 7,
                lineJoin: "round",
                shadowColor: "#3D4D59",
                shadowBlur: 10,
                shadowOffset: 10,
                shadowOpacity: 0,
                cornerRadius: 5
            })), s.add(new Konva.Text({
                text: i,
                fontFamily: "Arial",
                fontSize: 12,
                padding: 5,
                fill: "white"
            })), e.add(s), t.ToolTip = s
        }
        e.batchDraw()
    }), t.on("mouseleave", function () {
        void 0 != t.ToolTip && (t.ToolTip.hide(), e.batchDraw())
    })
}

function WorkflowDesignerBar(e, t, i, n) {
    var a = "v" === n,
        o = new Konva.Group({
            x: i.x,
            y: i.y
        }),
        r = new Konva.Rect({
            x: 0,
            y: 0,
            width: a ? 30 : 30 * t.length,
            height: a ? 30 * t.length : 30,
            fill: WorkflowDesignerConstants.BarColor,
            cornerRadius: 5
        });
    o.add(r);
    var s = 0;
    return t.forEach(function (t) {
        if (t.offset = s, t.separator) {
            s += 10;
            var i = a ? [5, t.offset + 5, 25, t.offset + 5] : [t.offset + 5, 5, t.offset + 5, 25];
            t.cObject = new Konva.Line({
                points: i,
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            }), o.add(t.cObject)
        } else s += 30, WorkflowDesignerCommon.loadImage(t.img, function (i) {
            if (!e.destroyed) {
                var n = a ? {
                    x: 5,
                    y: t.offset + 5
                } : {
                        x: 5 + t.offset,
                        y: 5
                    };
                t.offset, t.offset, t.group = new Konva.Group({
                    x: n.x - 5,
                    y: n.y - 5,
                    width: 30,
                    height: 30
                }), t.bg = new Konva.Rect({
                    x: 0,
                    y: 0,
                    width: 30,
                    height: 30,
                    cornerRadius: 5
                }), 1 == t.active && t.bg.setFill(WorkflowDesignerConstants.ButtonActive), t.group.add(t.bg), t.cImageToolbar = new Konva.Image({
                    x: 5,
                    y: 5,
                    image: i,
                    width: 20,
                    height: 20,
                    strokeWidth: 0
                }), t.group.add(t.cImageToolbar);
                var r = function () {
                    void 0 != t.cImageToolbar.ToolTip && t.cImageToolbar.ToolTip.hide(), void 0 != t.click && t.click()
                };
                t.group.on("click", r), t.group.on("touchend", r), t.group.on("mouseover", function () {
                    t.bg.setFill(WorkflowDesignerConstants.ButtonActive), e.batchDraw()
                }), t.group.on("mouseleave", function () {
                    void 0 != t.active && 0 != t.active || (t.bg.setFill(""), e.batchDraw())
                }), t.group.add(t.cImageToolbar), o.add(t.group), void 0 != t.title && "" != t.title && WorkflowDesignerTooltip(e, t.cImageToolbar, t.title, 30), e.batchDraw()
            }
        })
    }), 1 == a ? r.setHeight(s) : r.setWidth(s), o
}

function WorkflowDesignerToolbar() {
    this.type = "WorkflowDesignerToolbar", this.graph = void 0;
    var e = this;
    this.init = function (t) {
        this.graph = t, this.Layer = new Konva.Layer, this.graph.Stage.add(this.Layer), this.Layer.setZIndex(10), this.InitItems(), this.MainToolbarDraw(20, 20), this.SideToolbarDraw(e.graph.Settings.graphwidth - 70, 90), this.graph.Settings.hideInfoBlock || this.CreateInfoBlock();
        var i = this.GetWorkflowDesignerBackground();
        void 0 != i && i.RectBG.setDraggable(!1), this.graph.getParam("movemodeenabled") && e.ToolbarMovePress(), this.graph.getParam("exinfo") && e.ToolbarExInfoPress()
    }, this.MainToolbarDraw = function (e, t) {
        var i = 0;
        for (var n in this.Items) Array.isArray(this.Items[n]) && this.Items[n].length > 0 && (i = this.ToolbarDraw(this.Items[n], e + i, t), i += 10)
    }, this.SideToolbarDraw = function (t, i) {
        var n = this.SideItems,
            a = new Konva.Group({
                x: t,
                y: i
            }),
            o = new Konva.Rect({
                x: 0,
                y: 0,
                width: 50,
                fill: "#FFFFFF",
                shadowEnabled: !0,
                shadowBlur: 10,
                shadowOpacity: .3,
                cornerRadius: 4
            });
        a.add(o);
        var r = 0;
        n.forEach(function (t) {
            t.offset = r, 1 == t.separator ? (r += 1, t.cObject = new Konva.Line({
                points: [10, t.offset + 3, 40, t.offset + 3],
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            }), a.add(t.cObject)) : (r += 45, e.loadImageHandler(void 0, {
                item: t,
                x: 0,
                y: t.offset,
                container: a,
                tooltipX: 25,
                tooltipY: -25,
                direction: "right"
            }), WorkflowDesignerCommon.loadImage(t.img, function (e, t) {
                t.container.image(e), this.Layer.destroyed || this.Layer.batchDraw()
            }.bind(e), {
                    container: t.cImageToolbar
                }))
        }), a.add(new Konva.Line({
            points: [10, r + 3, 40, r + 3],
            stroke: WorkflowDesignerConstants.BarSeparatorColor,
            strokeWidth: 2
        })), this.scaleText = new Konva.Text({
            text: "100%",
            fontFamily: "Arial",
            fontStyle: "Bold",
            fontSize: 12,
            padding: 5,
            fill: "black",
            x: 4,
            y: r + 16,
            align: "center",
            width: 41
        }), a.add(this.scaleText), r += 40, o.height(r + 5), this.Layer.add(a), this.SideToolbar = a
    }, this.ToolbarDraw = function (t, i, n) {
        var a = new Konva.Group({
            x: i,
            y: n
        }),
            o = new Konva.Rect({
                x: 0,
                y: 0,
                height: 50,
                fill: "#FFFFFF",
                shadowEnabled: !0,
                shadowBlur: 10,
                shadowOpacity: .3,
                cornerRadius: 4
            });
        a.add(o);
        var r = 0;
        return t.forEach(function (t) {
            t.offset = r, 1 == t.separator ? (r += 1, t.cObject = new Konva.Line({
                points: [t.offset + 3, 10, t.offset + 3, 40],
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            }), a.add(t.cObject)) : (r += 45, e.loadImageHandler(void 0, {
                item: t,
                x: t.offset,
                y: 0,
                container: a
            }), WorkflowDesignerCommon.loadImage(t.img, function (e, t) {
                t.container.image(e), this.Layer.destroyed || this.Layer.batchDraw()
            }.bind(e), {
                    container: t.cImageToolbar
                }))
        }), o.width(r + 5), this.Layer.add(a), i + r
    }, this.loadImageHandler = function (t, i) {
        var n = i.item;
        n.group = new Konva.Group({
            x: i.x,
            y: i.y,
            width: 40,
            height: 40
        }), n.bg = new Konva.Rect({
            x: 5,
            y: 5,
            width: 40,
            height: 40,
            cornerRadius: 4
        }), n.group.add(n.bg), 1 == n.active && n.bg.setFill(WorkflowDesignerConstants.ButtonActive), n.cImageToolbar = new Konva.Image({
            x: 15,
            y: 15,
            image: t,
            width: 20,
            height: 20,
            strokeWidth: 0
        }), 1 == n.disabled && n.cImageToolbar.opacity(.3), n.group.add(n.cImageToolbar), n.group.on("click", function () {
            n.disabled !== !0 && void 0 != n.click && n.click(n)
        }), n.group.on("touchend", function () {
            n.disabled !== !0 && void 0 != n.click && n.click(n)
        }), n.group.on("mouseover", function () {
            1 != n.disabled && (n.bg.setFill(WorkflowDesignerConstants.ButtonActive), e.Layer.batchDraw())
        }), n.group.on("mouseleave", function () {
            void 0 != n.active && 0 != n.active || (n.bg.setFill(""), e.Layer.batchDraw())
        }), i.container.add(n.group), WorkflowDesignerTooltip(this.Layer, n.group, n.title, void 0 == i.tooltipX ? 55 : i.tooltipX, void 0 == i.tooltipY ? 5 : i.tooltipY, i.direction), this.Layer.batchDraw()
    }, this.draw = function () {
        this.GraphRedrawAll()
    }, this.GraphRedrawAll = function () {
        this.UpdateInfoBlock(), this.Layer.batchDraw()
    }, this.changeSize = function (e, t) {
        void 0 != this.info && this.info.position({
            x: e - 320,
            y: t - 70
        }), void 0 != this.SideToolbar && this.SideToolbar.position({
            x: e - 70,
            y: 90
        })
    }, this.CreateInfoBlock = function () {
        var e = this.graph.Settings.imagefolder,
            t = e + "wfe.add.png",
            i = e + "wfe.transitons2.png",
            n = e + "wfe.commands.png",
            a = {
                x: 0,
                y: 0
            };
        this.info = new Konva.Group(a);
        var o = new Konva.Rect({
            x: 0,
            y: 0,
            height: 50,
            width: 300,
            fill: "#FFFFFF",
            shadowEnabled: !0,
            shadowBlur: 10,
            shadowOpacity: .3,
            cornerRadius: 4
        });
        this.info.add(o);
        var r = 5;
        this.infoText1 = new Konva.Text({
            fontFamily: "Arial",
            fontStyle: "Bold",
            fontSize: 12,
            padding: 5,
            fill: "black",
            x: r,
            y: 16,
            align: "center",
            width: 60
        }), this.info.add(this.infoText1), r += this.infoText1.width() + 5, WorkflowDesignerCommon.loadImage(t, function (e, t) {
            t.container.add(new Konva.Image({
                x: t.x,
                y: t.y,
                image: e,
                width: 20,
                height: 20,
                strokeWidth: 0
            }))
        }, {
                container: this.info,
                x: r,
                y: 15
            }), r += 30, this.info.add(new Konva.Line({
                points: [r, 10, r, 40],
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            })), r += 5, this.infoText2 = new Konva.Text({
                fontFamily: "Arial",
                fontStyle: "Bold",
                fontSize: 12,
                padding: 5,
                fill: "black",
                x: r,
                y: 16,
                align: "center",
                width: 60
            }), this.info.add(this.infoText2), r += this.infoText2.width() + 5, WorkflowDesignerCommon.loadImage(i, function (e, t) {
                t.container.add(new Konva.Image({
                    x: t.x,
                    y: t.y,
                    image: e,
                    width: 20,
                    height: 20,
                    strokeWidth: 0
                }))
            }, {
                    container: this.info,
                    x: r,
                    y: 15
                }), r += 30, this.info.add(new Konva.Line({
                    points: [r, 10, r, 40],
                    stroke: WorkflowDesignerConstants.BarSeparatorColor,
                    strokeWidth: 2
                })), r += 5, this.infoText3 = new Konva.Text({
                    fontFamily: "Arial",
                    fontStyle: "Bold",
                    fontSize: 12,
                    padding: 5,
                    fill: "black",
                    x: r,
                    y: 16,
                    align: "center",
                    width: 60
                }), this.info.add(this.infoText3), r += this.infoText3.width() + 5, WorkflowDesignerCommon.loadImage(n, function (e, t) {
                    t.container.add(new Konva.Image({
                        x: t.x,
                        y: t.y,
                        image: e,
                        width: 20,
                        height: 20,
                        strokeWidth: 0
                    }))
                }, {
                        container: this.info,
                        x: r,
                        y: 15
                    }), r += 30, o.width(r), this.UpdateInfoBlock(), a = {
                        x: this.graph.Settings.graphwidth - 320,
                        y: this.graph.Settings.graphheight - 70
                    }, this.info.position(a), this.Layer.add(this.info)
    }, this.UpdateInfoBlock = function () {
        var e = this.GetInfoBlockTextValue();
        if (void 0 != this.infoText1) {
            var t = String(e.activity),
                i = "black";
            void 0 != e.activityLimit && (t += "/" + e.activityLimit, e.activityLimit < e.activity && (i = "#C0392B")), this.infoText1.setText(t), this.infoText1.setFill(i)
        }
        if (void 0 != this.infoText2) {
            var n = String(e.transition),
                i = "black";
            void 0 != e.transitionLimit && (n += "/" + e.transitionLimit, e.transitionLimit < e.transition && (i = "#C0392B")), this.infoText2.setText(n), this.infoText2.setFill(i)
        }
        if (void 0 != this.infoText3) {
            var a = String(e.command),
                i = "black";
            void 0 != e.commandLimit && (a += "/" + e.commandLimit, e.commandLimit < e.command && (i = "#C0392B")), this.infoText3.setText(a), this.infoText3.setFill(i)
        }
    }, this.GetInfoBlockTextValue = function () {
        var e = {
            activity: 0,
            transition: 0,
            command: 0,
            activityLimit: void 0,
            transitionLimit: void 0,
            commandLimit: void 0
        };
        if (void 0 != this.graph.data && (e.activity = this.graph.data.Activities.length, e.transition = this.graph.data.Transitions.length, e.command = this.graph.data.Commands.length, void 0 != this.graph.data.AdditionalParams)) {
            var t = this.graph.data.AdditionalParams;
            void 0 != t.MaxNumberOfActivities && t.MaxNumberOfActivities != -1 && (e.activityLimit = t.MaxNumberOfActivities), void 0 != t.MaxNumberOfTransitions && t.MaxNumberOfTransitions != -1 && (e.transitionLimit = t.MaxNumberOfTransitions), void 0 != t.MaxNumberOfCommands && t.MaxNumberOfCommands != -1 && (e.commandLimit = t.MaxNumberOfCommands)
        }
        return e
    }, this.ToolbarMovePress = function () {
        var e = this.GetWorkflowDesignerBackground();
        e.setMoveModeEnabled(!e._movemodeenabled);
        var t = this.GetItemByCode("move");
        e._movemodeenabled ? (t.active = !0, void 0 != t.bg && t.bg.setFill(WorkflowDesignerConstants.ButtonActive)) : (t.active = void 0, void 0 != t.bg && t.bg.setFill("")), this.Layer.batchDraw()
    }, this.ToolbarExInfoPress = function () {
        var e = this.GetItemByCode("exinfo");
        this.exinfo ? (e.active = void 0, void 0 != e.bg && e.bg.setFill(""), this.exinfo = !1, this.graph.setParam("exinfo", !1)) : (e.active = !0, void 0 != e.bg && e.bg.setFill(WorkflowDesignerConstants.ButtonActive), this.exinfo = !0, this.graph.setParam("exinfo", !0)), void 0 != this.graph.Draw && this.graph.Draw(this.graph.data)
    }, this.ToolbarInlinePress = function () {
        this.graph.data.CanBeInlined ? this.graph.setInlinedFlag(!1) : this.graph.setInlinedFlag(!0)
    }, this.onChangeScheme = function () {
        var t = this.GetItemByCode("inline");
        if (void 0 != t && void 0 != t.cImageToolbar) {
            var i = this.graph.data.CanBeInlined ? t.img2 : t.img;
            WorkflowDesignerCommon.loadImage(i, function (e, t) {
                t.container.image(e), this.Layer.destroyed || this.Layer.batchDraw()
            }.bind(e), {
                    container: t.cImageToolbar
                })
        }
    }, this.GetWorkflowDesignerBackground = function () {
        return this.graph.GetComponentByType("WorkflowDesignerBackground")
    }, this.CreateActivity = function () {
        this.graph.GetComponentByType("WorkflowDesignerActivityManager").CreateNewActivity(), this.graph.redrawAll(), this.graph.StoreGraphData()
    }, this.CreateInline = function () {
        this.graph.GetComponentByType("WorkflowDesignerActivityManager").CreateNewInline(), this.graph.redrawAll(), this.graph.StoreGraphData()
    }, this.AutoArrangement = function () {
        if (0 != e.graph.data.Activities.length) {
            var t = new Array,
                i = new Array;
            if (e.graph.data.Activities.forEach(function (n) {
                (void 0 == n.DesignerSettings || n.DesignerSettings.Group == e.graph.Settings.group || void 0 != n.DesignerSettings.InlineElementSettings && n.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group) && (t.push(n), n.IsInitial && i.push(n))
            }), 0 != t.length) {
                t.forEach(function (t) {
                    if (!t.IsInitial) {
                        for (var n = !0, a = 0; a < e.graph.data.Transitions.length; a++) {
                            var o = e.graph.data.Transitions[a];
                            if ("Direct" == o.Classifier && o.To == t) {
                                n = !1;
                                break
                            }
                        }
                        n && i.push(t)
                    }
                }), 0 == i.length && i.push(t[0]);
                var n = {
                    x: 80,
                    y: 120
                },
                    a = {
                        x: 300,
                        y: 140
                    },
                    o = Array(),
                    r = function (t, i, n) {
                        var s = {
                            x: i.x,
                            y: i.y
                        };
                        n || (s.x += a.x);
                        for (var l = new Array, d = 0; d < t.length; d++) {
                            var c = t[d];
                            void 0 == c.DesignerSettings && (c.DesignerSettings = {}), !n && $.inArray(c, o) >= 0 || (c.DesignerSettings.Group == e.graph.Settings.group ? c.DesignerSettings.X = s.x : void 0 != c.DesignerSettings.InlineElementSettings && c.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group && (c.DesignerSettings.InlineElementSettings.X = s.x), o.push(c), l.push(c))
                        }
                        for (var d = 0; d < l.length; d++) {
                            var c = l[d];
                            d > 0 && (s.y += a.y);
                            var h = new Array;
                            e.graph.data.Transitions.forEach(function (e) {
                                "Direct" == e.Classifier && e.From == c && h.push(e.To)
                            }), c.DesignerSettings.Group == e.graph.Settings.group ? c.DesignerSettings.Y = s.y : void 0 != c.DesignerSettings.InlineElementSettings && c.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group && (c.DesignerSettings.InlineElementSettings.Y = s.y);
                            var u = r(h, {
                                x: s.x,
                                y: s.y
                            });
                            s.y = u.y
                        }
                        return {
                            x: s.x,
                            y: s.y
                        }
                    };
                r(i, n, !0), e.graph.data.Transitions.forEach(function (t) {
                    void 0 == t.DesignerSettings && (t.DesignerSettings = {}), void 0 != t.From.DesignerSettings && void 0 != t.To.DesignerSettings && t.From.DesignerSettings.Group != e.graph.Settings.group && t.To.DesignerSettings.Group != e.graph.Settings.group || (t.DesignerSettings.X = void 0, t.DesignerSettings.Y = void 0)
                }), e.graph.Draw(e.graph.data), this.graph.StoreGraphData()
            }
        }
    }, this.CopySelectedGenUniqueValue = function (e, t, i) {
        for (var n = e, a = 1; !0; a++) {
            for (var o = !1, r = 0; r < t.length; r++)
                if (t[r][i] == n) {
                    o = !0;
                    break
                }
            if (!o) break;
            n = e + "_" + a
        }
        return n
    }, this.CopySelected = function () {
        var t = this.graph.GetComponentByType("WorkflowDesignerActivityManager"),
            i = this.graph.GetComponentByType("WorkflowDesignerTransitionManager"),
            n = t.GetSelected(),
            a = i.GetSelected();
        if (0 != n.length || 0 != a.length) {
            var o = [];
            n.forEach(function (t) {
                if (!t.group) {
                    var i = JSON.parse(JSON.stringify(t.item));
                    i.DesignerSettings.Y += 160, i.Name = e.CopySelectedGenUniqueValue(i.Name, e.graph.data.Activities, "Name"), o.push({
                        oldItem: t.item,
                        newItem: i
                    }), e.graph.data.Activities.push(i)
                }
            });
            var r = [];
            a.forEach(function (t) {
                for (var i = t.item.From, n = t.item.To, a = 0; a < o.length; a++) i == o[a].oldItem && (i = o[a].newItem), n == o[a].oldItem && (n = o[a].newItem);
                var s = JSON.parse(JSON.stringify(t.item));
                s.Name = e.CopySelectedGenUniqueValue(s.Name, e.graph.data.Transitions, "Name"), s.From = i, s.To = n, r.push({
                    oldItem: t.item,
                    newItem: s
                }), e.graph.data.Transitions.push(s)
            }), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), o.forEach(function (e) {
                t.SelectByItem(e.newItem)
            }), r.forEach(function (e) {
                i.SelectByItem(e.newItem)
            }), this.graph.StoreGraphData(), this.graph.onSelectionChanged(!0)
        }
    }, this.EditLocalization = function () {
        var e = this,
            t = WorkflowDesignerConstants.LocalizationFormLabel,
            i = {
                type: "table",
                title: t.Title,
                width: "800px",
                data: this.graph.data.Localization,
                datadefault: {
                    Culture: WorkflowDesignerConstants.DefaultCulture,
                    Type: "State"
                },
                elements: [{
                    name: t.ObjectName,
                    field: "ObjectName",
                    type: "input"
                }, {
                    name: t.Type,
                    field: "Type",
                    type: "select",
                    displayfield: "Name",
                    valuefield: "Value",
                    datasource: [{
                        Name: t.Types[0],
                        Value: "Command"
                    }, {
                        Name: t.Types[1],
                        Value: "State"
                    }, {
                        Name: t.Types[2],
                        Value: "Parameter"
                    }]
                }, {
                    name: t.IsDefault,
                    field: "IsDefault",
                    type: "checkbox"
                }, {
                    name: t.Culture,
                    field: "Culture",
                    type: "input"
                }, {
                    name: t.Value,
                    field: "Value",
                    type: "input"
                }],
                readonly: this.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Localization, t, i), e.graph.StoreGraphData()
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.localization) return void this.graph.Settings.forms.localization(i);
        var n = new WorkflowDesignerForm(i),
            a = function (e, t) {
                return !(!n.CheckRequired(e, ["ObjectName", "Type", "Culture", "Value"], WorkflowDesignerConstants.FieldIsRequired) || !n.CheckUnique(e, ["ObjectName", "Type", "Culture"], WorkflowDesignerConstants.FieldMustBeUnique)) && (n.ClearTempField(e), n.parameters.saveFunc(e), !0)
            };
        n.showModal(a)
    }, this.EditParameters = function () {
        var e = WorkflowDesignerConstants.ParameterFormLabel,
            t = this,
            i = function (e, i, n) {
                for (var a = void 0, o = e.getEditData(e.parameters), r = 0; r < o.length; r++) {
                    var s = o[r];
                    if (s.control_InitialValue.id === i.id) {
                        a = s.Type;
                        break
                    }
                }
                void 0 != a && t.graph.designer.getemptytype(encodeURIComponent(a), n)
            },
            n = {
                type: "table",
                title: e.Title,
                data: this.graph.data.Parameters,
                datadefault: {
                    Purpose: "Persistence"
                },
                keyproperty: "Name",
                elements: [{
                    name: e.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: e.Type,
                    field: "Type",
                    type: "input",
                    datasource: this.graph.getTypeNames(),
                    width: "35%"
                }, {
                    name: e.Purpose,
                    field: "Purpose",
                    type: "select",
                    displayfield: "Name",
                    datasource: [{
                        Name: "Temporary"
                    }, {
                        Name: "Persistence"
                    }, {
                        Name: "System"
                    }]
                }, {
                    name: e.InitialValue,
                    field: "InitialValue",
                    type: "json",
                    width: "25%",
                    getemptytype: i
                }],
                top: $('<div style="float: right; margin-bottom: 15px;"></div>'),
                beforerowadded: function (e) {
                    void 0 != e.Type && (e.Type = decodeURIComponent(e.Type))
                },
                onrowadded: function (e) {
                    var t = e.find("[name=Purpose]"),
                        i = t[0];
                    t.change(function () {
                        r(e)
                    }), void 0 != i && "System" !== i.value && e.find('[name=Purpose] option[value="System"]').remove(), r(e)
                },
                graph: t.graph,
                readonly: this.graph.Settings.readonly,
                saveFunc: function (e) {
                    t.SyncTable(t.graph.data.Parameters, e, n);
                    for (var i = 0; i < t.graph.data.Parameters.length; i++) {
                        var a = t.graph.data.Parameters[i].Type;
                        t.graph.data.Parameters[i].Type = encodeURIComponent(a)
                    }
                    t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
                },
                cancelFunc: function (e) {
                    for (var i = 0; i < t.graph.data.Parameters.length; i++) {
                        var n = t.graph.data.Parameters[i].Type;
                        t.graph.data.Parameters[i].Type = encodeURIComponent(n)
                    }
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.parameters) return void this.graph.Settings.forms.parameters(n);
        var a = function () {
            for (var e = $(c.window.find(".WorkflowDesignerTable"))[0], t = 0; t < e.rows.length; t++) {
                var i = $(e.rows[t]),
                    n = i.find("[name=Purpose]")[0];
                void 0 != n && "System" === n.value && i.hide()
            }
        },
            o = function () {
                for (var e = $(c.window.find(".WorkflowDesignerTable"))[0], t = 0; t < e.rows.length; t++) {
                    var i = $(e.rows[t]),
                        n = i.find("[name=Purpose]")[0];
                    void 0 != n && "System" === n.value && i.show()
                }
            },
            r = function (e) {
                var t = e.find("[name=Purpose]")[0];
                void 0 != t && "System" === t.value ? (e.find(":input").attr("readonly", !0), e.find("[name=Purpose]").attr("disabled", !0), e.find("[name=InitialValue]").val(""), e.find(".btnDelete").remove()) : void 0 != t && "Temporary" === t.value ? (e.find("[name=InitialValue]").attr("readonly", !0), e.find("[name=InitialValue]").val("")) : void 0 != t && "Persistence" === t.value && e.find("[name=InitialValue]").attr("readonly", !1)
            },
            s = function () {
                for (var e = $(c.window.find(".WorkflowDesignerTable"))[0], t = 0; t < e.rows.length; t++) {
                    r($(e.rows[t]))
                }
            },
            l = function (e, t) {
                return !(!c.CheckRequired(e, ["Name", "Type", "Purpose", "Parameter"], WorkflowDesignerConstants.FieldIsRequired) || !c.CheckUnique(e, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (c.ClearTempField(e), c.parameters.saveFunc(e), !0)
            },
            d = function (e, t) {
                c.parameters.cancelFunc(e)
            },
            c = new WorkflowDesignerForm(n),
            h = $('<div class="ui slider checkbox"></div>'),
            u = $('<input type="checkbox" />');
        u.click(function (e, t) {
            u[0].checked ? o() : a(), WorkflowDesignerCommon.modal(c.window, "refresh")
        }), h.append(u), h.append("<label>" + WorkflowDesignerConstants.ParameterFormLabel.ShowSystemParameters + "</label>"), n.top.append(h), c.showModal(l, !1, d), a(), s(), WorkflowDesignerCommon.modal(c.window, "refresh")
    }, this.getGlobalCodeActionsForDelete = function (e, t) {
        var i = [];
        return e.forEach(function (n) {
            if (n.IsGlobal) {
                for (var a = !1, o = 0; o < e.length; o++)
                    if (n.Name == e[o].Name && n.IsGlobal != e[o].IsGlobal) {
                        a = !0;
                        break
                    }
                for (var r = !1, o = 0; o < t.length; o++)
                    if (1 == a) {
                        if (n.Name == t[o].Name && t[o].IsGlobal) {
                            r = !0;
                            break
                        }
                    } else if (n.Name == t[o].Name) {
                        r = !0;
                        break
                    }
                0 == r && i.push(n.Name)
            }
        }), i
    }, this.EditProcessInfo = function () {
        function e(e) {
            return $.extend({
                type: "table",
                elements: [{
                    name: o.ParametersNameLabel,
                    field: "Name",
                    type: "input"
                }, {
                    name: o.ParametersValueLabel,
                    field: "Value",
                    type: "json"
                }]
            }, e)
        }

        function t(e, t, i) {
            $.each(i, function (i, n) {
                "System" === n.Purpose ? e.push(n) : t.push(n)
            })
        }

        function i() {
            return r ? {
                type: "accordion",
                data: s.systemParameters,
                elements: [e({
                    name: o.SystemParametersTabName
                })]
            } : e({
                data: s.systemParameters,
                name: o.SystemParametersTabName
            })
        }

        function n() {
            return r ? {
                type: "accordion",
                name: o.ProcessParametersTabName,
                data: s.processParameters,
                tabKey: "ProcessParameters",
                elements: [e(null)]
            } : e({
                data: s.processParameters,
                name: o.ProcessParametersTabName,
                tabKey: "ProcessParameters"
            })
        }

        function a(e, t, i, n) {
            function a(e, t) {
                return $.extend({
                    type: "table",
                    elements: e
                }, t)
            }
            if (r) {
                var s = {};
                return s[o.RootProcess] = l.graph.data.AdditionalParams[e], $.each(l.graph.data.AdditionalParams.SubprocessInfo, function (t, i) {
                    s[t] = i[e]
                }), {
                        type: "accordion",
                        name: t,
                        data: s,
                        tabKey: i,
                        elements: [a(n, null)]
                    }
            }
            return a(n, {
                data: l.graph.data.AdditionalParams[e],
                name: t,
                tabKey: i
            })
        }
        var o = WorkflowDesignerConstants.ProcessInfoFormLabel,
            r = this.graph.data.AdditionalParams.SubprocessCurrentActivities.length,
            s = {
                systemParameters: {},
                processParameters: {}
            };
        r ? (s.systemParameters[o.RootProcess] = new Array, s.processParameters[o.RootProcess] = new Array, t(s.systemParameters[o.RootProcess], s.processParameters[o.RootProcess], this.graph.data.AdditionalParams.ProcessParameters), $.each(this.graph.data.AdditionalParams.SubprocessInfo, function (e, i) {
            s.systemParameters[e] = new Array, s.processParameters[e] = new Array, t(s.systemParameters[e], s.processParameters[e], i.ProcessParameters)
        })) : (s.systemParameters = new Array, s.processParameters = new Array, t(s.systemParameters, s.processParameters, this.graph.data.AdditionalParams.ProcessParameters));
        var l = this,
            d = {
                type: "tabs",
                title: o.Title,
                width: "95%",
                readonly: !0,
                graph: l.graph,
                elements: [{
                    name: o.SystemParametersTabName,
                    type: "form",
                    tabKey: "SystemParameters",
                    data: this.graph.data.AdditionalParams,
                    elements: [{
                        name: o.IsObsolete,
                        field: "IsObsolete",
                        type: "checkbox"
                    }, {
                        name: o.DefiningParameters,
                        field: "DefiningParameters",
                        type: "textarea"
                    }, i()]
                }, n(), a("ProcessHistory", o.HistoryTabName, "History", [{
                    name: o.HistoryTabFromLabel,
                    field: "FromActivityName",
                    type: "input"
                }, {
                    name: o.HistoryTabFromStateLabel,
                    field: "FromStateName",
                    type: "input"
                }, {
                    name: o.HistoryTabToLabel,
                    field: "ToActivityName",
                    type: "input"
                }, {
                    name: o.HistoryTabToStateLabel,
                    field: "ToStateName",
                    type: "input"
                }, {
                    name: o.HistoryTabExecutorIdLabel,
                    field: "ExecutorIdentityId",
                    type: "input"
                }, {
                    name: o.HistoryTabActorIdLabel,
                    field: "ActorIdentityId",
                    type: "input"
                }, {
                    name: o.HistoryTabTimeLabel,
                    field: "TransitionTime",
                    type: "input"
                }, {
                    name: o.HistoryTabTriggerNameLabel,
                    field: "TriggerName",
                    type: "input"
                }, {
                    name: o.HistoryTabTransitionClassifierNameLabel,
                    field: "TransitionClassifier",
                    type: "transitionclassifier"
                }]), a("ProcessTimers", o.TimersTabName, "Timers", [{
                    name: o.TimersTabNameLabel,
                    field: "Name",
                    type: "input"
                }, {
                    name: o.TimersTabValueLabel,
                    field: "NextExecutionDateTime",
                    type: "input"
                }])]
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.processinfo) return void this.graph.Settings.forms.processinfo(d);
        var c = new WorkflowDesignerForm(d),
            h = function (e, t) {
                return !0
            };
        c.showModal(h)
    }, this.Items = {
        First: [],
        Second: [],
        Third: []
    }, this.SideItems = [], this.InitItems = function () {
        var t = this.graph.Settings.imagefolder;
        this.graph.Settings.readonly || (this.Items.First.push({
            code: "undo",
            title: WorkflowDesignerConstants.ToolbarLabel.Undo,
            img: t + "wfe.undo.png",
            click: function () {
                e.graph.Undo()
            }
        }), this.Items.First.push({
            code: "redo",
            title: WorkflowDesignerConstants.ToolbarLabel.Redo,
            img: t + "wfe.redo.png",
            click: function () {
                e.graph.Redo()
            }
        }), this.Items.First.push({
            separator: !0
        }), this.Items.First.push({
            title: WorkflowDesignerConstants.ToolbarLabel.CreateActivity,
            img: t + "wfe.add.png",
            click: function () {
                e.CreateActivity()
            }
        }), this.Items.First.push({
            title: WorkflowDesignerConstants.ToolbarLabel.CreateInline,
            img: t + "wfe.inline.png",
            click: function () {
                e.CreateInline()
            }
        }), this.Items.First.push({
            code: "copy",
            disabled: !0,
            title: WorkflowDesignerConstants.ToolbarLabel.CopySelected,
            img: t + "wfe.copy.png",
            click: function () {
                e.CopySelected()
            }
        }), this.Items.First.push({
            code: "delete",
            disabled: !0,
            title: WorkflowDesignerConstants.ToolbarLabel.Delete,
            img: t + "wfe.remove.png",
            click: function () {
                e.graph.DeleteSelected()
            }
        })), this.graph.Settings.hideElementsToolbar || this.graph.Settings.notshowwindows || (this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Actors,
            img: t + "wfe.actors.png",
            click: function () {
                WorkflowDesignerWindows.EditActors(e)
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Commands,
            img: t + "wfe.commands.png",
            click: function () {
                WorkflowDesignerWindows.EditCommands(e)
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Timers,
            img: t + "wfe.timers.png",
            click: function () {
                WorkflowDesignerWindows.EditTimer(e)
            }
        }), this.graph.Settings.disableCodeActions !== !0 && this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.CodeActions,
            img: t + "wfe.codeactions.png",
            click: function () {
                WorkflowDesignerWindows.EditCodeActions(e)
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Parameters,
            img: t + "wfe.parameters.png",
            click: function () {
                e.EditParameters()
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Localization,
            img: t + "wfe.localization.png",
            click: function () {
                e.EditLocalization()
            }
        }), this.graph.designer && this.graph.designer.data && this.graph.designer.data.AdditionalParams && this.graph.designer.data.AdditionalParams.ProcessParameters && this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ProcessInfo,
            img: t + "wfe.context.png",
            click: function () {
                e.EditProcessInfo()
            }
        })), this.graph.Settings.readonly || this.Items.Second.push({
            code: "inline",
            title: WorkflowDesignerConstants.ToolbarLabel.Inline,
            img: t + "wfe.inline.off.png",
            img2: t + "wfe.inline.on.png",
            click: function () {
                e.ToolbarInlinePress()
            }
        }), void 0 != this.graph.Settings.apiurl && this.Items.Third.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Refresh,
            img: t + "wfe.refresh.png",
            click: function () {
                e.graph.Refresh()
            }
        }), this.graph.Settings.disableobjectmovements || this.Items.Third.push({
            title: WorkflowDesignerConstants.ToolbarLabel.AutoArrangement,
            img: t + "wfe.autoarrangment.png",
            click: function () {
                e.AutoArrangement()
            }
        }), this.Items.Third.length > 0 && this.Items.Third.push({
            separator: !0
        }), this.Items.Third.push({
            code: "exinfo",
            title: WorkflowDesignerConstants.ToolbarLabel.Info,
            img: t + "wfe.information.png",
            click: function () {
                e.ToolbarExInfoPress()
            }
        }), this.graph.Settings.hideLegend || this.Items.Third.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Legend,
            img: t + "wfe.help.png",
            click: function () {
                e.ShowLegend()
            }
        }), this.SideItems = [{
            code: "move",
            title: WorkflowDesignerConstants.ToolbarLabel.Move,
            img: t + "wfe.move.png",
            click: function () {
                e.ToolbarMovePress()
            }
        }, {
            separator: !0
        }], void 0 == this.graph.Settings.group && this.SideItems.push({
            code: "fullscreen",
            title: WorkflowDesignerConstants.ToolbarLabel.FullScreen,
            img: t + "wfe.fullscreen.png",
            click: function () {
                e.graph.onFullScreenClick()
            }
        }), this.SideItems.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ZoomPositionDefault,
            img: t + "wfe.defaultzoom.png",
            click: function () {
                e.graph.GraphLayerScaleNorm()
            }
        }), this.SideItems.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ZoomIn,
            img: t + "wfe.zoomin.png",
            click: function () {
                e.graph.GraphLayerScale(.1)
            }
        }), this.SideItems.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ZoomOut,
            img: t + "wfe.zoomout.png",
            click: function () {
                e.graph.GraphLayerScale(-.1)
            }
        }), e.graph.Stage.getContent().addEventListener("wheel", function (t) {
            var i = e.GetWorkflowDesignerBackground(),
                n = i.BackgroundLayer.scaleX(),
                a = {
                    x: t.offsetX / n - i.RectBG.x(),
                    y: t.offsetY / n - i.RectBG.y()
                },
                o = t.deltaY > 0 ? -.1 : .1,
                r = n + o,
                s = {
                    x: a.x - a.x / r,
                    y: a.y - a.y / r
                },
                l = {
                    x: ((1 - n) * t.offsetX / n - i.RectBG.x()) / r,
                    y: ((1 - n) * t.offsetY / n - i.RectBG.y()) / r
                };
            s.x += l.x, s.y += l.y, e.graph.GraphLayerScale(o, s)
        })
    }, this.LayerScaleNorm = function (e) {
        this.updateScaleText(e)
    }, this.LayerScale = function (e) {
        var t = e.scale,
            i = e.delta;
        this.updateScaleText(t + i)
    }, this.updateScaleText = function (t) {
        void 0 != e.graph._bg && this.scaleText.text(Math.floor(100 * t) + "%")
    }, this.GetItemByCode = function (e) {
        for (var t in this.Items)
            for (var i = 0; i < this.Items[t].length; i++) {
                var n = this.Items[t][i];
                if (n.code == e) return n
            }
        for (var i = 0; i < this.SideItems.length; i++) {
            var n = this.SideItems[i];
            if (n.code == e) return n
        }
    }, this.SyncTable = function (e, t, i) {
        if (void 0 == i.keyproperty) {
            e.splice(0, e.length);
            for (var n = 0; n < t.length; n++) {
                var a = {};
                i.elements.forEach(function (e) {
                    a[e.field] = t[n][e.field]
                }), e.push(a)
            }
        } else {
            for (var n = e.length - 1; n >= 0; n--) {
                var o = $.grep(t, function (t) {
                    return e[n][i.keyproperty] == t.keyproperty
                });
                0 == o.length ? e.splice(n, 1) : i.elements.forEach(function (t) {
                    e[n][t.field] = o[0][t.field]
                })
            }
            for (var n = 0; n < t.length; n++) {
                var o = $.grep(e, function (e) {
                    return t[n][i.keyproperty] == e[i.keyproperty]
                });
                if (0 == o.length) {
                    var a = {};
                    i.elements.forEach(function (e) {
                        a[e.field] = t[n][e.field]
                    }), e.push(a)
                }
            }
        }
    }, this.ShowLegend = function () {
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.legend) return void this.graph.Settings.forms.legend();
        var e = this.graph.Settings.imagefolder,
            t = $('<image src="' + e + 'wfe.legend.png" height="' + .7 * this.graph.Stage.getHeight() + '"/>'),
            i = $('<div class="ui modal"></div>').append($('<div class="content" style="text-align: center;"></div>').append(t));
        WorkflowDesignerCommon.modal(i, "show")
    }, this.setItemDisabled = function (e, t) {
        for (var i in this.Items)
            for (var n = 0; n < this.Items[i].length; n++) {
                var a = this.Items[i][n];
                if (a.code == e) {
                    a.disabled = t, void 0 != a.cImageToolbar && a.cImageToolbar.opacity(t ? .3 : 1);
                    break
                }
            }
        for (var n = 0; n < this.SideItems.length; n++)
            if (this.SideItems[n].code == e) {
                this.SideItems[n].disabled = t, void 0 != this.Items[n].cImageToolbar && this.Items[n].cImageToolbar.opacity(t ? .3 : 1);
                break
            }
    }, this.setItemActive = function (e, t) {
        for (var i in this.Items)
            for (var n = 0; n < this.Items[i].length; n++) {
                var a = this.Items[i][n];
                if (a.code == e) {
                    a.active = t, void 0 != a.bg && a.bg.setFill(t ? WorkflowDesignerConstants.ButtonActive : "");
                    break
                }
            }
        for (var n = 0; n < this.SideItems.length; n++)
            if (this.SideItems[n].code == e) {
                this.SideItems[n].active = t, void 0 != this.SideItems[n].bg && this.SideItems[n].bg.setFill(t ? WorkflowDesignerConstants.ButtonActive : "");
                break
            }
    }, this.destroy = function () {
        this.Layer.destroyed = !0, void 0 !== e && (void 0 !== e.Layer && null !== e.Layer && e.Layer.destroy(), e = void 0)
    }
}

function WorkflowDesignerKeyboard() {
    this.type = "WorkflowDesignerKeyboard", this.init = function (e) {
        this.graph = e, this.subscribe()
    }, this.destroy = function () {
        this.unsubscribe()
    }, this.subscribe = function () {
        var e = this.graph.container,
            t = document.getElementById(e);
        this.ev = !1;
        var i = this;
        t.onmouseover = function () {
            i.ev = !0
        }, t.onmouseout = function () {
            i.ev = !1
        }, this._keyProcessing = function (e) {
            i.keyProcessing(e)
        }, document.addEventListener("keydown", this._keyProcessing, !1)
    }, this.unsubscribe = function () {
        var e = this.graph.container,
            t = document.getElementById(e);
        void 0 != t && (t.onmouseover = void 0, t.onmouseout = void 0), document.removeEventListener("keydown", this._keyProcessing)
    }, this.keyProcessing = function (e) {
        if (this.ev !== !1) {
            const t = e.key;
            if ("Control" !== t) {
                var i = !1;
                return e.ctrlKey ? "a" == t ? this.graph.SelectAll() : "c" == t ? this.toolbarExec("CopySelected") : "e" != t || this.graph.Settings.readonly ? "i" == t ? this.toolbarExec("ToolbarExInfoPress") : "m" == t ? this.toolbarExec("ToolbarMovePress") : "y" != t || this.graph.Settings.readonly ? "z" != t || this.graph.Settings.readonly ? i = !0 : this.graph.Undo() : this.graph.Redo() : this.toolbarExec("CreateActivity") : e.altKey && "Enter" == t ? this.graph.onFullScreenClick() : "Delete" != t || this.graph.Settings.readonly ? "ArrowUp" == t ? this.objectsMove(0, -1) : "ArrowDown" == t ? this.objectsMove(0, 1) : "ArrowLeft" == t ? this.objectsMove(-1, 0) : "ArrowRight" == t ? this.objectsMove(1, 0) : i = !0 : this.graph.DeleteSelected(), 0 == i ? void e.preventDefault() : void 0
            }
        }
    }, this.objectsMove = function (e, t) {
        var i = this.graph.GetComponentByType("WorkflowDesignerActivityManager");
        if (void 0 != i) {
            var n = this.graph.Settings.DefaultMoveStep;
            0 == i.GetSelected().length ? this.graph.GraphUpdatePosition({
                x: e * n,
                y: t * n
            }) : (i.ObjectMove({
                changepos: {
                    x: e * n,
                    y: t * n
                }
            }), i.batchDraw())
        }
    }, this.toolbarExec = function (e) {
        var t = this.graph.GetComponentByType("WorkflowDesignerToolbar");
        void 0 != t && void 0 != t[e] && t[e]()
    }
}

function ParametersControl(e) {
    this.parentForm = e
}

function DefaultValueControl(e, t, i) {
    this.parentForm = e, this.prefix = i, this.parameter = t
}

function JsonControl(e, t, i) {
    this.parentForm = e, this.prefix = i, this.parameter = t
}

function InputControl(e) {
    this.parentForm = e
}

function CheckboxControl(e) {
    this.parentForm = e
}

function SelectControl(e) {
    this.parentForm = e
}
var WorkflowDesignerConstants = {
    ActivityColor: "#ECF0F1",
    ActivityTextColor: "#2D3436",
    ActivityInitialColor: "#27AE60",
    ActivityInitialTextColor: "#FFFFFF",
    ActivityFinalColor: "#2980B9",
    ActivityFinalTextColor: "#FFFFFF",
    ActivityShape: "#CECECE",
    SelectColor: "#F39C12",
    SelectTextColor: "#FFFFFF",
    SelectSubProcessColor: "#e3b015",
    SelectSubProcessTextColor: "#FFFFFF",
    ButtonActive: "#D4D8D9",
    BarColor: "#EDF1F2",
    BarSeparatorColor: "#D9DEE0",
    DeleteConfirm: "Are you sure you want to delete selected item(s)?",
    DeleteConfirmCurrent: "Are you sure you want to delete this item?",
    FieldIsRequired: "Field is required!",
    FieldMustBeUnique: "Field must be unique!",
    ButtonTextDelete: "Delete",
    ButtonTextCreate: "Add",
    ButtonTextSave: "Save",
    ButtonTextYes: "Yes",
    ButtonTextNo: "No",
    ButtonTextCancel: "Cancel",
    ButtonTextClose: "Close",
    ButtonTextUndo: "Undo",
    ButtonTextRedo: "Redo",
    SaveConfirm: "Save changes?",
    CloseWithoutSaving: "Close without saving?",
    TransitionAuto: "Condition",
    DialogConfirmText: "Question",
    None: "None",
    Warning: "Warning",
    InfoBlockLabel: {
        Activity: "Tasks: ",
        Transition: "Condition: ",
        Command: "Commands: "
    },
    ActivityNamePrefix: "Service_",
    ActivityFormLabel: {
        Title: "Service",
        TitleForInline: "Service Inline",
        Name: "Name",
        State: "Role",
        IsInitial: "Initial",
        IsFinal: "Final",
        IsForSetState: "For set process",
        IsAutoSchemeUpdate: "Auto scheme update",
        Implementation: "Create System Actions",
        PreExecutionImplementation: "PreExecution Implementation",
        ImpOrder: "Order",
        ImpAction: "Action",
        ImpActionParameter: "Action parameter",
        AlwaysConditionShouldBeSingle: "Always condition should be single",
        OtherwiseConditionShouldBeSingle: "Otherwise condition should be single",
        Annotations: "Annotations",
        AnnotationName: "Name",
        AnnotationValue: "Value",
        Scheme: "Inline scheme"
    },
    TransitionFormLabel: {
        Title: "Condition",
        Name: "Name",
        From: "From service",
        To: "To service",
        Classifier: "Classifier",
        Restrictions: "Authority",
        RestrictionsType: "Type",
        RestrictionsActor: "Role",
        Condition: "WorkOrder Attributes",
        ConditionType: "Name",
        ConditionAction: "Value",
        ResultOnPreExecution: "Result on PreExecution",
        Trigger: "Trigger",
        TriggerType: "Type",
        TriggerCommand: "Command",
        TriggerTimer: "Timer",
        ConditionActionParameter: "Action parameter",
        ConditionInversion: "Invert action result",
        ConditionsConcatenationType: "Conditions concatenation type",
        AllowConcatenationType: "Concat allow as",
        RestrictConcatenationType: "Concat restrict as",
        ConditionsListShouldNotBeEmpty: "Conditions list should not be empty",
        IsFork: "Is fork",
        MergeViaSetState: "Merge subprocess via set state",
        DisableParentStateControl: "Disable parent process control",
        ShowConcatParameters: "Show concatenation",
        HideConcatParameters: "Hide concatenation",
        Annotations: "Service Attributes",
        AnnotationName: "Name",
        AnnotationValue: "Value",
        InlinedFinalActivityName: "Inlined Final Activity Name"
    },
    LocalizationFormLabel: {
        Title: "Localization",
        ObjectName: "ObjectName",
        Type: "Type",
        IsDefault: "IsDefault",
        Culture: "Culture",
        Value: "Value",
        Types: ["Command", "State", "Parameter"]
    },
    TimerFormLabel: {
        Title: "Timers",
        Name: "Name",
        Type: "Type",
        Value: "Value",
        Types: ["Command", "State", "Parameter"],
        NotOverrideIfExists: "Do not override timer if exists"
    },
    ParameterFormLabel: {
        Title: "Parameters",
        Name: "Name",
        Type: "Type",
        Purpose: "Purpose",
        Value: "Value",
        InitialValue: "InitialValue",
        ShowSystemParameters: "Show system parameters"
    },
    ActorFormLabel: {
        Title: "Roles",
        Name: "Name",
        Rule: "Rule",
        Value: "Value"
    },
    CommandFormLabel: {
        Title: "Command",
        Name: "Name",
        InputParameters: "Input Parameters",
        InputParametersName: "Name",
        InputParametersIsRequired: "Required",
        InputParametersParameter: "Parameter",
        InputParametersDefaultValue: "Default"
    },
    ProcessInfoFormLabel: {
        Title: "Additional Parameters",
        IsObsolete: "IsObsolete",
        DefiningParameters: "Defining parameters",
        ProcessParameters: "Process parameters",
        SystemParametersTabName: "System Parameters",
        ProcessParametersTabName: "Process Parameters",
        HistoryTabName: "History",
        TimersTabName: "Timers",
        HistoryTabFromLabel: "From",
        HistoryTabFromStateLabel: "From State",
        HistoryTabToLabel: "To",
        HistoryTabToStateLabel: "To State",
        HistoryTabExecutorIdLabel: "Executor Id",
        HistoryTabActorIdLabel: "Actor Id",
        HistoryTabTimeLabel: "Time",
        HistoryTabTriggerNameLabel: "Trigger Name",
        HistoryTabTransitionClassifierNameLabel: "",
        ParametersNameLabel: "Name",
        ParametersValueLabel: "Value",
        TimersTabNameLabel: "Name",
        TimersTabValueLabel: "Value",
        RootProcess: "Root Process"
    },
    CodeActionsFormLabel: {
        Title: "Code actions",
        Name: "Name",
        ActionCode: "Action code",
        IsGlobal: "Is global",
        IsAsync: "Async",
        Type: "Type",
        GlobalDeleteMessage: "You've deleted the Global CodeAction.<br/><b>Other schemes won't be able to call this CodeAction!</b>",
        UnGlobalMessage: "You've changed the state of the global flag.<br/>There will be created a Local CodeAction based on this Global CodeAction after saving this scheme.",
        EditParameters: "Edit parameters",
        Parameters: "Parameters",
        Text: "Text",
        Number: "Number",
        Checkbox: "Checkbox",
        Dropdown: "Dropdown",
        DateTime: "Date/Time",
        Values: "Values",
        DropdownName: "Name",
        DropdownValue: "Value",
        DropdownShouldContainValues: "Dropdown should contain values",
        IsRequired: "Required",
        DefaultValue: "Default value",
        Json: "Json"
    },
    EditParametersFormlabel: {
        Title: "Edit parameter values",
        NumberRequired: "Should be a numeric value",
        DateShouldBeInISOFormat: "Date/Time parameter should be in ISO8601 format",
        SwitchToJson: "Switch to JSON editor",
        SwitchToConstructor: "Switch to parameter values editor",
        InvalidJson: "JSON object is invalid or does not match the model"
    },
    ToolbarLabel: {
        CreateActivity: "Create Service",
        CreateInline: "Create inline (template)",
        CopySelected: "Copy selected",
        Undo: "Undo",
        Redo: "Redo",
        Move: "Move",
        ZoomIn: "Zoom In",
        ZoomOut: "Zoom Out",
        ZoomPositionDefault: "Zoom default",
        FullScreen: "Full Screen",
        Refresh: "Refresh",
        AutoArrangement: "Auto arrangement",
        Actors: "Roles",
        Commands: "Commands",
        Parameters: "Parameters",
        Localization: "Localization",
        Timers: "Timers",
        AdditionalParameters: "Additional Parameters",
        CodeActions: "Code actions",
        Info: "Extended info",
        Delete: "Delete",
        Clone: "Clone",
        Settings: "Settings",
        CreateTransition: "Create a condition",
        CreateActivityTransition: "Create an Service and a condition",
        Legend: "Legend",
        ProcessInfo: "Process Info",
        Inline: "The scheme can be inlined"
    },
    ErrorActivityIsInitialCountText: "One element must be marked flag Initial",
    ErrorActivityIsFinalCountText: "This scheme is Inlined. One or more elements must be marked flag Final",
    ErrorReadOnlySaveText: "The Designer in ReadOnly mode, you can't save it.",
    ErrorInvalidObjectsSaveText: function (e) {
        return "Can't save the schema. Those objects are in invalid state: " + e
    },
    BrokenReferencesDialogText: "This schema contains references to Actions, Conditions or Rules that aren't defined by this schema or current action providers. Do you want to keep them?",
    FormMaxHeight: 700,
    EditCodeSettings: {
        Height: 600,
        Width: 1e3,
        CodeHeight: 390,
        MessageBoxHeight: 400,
        MessageBoxWidth: 600,
        SuccessBoxHeight: 150,
        SuccessBoxWidth: 300
    },
    EditCodeLabel: {
        Title: "Edit code",
        EditCodeButton: "Edit code",
        Usings: "Usings",
        Compile: "Compile",
        CompileSucceeded: "Compilation succeeded.",
        Success: "Success",
        Error: "Error",
        OK: "OK",
        ShowUsings: "Show usings",
        HideUsings: "Hide usings"
    },
    EditJSONSettings: {
        Height: 600,
        Width: 1e3,
        CodeHeight: 480
    },
    EditJSONLabel: {
        Title: "Edit value in JSON",
        CreateEmptyType: "Create",
        Format: "Format"
    },
    OverviewMap: {
        show: !0,
        width: 300,
        height: 150
    },
    UndoDepth: 200,
    DefaultCulture: "en-US"
},
    WorkflowDesignerCommon = {
        modal: function (e, t) {
            var i = void 0;
            void 0 != e.semanticmodal ? i = "semanticmodal" : void 0 != e.modal ? i = "modal" : console.error("SemanticUI is not defined!"), void 0 != i && (e[i](t), void 0 == t || void 0 == t.onApprove && void 0 == t.onDeny || void 0 != e.keyup && e.keyup(function (n) {
                if (13 === n.keyCode) {
                    if (null !== n.originalEvent && void 0 !== n.originalEvent && n.currentTarget !== n.originalEvent.target) return;
                    void 0 != t.onApprove && 0 != t.onApprove() && e[i]("hide")
                } else 27 === n.keyCode && (void 0 != t.onDeny ? 0 != t.onDeny() && e[i]("hide") : e[i]("hide"))
            }))
        },
        createArrowByAngle: function (e, t, i, n, a) {
            return void 0 == a && (a = "red"), new Konva.Wedge({
                x: e,
                y: t,
                radius: n,
                angle: 40,
                fill: a,
                rotation: 180 * i / Math.PI - 200
            })
        },
        updateArrowByAngle: function (e, t, i, n, a, o) {
            void 0 == o && (o = "red"), e.setPosition({
                x: t,
                y: i
            }), e.setRadius(a), e.setFill(o), e.setRotation(180 * n / Math.PI - 200)
        },
        createUUID: function () {
            for (var e = [], t = "0123456789abcdef", i = 0; i < 36; i++) e[i] = t.substr(Math.floor(16 * Math.random()), 1);
            return e[14] = "4", e[19] = t.substr(3 & e[19] | 8, 1), e[8] = e[13] = e[18] = e[23] = "-", e.join("")
        },
        DataCorrection: function (e) {
            void 0 == e.AdditionalParams && (e.AdditionalParams = {}), void 0 == e.AdditionalParams.Actions && (e.AdditionalParams.Actions = []), void 0 == e.AdditionalParams.Conditions && (e.AdditionalParams.Conditions = []), void 0 == e.AdditionalParams.Rules && (e.AdditionalParams.Rules = []);
            var t = function (e, t, i) {
                if (void 0 != e && void 0 != t) {
                    var n = $.grep(t, function (t) {
                        return e == t[i]
                    });
                    return n.length > 0 ? n[0] : void 0
                }
            };
            e.Transitions.forEach(function (i) {
                void 0 != i.From && (i.From = t(i.From.Name, e.Activities, "Name")), void 0 != i.To && (i.To = t(i.To.Name, e.Activities, "Name")), void 0 != i.Restrictions && i.Restrictions.forEach(function (i) {
                    i.Actor && (i.Actor = t(i.Actor.Name, e.Actors, "Name"))
                }), void 0 != i.Trigger && void 0 != i.Trigger.Command && (i.Trigger.Command = t(i.Trigger.Command.Name, e.Commands, "Name"), i.Trigger.Command || (i.Trigger.NameRef = null)), void 0 != i.Trigger && void 0 != i.Trigger.Timer && (i.Trigger.Timer = t(i.Trigger.Timer.Name, e.Timers, "Name"), i.Trigger.Timer || (i.Trigger.NameRef = null))
            }), e.Commands.forEach(function (i) {
                void 0 != i.InputParameters && i.InputParameters.forEach(function (i) {
                    i.Parameter = t(i.Parameter.Name, e.Parameters, "Name")
                })
            })
        },
        download: function (e, t, i) {
            if (e && t) {
                var n = new Array;
                t.forEach(function (e) {
                    var t = $('<input type="hidden"/>');
                    t.attr("name", e.name), t.attr("value", e.value), n.push(t)
                });
                var a = $('<form action="' + e + '" method="' + (i || "post") + '"></form>');
                a.append(n), a.appendTo("body").submit().remove()
            }
        },
        defineLocalStorage: function () {
            Object.defineProperty(window, "localStorage", new function () {
                var e = [],
                    t = {};
                Object.defineProperty(t, "getItem", {
                    value: function (e) {
                        return e ? this[e] : null
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "key", {
                    value: function (t) {
                        return e[t]
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "setItem", {
                    value: function (e, t) {
                        e && (document.cookie = escape(e) + "=" + escape(t) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/")
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "length", {
                    get: function () {
                        return e.length
                    },
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "removeItem", {
                    value: function (e) {
                        e && (document.cookie = escape(e) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/")
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "clear", {
                    value: function () {
                        if (e.length)
                            for (var t in e) document.cookie = escape(t) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/"
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), this.get = function () {
                    var i;
                    for (var n in t) i = e.indexOf(n), i === -1 ? t.setItem(n, t[n]) : e.splice(i, 1), delete t[n];
                    for (e; e.length > 0; e.splice(0, 1)) t.removeItem(e[0]);
                    for (var a, o, r = 0, s = document.cookie.split(/\s*;\s*/); r < s.length; r++) a = s[r].split(/\s*=\s*/), a.length > 1 && (t[o = unescape(a[0])] = unescape(a[1]), e.push(o));
                    return t
                }, this.configurable = !1, this.enumerable = !0
            })
        },
        imageCache: [],
        loadImage: function (e, t, i) {
            for (var n, a = 0; a < WorkflowDesignerCommon.imageCache.length; a++) {
                var o = WorkflowDesignerCommon.imageCache[a];
                if (o.src == e) {
                    n = o;
                    break
                }
            }
            return void 0 != n ? (void 0 != t && t(n, i), n) : (n = new Image, void 0 != t && (n.onload = function () {
                t(n, i)
            }), n.src = e, n)
        },
        getTextWidth: function (e, t) {
            var i = WorkflowDesignerCommon.TmpCanvas || (WorkflowDesignerCommon.TmpCanvas = document.createElement("canvas")),
                n = i.getContext("2d");
            return n.font = t, n.measureText(e).width
        },
        defineArrayIncludes: function () {
            Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", {
                value: function (e, t) {
                    function i(e, t) {
                        return e === t || "number" == typeof e && "number" == typeof t && isNaN(e) && isNaN(t)
                    }
                    if (null == this) throw new TypeError('"this" is null or not defined');
                    var n = Object(this),
                        a = n.length >>> 0;
                    if (0 === a) return !1;
                    for (var o = 0 | t, r = Math.max(o >= 0 ? o : a - Math.abs(o), 0); r < a;) {
                        if (i(n[r], e)) return !0;
                        r++
                    }
                    return !1
                }
            })
        }
    };
! function (e, t, i, n) {
    "use strict";
    t = void 0 !== t && t.Math == Math ? t : "undefined" != typeof self && self.Math == Math ? self : Function("return this")(), e.fn.modal = function (n) {
        var a, o = e(this),
            r = e(t),
            s = e(i),
            l = e("body"),
            d = o.selector || "",
            c = (new Date).getTime(),
            h = [],
            u = arguments[0],
            m = "string" == typeof u,
            g = [].slice.call(arguments, 1),
            f = t.requestAnimationFrame || t.mozRequestAnimationFrame || t.webkitRequestAnimationFrame || t.msRequestAnimationFrame || function (e) {
                setTimeout(e, 0)
            };
        return o.each(function () {
            var o, p, v, y, w, S, b, C, D, T = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.modal.settings, n) : e.extend({}, e.fn.modal.settings),
                k = T.selector,
                x = T.className,
                A = T.namespace,
                _ = T.error,
                I = "." + A,
                P = "module-" + A,
                N = e(this),
                W = e(T.context),
                F = N.find(k.close),
                M = this,
                L = N.data(P),
                O = !1;
            D = {
                initialize: function () {
                    D.verbose("Initializing dimmer", W), D.create.id(), D.create.dimmer(), D.refreshModals(), D.bind.events(), T.observeChanges && D.observeChanges(), D.instantiate()
                },
                instantiate: function () {
                    D.verbose("Storing instance of modal"), L = D, N.data(P, L)
                },
                create: {
                    dimmer: function () {
                        var t = {
                            debug: T.debug,
                            variation: !T.centered && "top aligned",
                            dimmerName: "modals"
                        },
                            i = e.extend(!0, t, T.dimmerSettings);
                        if (void 0 === e.fn.dimmer) return void D.error(_.dimmer);
                        D.debug("Creating dimmer"), y = W.dimmer(i), T.detachable ? (D.verbose("Modal is detachable, moving content into dimmer"), y.dimmer("add content", N)) : D.set.undetached(), w = y.dimmer("get dimmer")
                    },
                    id: function () {
                        b = (Math.random().toString(16) + "000000000").substr(2, 8), S = "." + b, D.verbose("Creating unique id for element", b)
                    }
                },
                destroy: function () {
                    D.verbose("Destroying previous modal"), N.removeData(P).off(I), r.off(S), w.off(S), F.off(I), W.dimmer("destroy")
                },
                observeChanges: function () {
                    "MutationObserver" in t && (C = new MutationObserver(function (e) {
                        D.debug("DOM tree modified, refreshing"), D.refresh()
                    }), C.observe(M, {
                        childList: !0,
                        subtree: !0
                    }), D.debug("Setting up mutation observer", C))
                },
                refresh: function () {
                    D.remove.scrolling(), D.cacheSizes(), D.can.useFlex() || D.set.modalOffset(), D.set.screenHeight(), D.set.type()
                },
                refreshModals: function () {
                    p = N.siblings(k.modal), o = p.add(N)
                },
                attachEvents: function (t, i) {
                    var n = e(t);
                    i = e.isFunction(D[i]) ? D[i] : D.toggle, n.length > 0 ? (D.debug("Attaching modal events to element", t, i), n.off(I).on("click" + I, i)) : D.error(_.notFound, t)
                },
                bind: {
                    events: function () {
                        D.verbose("Attaching events"), N.on("click" + I, k.close, D.event.close).on("click" + I, k.approve, D.event.approve).on("click" + I, k.deny, D.event.deny), r.on("resize" + S, D.event.resize)
                    },
                    scrollLock: function () {
                        y.get(0).addEventListener("touchmove", D.event.preventScroll, {
                            passive: !1
                        })
                    }
                },
                unbind: {
                    scrollLock: function () {
                        y.get(0).removeEventListener("touchmove", D.event.preventScroll, {
                            passive: !1
                        })
                    }
                },
                get: {
                    id: function () {
                        return (Math.random().toString(16) + "000000000").substr(2, 8)
                    }
                },
                event: {
                    approve: function () {
                        if (O || T.onApprove.call(M, e(this)) === !1) return void D.verbose("Approve callback returned false cancelling hide");
                        O = !0, D.hide(function () {
                            O = !1
                        })
                    },
                    preventScroll: function (e) {
                        e.preventDefault()
                    },
                    deny: function () {
                        if (O || T.onDeny.call(M, e(this)) === !1) return void D.verbose("Deny callback returned false cancelling hide");
                        O = !0, D.hide(function () {
                            O = !1
                        })
                    },
                    close: function () {
                        D.hide()
                    },
                    click: function (t) {
                        if (!T.closable) return void D.verbose("Dimmer clicked but closable setting is disabled");
                        var n = e(t.target),
                            a = n.closest(k.modal).length > 0,
                            o = e.contains(i.documentElement, t.target);
                        !a && o && D.is.active() && (D.debug("Dimmer clicked, hiding all modals"), D.remove.clickaway(), T.allowMultiple ? D.hide() : D.hideAll())
                    },
                    debounce: function (e, t) {
                        clearTimeout(D.timer), D.timer = setTimeout(e, t)
                    },
                    keyboard: function (e) {
                        27 == e.which && (T.closable ? (D.debug("Escape key pressed hiding modal"), D.hide()) : D.debug("Escape key pressed, but closable is set to false"), e.preventDefault())
                    },
                    resize: function () {
                        y.dimmer("is active") && (D.is.animating() || D.is.active()) && f(D.refresh)
                    }
                },
                toggle: function () {
                    D.is.active() || D.is.animating() ? D.hide() : D.show()
                },
                show: function (t) {
                    t = e.isFunction(t) ? t : function () { }, D.refreshModals(), D.set.dimmerSettings(), D.set.dimmerStyles(), D.showModal(t)
                },
                hide: function (t) {
                    t = e.isFunction(t) ? t : function () { }, D.refreshModals(), D.hideModal(t)
                },
                showModal: function (t) {
                    t = e.isFunction(t) ? t : function () { }, D.is.animating() || !D.is.active() ? (D.showDimmer(), D.cacheSizes(), D.can.useFlex() ? D.remove.legacy() : (D.set.legacy(), D.set.modalOffset(), D.debug("Using non-flex legacy modal positioning.")), D.set.screenHeight(), D.set.type(), D.set.clickaway(), !T.allowMultiple && D.others.active() ? D.hideOthers(D.showModal) : (T.allowMultiple && T.detachable && N.detach().appendTo(w), T.onShow.call(M), T.transition && void 0 !== e.fn.transition && N.transition("is supported") ? (D.debug("Showing modal with css animations"), N.transition({
                        debug: T.debug,
                        animation: T.transition + " in",
                        queue: T.queue,
                        duration: T.duration,
                        useFailSafe: !0,
                        onComplete: function () {
                            T.onVisible.apply(M), T.keyboardShortcuts && D.add.keyboardShortcuts(), D.save.focus(), D.set.active(), T.autofocus && D.set.autofocus(), t()
                        }
                    })) : D.error(_.noTransition))) : D.debug("Modal is already visible")
                },
                hideModal: function (t, i) {
                    if (t = e.isFunction(t) ? t : function () { }, D.debug("Hiding modal"), T.onHide.call(M, e(this)) === !1) return void D.verbose("Hide callback returned false cancelling hide");
                    (D.is.animating() || D.is.active()) && (T.transition && void 0 !== e.fn.transition && N.transition("is supported") ? (D.remove.active(), N.transition({
                        debug: T.debug,
                        animation: T.transition + " out",
                        queue: T.queue,
                        duration: T.duration,
                        useFailSafe: !0,
                        onStart: function () {
                            D.others.active() || i || D.hideDimmer(), T.keyboardShortcuts && D.remove.keyboardShortcuts()
                        },
                        onComplete: function () {
                            T.onHidden.call(M), D.remove.dimmerStyles(), D.restore.focus(), t()
                        }
                    })) : D.error(_.noTransition))
                },
                showDimmer: function () {
                    y.dimmer("is animating") || !y.dimmer("is active") ? (D.debug("Showing dimmer"), y.dimmer("show")) : D.debug("Dimmer already visible")
                },
                hideDimmer: function () {
                    if (!y.dimmer("is animating") && !y.dimmer("is active")) return void D.debug("Dimmer is not visible cannot hide");
                    D.unbind.scrollLock(), y.dimmer("hide", function () {
                        D.remove.clickaway(), D.remove.screenHeight()
                    })
                },
                hideAll: function (t) {
                    var i = o.filter("." + x.active + ", ." + x.animating);
                    t = e.isFunction(t) ? t : function () { }, i.length > 0 && (D.debug("Hiding all visible modals"), D.hideDimmer(), i.modal("hide modal", t))
                },
                hideOthers: function (t) {
                    var i = p.filter("." + x.active + ", ." + x.animating);
                    t = e.isFunction(t) ? t : function () { }, i.length > 0 && (D.debug("Hiding other modals", p), i.modal("hide modal", t, !0))
                },
                others: {
                    active: function () {
                        return p.filter("." + x.active).length > 0
                    },
                    animating: function () {
                        return p.filter("." + x.animating).length > 0
                    }
                },
                add: {
                    keyboardShortcuts: function () {
                        D.verbose("Adding keyboard shortcuts"), s.on("keyup" + I, D.event.keyboard)
                    }
                },
                save: {
                    focus: function () {
                        e(i.activeElement).closest(N).length > 0 || (v = e(i.activeElement).blur())
                    }
                },
                restore: {
                    focus: function () {
                        v && v.length > 0 && v.focus()
                    }
                },
                remove: {
                    active: function () {
                        N.removeClass(x.active)
                    },
                    legacy: function () {
                        N.removeClass(x.legacy)
                    },
                    clickaway: function () {
                        w.off("click" + S)
                    },
                    dimmerStyles: function () {
                        w.removeClass(x.inverted), y.removeClass(x.blurring)
                    },
                    bodyStyle: function () {
                        "" === l.attr("style") && (D.verbose("Removing style attribute"), l.removeAttr("style"))
                    },
                    screenHeight: function () {
                        D.debug("Removing page height"), l.css("height", "")
                    },
                    keyboardShortcuts: function () {
                        D.verbose("Removing keyboard shortcuts"), s.off("keyup" + I)
                    },
                    scrolling: function () {
                        y.removeClass(x.scrolling), N.removeClass(x.scrolling)
                    }
                },
                cacheSizes: function () {
                    N.addClass(x.loading);
                    var n = N.prop("scrollHeight"),
                        a = N.outerWidth(),
                        o = N.outerHeight();
                    void 0 !== D.cache && 0 === o || (D.cache = {
                        pageHeight: e(i).outerHeight(),
                        width: a,
                        height: o + T.offset,
                        scrollHeight: n + T.offset,
                        contextHeight: "body" == T.context ? e(t).height() : y.height()
                    }, D.cache.topOffset = -(D.cache.height / 2)), N.removeClass(x.loading), D.debug("Caching modal and container sizes", D.cache)
                },
                can: {
                    useFlex: function () {
                        return "auto" == T.useFlex ? T.detachable && !D.is.ie() : T.useFlex
                    },
                    fit: function () {
                        var e = D.cache.contextHeight,
                            t = D.cache.contextHeight / 2,
                            i = D.cache.topOffset,
                            n = D.cache.scrollHeight,
                            a = D.cache.height,
                            o = T.padding,
                            r = t + i;
                        return n > a ? r + n + o < e : a + 2 * o < e
                    }
                },
                is: {
                    active: function () {
                        return N.hasClass(x.active)
                    },
                    ie: function () {
                        var e = !t.ActiveXObject && "ActiveXObject" in t,
                            i = "ActiveXObject" in t;
                        return e || i
                    },
                    animating: function () {
                        return N.transition("is supported") ? N.transition("is animating") : N.is(":visible")
                    },
                    scrolling: function () {
                        return y.hasClass(x.scrolling)
                    },
                    modernBrowser: function () {
                        return !(t.ActiveXObject || "ActiveXObject" in t)
                    }
                },
                set: {
                    autofocus: function () {
                        var e = N.find("[tabindex], :input").filter(":visible"),
                            t = e.filter("[autofocus]"),
                            i = t.length > 0 ? t.first() : e.first();
                        i.length > 0 && i.focus()
                    },
                    clickaway: function () {
                        w.on("click" + S, D.event.click)
                    },
                    dimmerSettings: function () {
                        if (void 0 === e.fn.dimmer) return void D.error(_.dimmer);
                        var t = {
                            debug: T.debug,
                            dimmerName: "modals",
                            closable: "auto",
                            useFlex: D.can.useFlex(),
                            variation: !T.centered && "top aligned",
                            duration: {
                                show: T.duration,
                                hide: T.duration
                            }
                        },
                            i = e.extend(!0, t, T.dimmerSettings);
                        T.inverted && (i.variation = void 0 !== i.variation ? i.variation + " inverted" : "inverted"), W.dimmer("setting", i)
                    },
                    dimmerStyles: function () {
                        T.inverted ? w.addClass(x.inverted) : w.removeClass(x.inverted), T.blurring ? y.addClass(x.blurring) : y.removeClass(x.blurring)
                    },
                    modalOffset: function () {
                        var e = D.cache.width,
                            t = D.cache.height;
                        N.css({
                            marginTop: T.centered && D.can.fit() ? -(t / 2) : 0,
                            marginLeft: -(e / 2)
                        }), D.verbose("Setting modal offset for legacy mode")
                    },
                    screenHeight: function () {
                        D.can.fit() ? l.css("height", "") : (D.debug("Modal is taller than page content, resizing page height"), l.css("height", D.cache.height + 2 * T.padding))
                    },
                    active: function () {
                        N.addClass(x.active)
                    },
                    scrolling: function () {
                        y.addClass(x.scrolling), N.addClass(x.scrolling), D.unbind.scrollLock()
                    },
                    legacy: function () {
                        N.addClass(x.legacy)
                    },
                    type: function () {
                        D.can.fit() ? (D.verbose("Modal fits on screen"), D.others.active() || D.others.animating() || (D.remove.scrolling(), D.bind.scrollLock())) : (D.verbose("Modal cannot fit on screen setting to scrolling"), D.set.scrolling())
                    },
                    undetached: function () {
                        y.addClass(x.undetached)
                    }
                },
                setting: function (t, i) {
                    if (D.debug("Changing setting", t, i), e.isPlainObject(t)) e.extend(!0, T, t);
                    else {
                        if (void 0 === i) return T[t];
                        e.isPlainObject(T[t]) ? e.extend(!0, T[t], i) : T[t] = i
                    }
                },
                internal: function (t, i) {
                    if (e.isPlainObject(t)) e.extend(!0, D, t);
                    else {
                        if (void 0 === i) return D[t];
                        D[t] = i
                    }
                },
                debug: function () {
                    !T.silent && T.debug && (T.performance ? D.performance.log(arguments) : (D.debug = Function.prototype.bind.call(console.info, console, T.name + ":"), D.debug.apply(console, arguments)))
                },
                verbose: function () {
                    !T.silent && T.verbose && T.debug && (T.performance ? D.performance.log(arguments) : (D.verbose = Function.prototype.bind.call(console.info, console, T.name + ":"), D.verbose.apply(console, arguments)))
                },
                error: function () {
                    T.silent || (D.error = Function.prototype.bind.call(console.error, console, T.name + ":"), D.error.apply(console, arguments))
                },
                performance: {
                    log: function (e) {
                        var t, i, n;
                        T.performance && (t = (new Date).getTime(), n = c || t, i = t - n, c = t, h.push({
                            Name: e[0],
                            Arguments: [].slice.call(e, 1) || "",
                            Element: M,
                            "Execution Time": i
                        })), clearTimeout(D.performance.timer), D.performance.timer = setTimeout(D.performance.display, 500)
                    },
                    display: function () {
                        var t = T.name + ":",
                            i = 0;
                        c = !1, clearTimeout(D.performance.timer), e.each(h, function (e, t) {
                            i += t["Execution Time"]
                        }), t += " " + i + "ms", d && (t += " '" + d + "'"), (void 0 !== console.group || void 0 !== console.table) && h.length > 0 && (console.groupCollapsed(t), console.table ? console.table(h) : e.each(h, function (e, t) {
                            console.log(t.Name + ": " + t["Execution Time"] + "ms")
                        }), console.groupEnd()), h = []
                    }
                },
                invoke: function (t, i, n) {
                    var o, r, s, l = L;
                    return i = i || g, n = M || n, "string" == typeof t && void 0 !== l && (t = t.split(/[\. ]/), o = t.length - 1, e.each(t, function (i, n) {
                        var a = i != o ? n + t[i + 1].charAt(0).toUpperCase() + t[i + 1].slice(1) : t;
                        if (e.isPlainObject(l[a]) && i != o) l = l[a];
                        else {
                            if (void 0 !== l[a]) return r = l[a], !1;
                            if (!e.isPlainObject(l[n]) || i == o) return void 0 !== l[n] && (r = l[n], !1);
                            l = l[n]
                        }
                    })), e.isFunction(r) ? s = r.apply(n, i) : void 0 !== r && (s = r), e.isArray(a) ? a.push(s) : void 0 !== a ? a = [a, s] : void 0 !== s && (a = s), r
                }
            }, m ? (void 0 === L && D.initialize(), D.invoke(u)) : (void 0 !== L && L.invoke("destroy"), D.initialize())
        }), void 0 !== a ? a : this
    }, e.fn.modal.settings = {
        name: "Modal",
        namespace: "modal",
        useFlex: "auto",
        offset: 0,
        silent: !1,
        debug: !1,
        verbose: !1,
        performance: !0,
        observeChanges: !1,
        allowMultiple: !1,
        detachable: !0,
        closable: !0,
        autofocus: !0,
        inverted: !1,
        blurring: !1,
        centered: !0,
        dimmerSettings: {
            closable: !1,
            useCSS: !0
        },
        keyboardShortcuts: !0,
        context: "body",
        queue: !1,
        duration: 500,
        transition: "scale",
        padding: 50,
        onShow: function () { },
        onVisible: function () { },
        onHide: function () {
            return !0
        },
        onHidden: function () { },
        onApprove: function () {
            return !0
        },
        onDeny: function () {
            return !0
        },
        selector: {
            close: "> .close",
            approve: ".actions .positive, .actions .approve, .actions .ok",
            deny: ".actions .negative, .actions .deny, .actions .cancel",
            modal: ".ui.modal"
        },
        error: {
            dimmer: "UI Dimmer, a required component is not included in this page",
            method: "The method you called is not defined.",
            notFound: "The element you specified could not be found"
        },
        className: {
            active: "active",
            animating: "animating",
            blurring: "blurring",
            inverted: "inverted",
            legacy: "legacy",
            loading: "loading",
            scrolling: "scrolling",
            undetached: "undetached"
        }
    }
}(jQuery, window, document),
    function () {
        function e(e) {
            t(e);
            var i = e.parent().next().next().children(),
                n = e.val(),
                a = i[0].rebuild(n);
            i.remove(), e.parent().next().next().append(a)
        }

        function t(e) {
            var t = e.parent().next().next().next().children();
            "Dropdown" === e.val() ? t.show() : t.hide()
        }

        function i(e, t) {
            return n(e, t, !0), !0
        }

        function n(e, t, i) {
            var n = e.parent().parent(),
                a = n.parent().prev(),
                o = t.getEditData({
                    type: "table",
                    control: n,
                    elements: t.parameters.elements[4].elements
                });
            i && o.splice(e[0].rowIndex - 1, 1);
            var r = a.children(),
                s = r.val();
            if ("" === s) {
                var l = !1;
                $.each(r[0].options, function (e, t) {
                    return 0 === e || ("" === t.value ? (l = !0, !1) : void 0)
                }), l || (s = void 0)
            }
            var d = r[0].rebuild("Dropdown", s, o);
            r.remove(), a.append(d)
        }
        ParametersControl.prototype.generate = function (a, o, r) {
            var s = this,
                l = $('<button class="ui button basic">' + WorkflowDesignerConstants.CodeActionsFormLabel.EditParameters + "</button>");
            return l[0].id = s.parentForm.generateid(a.field, r), l[0].name = s.parentForm.getElementCode(a), l[0].parameters = o, l.on("click", function () {
                var o = WorkflowDesignerConstants.CodeActionsFormLabel,
                    r = {
                        type: "table",
                        title: o.EditParameters,
                        width: "800px",
                        data: l[0].parameters,
                        keyproperty: "Name",
                        onrowadded: function (e) {
                            t(e.find("[name=Type]"))
                        },
                        elements: [{
                            name: o.Name,
                            field: "Name",
                            type: "input"
                        }, {
                            name: o.Type,
                            field: "Type",
                            type: "select",
                            displayfield: "Name",
                            valuefield: "Value",
                            onchange: e,
                            datasource: [{
                                Name: o.Text,
                                Value: "Text"
                            }, {
                                Name: o.Number,
                                Value: "Number"
                            }, {
                                Name: o.Checkbox,
                                Value: "Checkbox"
                            }, {
                                Name: o.Dropdown,
                                Value: "Dropdown"
                            }, {
                                Name: o.DateTime,
                                Value: "DateTime"
                            }, {
                                Name: o.Json,
                                Value: "Json"
                            }]
                        }, {
                            name: o.IsRequired,
                            field: "IsRequired",
                            type: "checkbox"
                        }, {
                            name: o.DefaultValue,
                            field: "DefaultValue",
                            type: "defaultvalue",
                            typeswitcher: "Type"
                        }, {
                            name: o.Values,
                            field: "DropdownValues",
                            type: "table",
                            onrowdelete: i,
                            onrowchanged: n,
                            elements: [{
                                name: o.DropdownName,
                                code: "DropdownValueName",
                                field: "Name",
                                type: "input"
                            }, {
                                name: o.DropdownValue,
                                code: "DropdownValueValue",
                                field: "Value",
                                type: "input"
                            }]
                        }],
                        readonly: a.graph.Settings.readonly,
                        onHidden: function () {
                            setTimeout(function () {
                                WorkflowDesignerCommon.modal(s.parentForm.window, "show")
                            }, 10)
                        }
                    },
                    d = new WorkflowDesignerForm(r),
                    c = function (e, t) {
                        var i = !0,
                            n = null;
                        return t.length > 1 ? (i &= e.CheckRequired(t, ["Name", "Type"], WorkflowDesignerConstants.FieldIsRequired), i &= e.CheckUnique(t, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) : i &= e.CheckRequired(t, ["Type"], WorkflowDesignerConstants.FieldIsRequired), i && $.each(t, function (t, a) {
                            if ("Dropdown" === a.Type) {
                                if (void 0 === a.DropdownValues || !a.DropdownValues.length) return i = !1, $(a.control_DropdownValues).after('<div class="error-message">' + o.DropdownShouldContainValues + "</div>"), !1;
                                if (!e.CheckUnique(a.DropdownValues, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique) || !e.CheckUnique(a.DropdownValues, ["Value"], WorkflowDesignerConstants.FieldMustBeUnique)) return i = !1, !1
                            }
                            if ("" !== a.DefaultValue && null !== a.DefaultValue && (n = Validation.checkType(a.Type, a.DefaultValue))) return d.ControlAddError(a.control_DefaultValue, n), i = !1, !1
                        }), i
                    },
                    h = function (e) {
                        return !!c(d, e) && (d.ClearTempField(e), l[0].parameters = e, !0)
                    };
                WorkflowDesignerCommon.modal(s.parentForm.window, "hide"), d.showModal(h), d.window.find("[name=Type]").each(function (e, i) {
                    t($(i))
                })
            }), l
        }
    }(), DefaultValueControl.prototype.generate = function (e, t) {
        return this.build(t.Type, e, t.DropdownValues)
    }, DefaultValueControl.prototype.build = function (e, t, i) {
        var n = this,
            a = null;
        switch (e) {
            case "Text":
            case "Number":
            case "DateTime":
                a = new InputControl(n.parentForm).generate(n.parameter, t, n.prefix);
                break;
            case "Checkbox":
                a = new CheckboxControl(n.parentForm).generate($.extend({
                    indeterminable: !0
                }, n.parameter), t, n.prefix);
                break;
            case "Dropdown":
                a = new SelectControl(n.parentForm).generate($.extend({
                    displayfield: "Name",
                    valuefield: "Value",
                    datasource: i
                }, n.parameter), t, n.prefix);
                break;
            case "Json":
                a = new JsonControl(n.parentForm, n.parameter, n.prefix).generateBasicControl(t);
                break;
            default:
                a = $("<div></div>")
        }
        return a[0].rebuild = function (e, t, i) {
            return n.build(e, t, i)
        }, a
    },
    function () {
        function e(e, a, o, r) {
            var s = !1,
                l = null,
                d = WorkflowDesignerConstants.EditParametersFormlabel,
                c = $('<div style="float: right; margin-bottom: 15px;"></div>'),
                h = $('<a href="#" class="btnAdd"></a>');
            h[0].innerHTML = d.SwitchToJson, h.on("click", function () {
                return s = !0, WorkflowDesignerCommon.modal(l.window, "hide"), !1
            }), c.append(h);
            var u = {
                type: "form",
                title: d.Title,
                width: "800px",
                readonly: e.parameter.graph.Settings.readonly,
                onHidden: function () {
                    setTimeout(function () {
                        if (s) {
                            s = !1;
                            var t = l.getEditData(l.parameters),
                                r = {};
                            $.each(o, function (e, n) {
                                paramValue = t[n.Name], r = i(n, paramValue, r)
                            }), $(".ace_editor").remove(), n(e, a, {
                                initialValue: JSON.stringify(r),
                                paramsInfo: o
                            })()
                        } else WorkflowDesignerCommon.modal(e.parentForm.window, "show")
                    }, 10)
                },
                bottom: c[0],
                elements: new Array
            };
            if (void 0 !== r) "" === o[0].Name ? (u.data = {}, u.data[""] = r) : u.data = r;
            else if ("" === o[0].Name) {
                if (u.data = {}, a[0].value) try {
                    u.data[""] = JSON.parse(a[0].value)
                } catch (e) {
                    "Text" !== o[0].Type && "Dropdown" !== o[0].Type && "DateTime" !== o[0].Type || (u.data[""] = a[0].value)
                }
            } else {
                if (a[0].value) try {
                    u.data = JSON.parse(a[0].value)
                } catch (e) { }
                u.data || (u.data = {}), $.each(o, function (e, t) {
                    var i = u.data[t.Name];
                    void 0 !== i && null !== i && "" !== i || (u.data[t.Name] = t.DefaultValue)
                })
            }
            $.each(o, function (e, t) {
                switch (t.Type) {
                    case "Text":
                    case "Number":
                    case "DateTime":
                        u.elements.push({
                            type: "input",
                            name: t.Name,
                            field: t.Name
                        });
                        break;
                    case "Checkbox":
                        u.elements.push({
                            type: "checkbox",
                            name: t.Name,
                            field: t.Name,
                            indeterminable: !0
                        });
                        break;
                    case "Dropdown":
                        u.elements.push({
                            type: "select",
                            name: t.Name,
                            displayfield: "Name",
                            valuefield: "Value",
                            datasource: t.DropdownValues,
                            field: t.Name
                        });
                        break;
                    case "Json":
                        u.elements.push({
                            type: "json",
                            name: t.Name,
                            field: t.Name
                        })
                }
            }), l = new WorkflowDesignerForm(u);
            var m = function (n) {
                var r = null,
                    s = !0,
                    l = {};
                return $.each(o, function (a, o) {
                    r = n[o.Name];
                    var d = t(r, o);
                    d ? (s = !1, e.parentForm.ControlAddError(n["control_" + o.Name], d)) : l = i(o, r, l)
                }), s && (1 !== o.length || "" !== o[0].Name || "Text" !== o[0].Type && "Dropdown" !== o[0].Type && "DateTime" !== o[0].Type ? a[0].value = JSON.stringify(l) : a[0].value = l), s
            };
            l.showModal(m)
        }

        function t(e, t) {
            return !t.IsRequired || void 0 !== e && null !== e && "" !== e ? Validation.checkType(t.Type, e) : WorkflowDesignerConstants.FieldIsRequired
        }

        function i(e, t, i) {
            if ("" === e.Name)
                if ("Text" !== e.Type && "" === t) i = null;
                else if ("Number" === e.Type) i = Number(t);
                else if ("Json" === e.Type) try {
                    i = JSON.parse(t)
                } catch (e) {
                    i = t
                } else i = t;
            else if ("Text" !== e.Type && "" === t) i[e.Name] = null;
            else if ("Number" === e.Type) i[e.Name] = Number(t);
            else if ("Json" === e.Type) try {
                i[e.Name] = JSON.parse(t)
            } catch (n) {
                i[e.Name] = t
            } else i[e.Name] = t;
            return i
        }

        function n(i, n, o) {
            var r = $('<div class="ui modal WorkflowDesignerDialogChild"><div class="header">' + WorkflowDesignerConstants.EditJSONLabel.Title + '</div><div id="' + n[0].id + '_editor" style="height:' + WorkflowDesignerConstants.EditJSONSettings.CodeHeight + 'px">' + n[0].value + "</div></div>");
            r[0].id = n[0].id + "_form";
            var s = !1,
                l = $('<div class="actions"></div>');
            if (void 0 !== o) {
                var d = $('<div style="display: inline-block"></div>'),
                    c = $('<a href="#" class="btnAdd"></a>');
                c[0].innerHTML = WorkflowDesignerConstants.EditParametersFormlabel.SwitchToConstructor, c.on("click", function () {
                    return s = !0, WorkflowDesignerCommon.modal(r, "hide"), !1
                }), d.append(c), l.append(d)
            }
            if (!n[0].readOnly) {
                var h = $('<div class="ui button">' + WorkflowDesignerConstants.EditJSONLabel.Format + "</div>");
                h.click(function () {
                    var e = ace.edit(n[0].id + "_editor"),
                        t = ace.edit(n[0].id + "_editor").getValue();
                    e.setValue(i.parentForm.toPrettyJSON(t)), e.clearSelection()
                }), l.append(h)
            }
            if (void 0 != i.parameter.getemptytype && !n[0].readOnly) {
                var u = $('<div class="ui button">' + WorkflowDesignerConstants.EditJSONLabel.CreateEmptyType + "</div>");
                u.click(function () {
                    var e = i.parameter;
                    void 0 != e.getemptytype && e.getemptytype(i.parentForm, n[0], function (e) {
                        if (void 0 != e && "" !== e) {
                            var t = ace.edit(n[0].id + "_editor");
                            t.setValue(i.parentForm.toPrettyJSON(e)), t.clearSelection()
                        }
                    })
                }), l.append(u)
            }
            return n[0].readOnly ? l.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (l.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), l.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), r.append(l),
                function () {
                    void 0 !== o && WorkflowDesignerCommon.modal(i.parentForm.window, "hide"), WorkflowDesignerCommon.modal(r, {
                        closable: !1,
                        allowMultiple: !0,
                        onApprove: function () {
                            var e = ace.edit(n[0].id + "_editor").getValue();
                            if (o) {
                                i.parentForm.ClearError();
                                var s = null;
                                try {
                                    s = JSON.parse(e)
                                } catch (e) {
                                    return a(r), !1
                                }
                                if ("" === o.paramsInfo[0].Name) {
                                    if (t(s, o.paramsInfo[0])) return a(r), !1
                                } else {
                                    var l = !1;
                                    if ($.each(o.paramsInfo, function (e, i) {
                                        if (t(s[i.Name], i)) return l = !0, !1
                                    }), l) return a(r), !1
                                }
                            }
                            n[0].value = i.parentForm.toCompactJSON(e)
                        },
                        onHidden: function () {
                            if (s) {
                                s = !1;
                                var t = ace.edit(n[0].id + "_editor").getValue(),
                                    a = null;
                                try {
                                    a = JSON.parse(t)
                                } catch (e) { }
                                e(i, n, o.paramsInfo, a)
                            } else setTimeout(function () {
                                WorkflowDesignerCommon.modal(i.parentForm.window, "show")
                            }, 10)
                        },
                        dimmerSettings: {
                            opacity: .2,
                            duration: {
                                show: 0,
                                hide: 0
                            }
                        },
                        transition: "fade"
                    }), WorkflowDesignerCommon.modal(r, "show");
                    var l = ace.edit(n[0].id + "_editor");
                    n[0].readOnly ? l.setOptions({
                        readOnly: !0
                    }) : l.setOptions({
                        readOnly: !1
                    }), l.getSession().setMode("ace/mode/json"), l.setValue(i.parentForm.toPrettyJSON(void 0 !== o ? o.initialValue : n[0].value)), l.clearSelection()
                }
        }

        function a(e) {
            $(".header", e).after('<div class="error-message" style="padding: 4px">' + WorkflowDesignerConstants.EditParametersFormlabel.InvalidJson + "</div>")
        }
        JsonControl.prototype.generateParameterControl = function (e, t) {
            var i = this,
                n = null;
            switch (i.parameter.parametertype) {
                case "Action":
                    n = t.ActionName;
                    break;
                case "Condition":
                    t.Action && (n = t.Action.ActionName);
                    break;
                case "RuleCheck":
                    n = t.Rule
            }
            return i.build(n, e)
        }, JsonControl.prototype.generateBasicControl = function (e) {
            var t = this,
                i = $('<input type="text"></input>');
            i[0].id = t.parentForm.generateid(t.parameter.field, t.prefix), i[0].name = t.parentForm.getElementCode(t.parameter), void 0 !== e && null !== e && ("object" == typeof e ? i[0].value = JSON.stringify(e) : i[0].value = e), t.parentForm.isReadOnly() && i.attr("readonly", !0);
            var a = $('<a class="btnCodeActions"></a>');
            a[0].id = i[0].id + "_button", a.on("click", n(t, i)), t.parentForm.addAutoComplete(t.parameter, i);
            var o = $('<div style="width:100%;"></div>').append($('<div style="width:16px; float:right; margin-right:7px;margin-top: 10px;"></div>').append(a)).append($('<div style="margin-right:30px"></div>').append(i));
            return o[0].rebuild = function (e, i) {
                return t.build(e, i)
            }, o
        }, JsonControl.prototype.build = function (t, i) {
            var n = this,
                a = null;
            if (t && (a = n.parameter.graph.getActionParameterDefinition(t, n.parameter.parametertype)), !(a && a.length || ("RuleCheck" === n.parameter.parametertype && (a = n.parameter.graph.getActionParameterDefinition(t, "RuleGet")), a && a.length))) return n.generateBasicControl(i);
            null !== i && "" !== i || "" !== a[0].Name || (i = a[0].DefaultValue);
            var o = $('<input type="text"></input>');
            o[0].id = n.parentForm.generateid(n.parameter.field, n.prefix), o[0].name = n.parentForm.getElementCode(n.parameter), void 0 !== i && (o[0].value = i), n.parentForm.isReadOnly() && o.attr("readonly", !0);
            var r = $('<a class="btnCodeActions"></a>');
            r[0].id = o[0].id + "_button", r.on("click", function () {
                e(n, o, a)
            });
            var s = $('<div style="width:100%;"></div>').append($('<div style="width:16px; float:right; margin-right:7px;margin-top: 10px;"></div>').append(r)).append($('<div style="margin-right:30px"></div>').append(o));
            return s[0].rebuild = function (e, t) {
                return n.build(e, t)
            }, s
        }
    }(), InputControl.prototype.generate = function (e, t, i) {
        var n = this,
            a = $('<input type="text"></input>');
        return a[0].id = n.parentForm.generateid(e.field, i), a[0].name = n.parentForm.getElementCode(e), void 0 !== t && (a[0].value = t), n.parentForm.isReadOnly() && a.attr("readonly", !0), n.parentForm.addAutoComplete(e, a), void 0 !== e.onchange && a.on("change", function () {
            e.onchange(a)
        }), a.data("initial-value", t), a
    }, CheckboxControl.prototype.generate = function (e, t, i) {
        var n = this,
            a = $('<input type="checkbox"></input>');
        return a[0].id = n.parentForm.generateid(e.field, i), a[0].checked = t, a[0].name = n.parentForm.getElementCode(e), n.parentForm.isReadOnly() && a.attr("disabled", "disabled"), a = $('<div class="ui checkbox"></div>').append(a).append("<label></label>"), !e.indeterminable || null !== t && void 0 !== t && "" !== t || a.checkbox("set indeterminate"), a
    }, SelectControl.prototype.generate = function (e, t, i) {
        var n = this,
            a = $('<select class="ui selection dropdown"></select>'),
            o = !1;
        return a[0].id = n.parentForm.generateid(e.field, i), a[0].name = n.parentForm.getElementCode(e), a.append($("<option></option>")), void 0 !== e.datasource && e.datasource.forEach(function (i) {
            var r = $("<option></option>");
            void 0 === e.displayfield ? (r[0].value = i, r[0].innerHTML = i) : (r[0].innerHTML = i[e.displayfield], void 0 !== e.valuefield ? r[0].value = i[e.valuefield] : r[0].value = i[e.displayfield]), o || (r[0].value == t ? (r[0].selected = "selected", o = !0) : void 0 !== t && null !== t && void 0 !== r[0].value && null !== r[0].value && r[0].value.toLowerCase() === t.toString().toLowerCase() && (r[0].selected = "selected", o = !0)), n.parentForm.isReadOnly() && a.attr("disabled", "disabled"), a.append(r)
        }), void 0 !== e.onchange && a.on("change", function () {
            e.onchange(a)
        }), a
    };
var Validation = {
    checkType: function (e, t) {
        var i = WorkflowDesignerConstants.EditParametersFormlabel;
        switch (e) {
            case "Number":
                if (isNaN(t) || t === !0 || t === !1) return i.NumberRequired;
                break;
            case "DateTime":
                if ("" !== t && null !== t && void 0 !== t && !moment(t, moment.ISO_8601).isValid()) return i.DateShouldBeInISOFormat
        }
        return null
    }
},
    WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditCodeActions = function () {
    function e(e, t) {
        var i = [];
        return e.forEach(function (n) {
            if (n.IsGlobal) {
                for (var a = !1, o = 0; o < e.length; o++)
                    if (n.Name == e[o].Name && n.IsGlobal != e[o].IsGlobal) {
                        a = !0;
                        break
                    }
                for (var r = !1, o = 0; o < t.length; o++)
                    if (a) {
                        if (n.Name == t[o].Name && t[o].IsGlobal) {
                            r = !0;
                            break
                        }
                    } else if (n.Name == t[o].Name) {
                        r = !0;
                        break
                    }
                r && i.push(n.Name)
            }
        }), i
    }

    function t(e, t) {
        var i = 0,
            n = 0;
        $.each(t, function (t, a) {
            switch (a.type) {
                case "Action":
                    for (i = 0; i < e.Activities.length; i += 1) {
                        var o = e.Activities[i];
                        if ("Inline" !== o.ActivityType) {
                            if (o.Implementation)
                                for (n = 0; n < o.Implementation.length; n += 1) o.Implementation[n].ActionName === a.initial && (o.Implementation[n].ActionName = a.current);
                            if (o.Implementation)
                                for (n = 0; n < o.PreExecutionImplementation.length; n += 1) o.PreExecutionImplementation[n].ActionName === a.initial && (o.PreExecutionImplementation[n].ActionName = a.current)
                        }
                    }
                    break;
                case "Condition":
                    for (i = 0; i < e.Transitions.length; i += 1) {
                        var r = e.Transitions[i];
                        for (n = 0; n < r.Conditions.length; n += 1) {
                            var s = r.Conditions[n];
                            "Action" === s.Type && s.Action.ActionName === a.initial && (s.Action.ActionName = a.current)
                        }
                    }
                    break;
                case "RuleGet":
                case "RuleCheck":
                    for (i = 0; i < e.Actors.length; i += 1) e.Actors[i].Rule === a.initial && (e.Actors[i].Rule = a.current)
            }
        })
    }
    return function (i) {
        var n = WorkflowDesignerConstants.CodeActionsFormLabel,
            a = {
                type: "table",
                title: n.Title,
                data: i.graph.data.CodeActions,
                datadefault: {},
                elements: [{
                    name: n.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: n.Type,
                    field: "Type",
                    type: "select",
                    displayfield: "Name",
                    datasource: [{
                        Name: "Action"
                    }, {
                        Name: "Condition"
                    }, {
                        Name: "RuleGet"
                    }, {
                        Name: "RuleCheck"
                    }]
                }, {
                    name: n.IsGlobal,
                    field: "IsGlobal",
                    type: "checkbox"
                }, {
                    name: n.IsAsync,
                    field: "IsAsync",
                    type: "checkbox"
                }, {
                    name: n.ActionCode,
                    field: "ActionCode",
                    type: "code"
                }, {
                    name: n.Parameters,
                    field: "ParameterDefinitions",
                    type: "parameters",
                    graph: i.graph
                }],
                graph: i.graph,
                readonly: i.graph.Settings.readonly,
                onrowadded: function (e, t) {
                    e.find("[name=Type]").change(function () {
                        r(e)
                    }), r(e), e.find("[name=IsGlobal]").change(function () {
                        this.checked || t.InfoDialog(WorkflowDesignerConstants.Warning, WorkflowDesignerConstants.CodeActionsFormLabel.UnGlobalMessage, "mini")
                    })
                },
                onrowdelete: function (e, t) {
                    return e.find("[name=IsGlobal]")[0].checked && t.InfoDialog(WorkflowDesignerConstants.Warning, WorkflowDesignerConstants.CodeActionsFormLabel.GlobalDeleteMessage, "mini"), !0
                },
                saveFunc: function (e, n) {
                    i.SyncTable(i.graph.data.CodeActions, e, a);
                    for (var o = 0; o < i.graph.data.CodeActions.length; o++) {
                        var r = i.graph.data.CodeActions[o].ActionCode,
                            s = i.graph.data.CodeActions[o].ParameterDefinitions;
                        if (i.graph.data.CodeActions[o].ActionCode = encodeURIComponent(r.code), i.graph.data.CodeActions[o].Usings = encodeURIComponent(r.usings), void 0 !== s && null !== s) {
                            var l = {};
                            i.graph.data.CodeActions[o].ParameterDefinitions = new Array, $.each(s, function (e, t) {
                                l = {
                                    Name: t.Name,
                                    Type: t.Type,
                                    IsRequired: t.IsRequired,
                                    DefaultValue: t.DefaultValue
                                }, "Dropdown" === l.Type && (l.DropdownValues = new Array, $.each(t.DropdownValues, function (e, t) {
                                    l.DropdownValues.push({
                                        Name: t.Name,
                                        Value: t.Value
                                    })
                                })), i.graph.data.CodeActions[o].ParameterDefinitions.push(l)
                            })
                        }
                    }
                    n.length && t(i.graph.data, n), WorkflowDesignerCommon.DataCorrection(i.graph.data), i.graph.Draw(i.graph.data), i.graph.StoreGraphData()
                }
            };
        if (void 0 != i.graph.Settings.forms && void 0 != i.graph.Settings.forms.codeactions) return void i.graph.Settings.forms.codeactions(a);
        var o = new WorkflowDesignerForm(a),
            r = function (e) {
                var t = e.find("[name=Type]")[0],
                    i = e.find("[name=IsAsync]");
                void 0 === t || "RuleGet" !== t.value && "RuleCheck" !== t.value ? i.attr("disabled", !1) : (i.attr("disabled", !0), i.attr("checked", !1))
            },
            s = function (t, n) {
                for (var a = 0; a < t.length; a++) {
                    var r = t[a];
                    void 0 === r.ActionCode || void 0 !== r.ActionCode.code && r.ActionCode.code || ("Action" === r.Type ? r.ActionCode.code = "return;" : "Condition" === r.Type ? r.ActionCode.code = "return false;" : "RuleGet" === r.Type ? r.ActionCode.code = "return new List<string>();" : "RuleCheck" === r.Type && (r.ActionCode.code = "return false;"))
                }
                if (o.CheckRequired(t, ["Name", "Type", "ActionCode.code"], WorkflowDesignerConstants.FieldIsRequired) && o.CheckUnique(t, ["Name", "Type", "IsGlobal"], WorkflowDesignerConstants.FieldMustBeUnique)) {
                    for (var s = new Array, a = 0; a < t.length; a++) {
                        var r = t[a],
                            l = $(r.control_Name).data("initial-value"),
                            d = r.Name;
                        l !== d && s.push({
                            initial: l,
                            current: d,
                            type: r.Type
                        })
                    }
                    o.ClearTempField(t);
                    var c = e(i.graph.data.CodeActions, t);
                    return c.length > 0 && i.graph.designer.deleteGlobalCodeAction(c, function (e) {
                        return e.isError && o.InfoDialog(WorkflowDesignerConstants.EditCodeLabel.Error, e.errorMessage), !1
                    }), o.parameters.saveFunc(t, s), !0
                }
                return !1
            };
        o.showModal(s)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditTimer = function () {
    return function (e) {
        var t = WorkflowDesignerConstants.TimerFormLabel,
            i = {
                type: "table",
                title: t.Title,
                width: "800px",
                data: e.graph.data.Timers,
                keyproperty: "Name",
                elements: [{
                    name: t.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: t.Type,
                    field: "Type",
                    type: "select",
                    datasource: e.graph.data.AdditionalParams.TimerTypes
                }, {
                    name: t.Value,
                    field: "Value",
                    type: "input"
                }, {
                    name: t.NotOverrideIfExists,
                    field: "NotOverrideIfExists",
                    type: "checkbox"
                }],
                readonly: e.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Timers, t, i), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), e.graph.StoreGraphData()
                }
            };
        if (void 0 != e.graph.Settings.forms && void 0 != e.graph.Settings.forms.timers) return void e.graph.Settings.forms.timers(i);
        var n = new WorkflowDesignerForm(i),
            a = function (t, i) {
                return !(!n.CheckRequired(t, ["Name", "Type", "Value"], WorkflowDesignerConstants.FieldIsRequired) || !n.CheckUnique(t, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (n.ClearTempField(t), void 0 == e.graph.data.Timers && (e.graph.data.Timers = []), n.parameters.saveFunc(t), !0)
            };
        n.showModal(a)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditActors = function () {
    return function (e) {
        var t = WorkflowDesignerConstants.ActorFormLabel,
            i = {
                type: "table",
                title: t.Title,
                width: "800px",
                data: e.graph.data.Actors,
                keyproperty: "Name",
                elements: [{
                    name: t.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: t.Rule,
                    field: "Rule",
                    type: "select",
                    datasource: e.graph.getActorNames(),
                    onchange: function (e) {
                        var t = $(e),
                            i = t.closest("tr").find("[name=actoractionparam]").closest("td"),
                            n = i.children(),
                            a = n[0].rebuild($(e).val(), n.find("input").val());
                        n.remove(), i.append(a)
                    }
                }, {
                    name: t.Value,
                    field: "Value",
                    type: "jsonparameter",
                    code: "actoractionparam",
                    graph: e.graph,
                    parametertype: "RuleCheck",
                    openautocompleteonclick: !0,
                    datasource: function (t, i) {
                        var n = $(this).closest("tr"),
                            a = n.find("[name=Rule]")[0].value;
                        i(e.graph.getAutoCompleteSuggestions("ruleparameter", a, t))
                    }
                }],
                graph: e.graph,
                readonly: e.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Actors, t, i), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), e.graph.StoreGraphData()
                }
            };
        if (void 0 != e.graph.Settings.forms && void 0 != e.graph.Settings.forms.actors) return void e.graph.Settings.forms.actors(i);
        var n = new WorkflowDesignerForm(i),
            a = function (e, t) {
                return !(!n.CheckRequired(e, ["Name", "Rule"], WorkflowDesignerConstants.FieldIsRequired) || !n.CheckUnique(e, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (n.ClearTempField(e), n.parameters.saveFunc(e), !0)
            };
        n.showModal(a)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditCommands = function () {
    return function (e) {
        var t = WorkflowDesignerConstants.CommandFormLabel,
            i = function (t, i, n) {
                for (var a = void 0, o = void 0, r = t.getEditData(t.parameters), s = 0; s < r.length; s++) {
                    var l = r[s];
                    if (void 0 != l.InputParameters)
                        for (var d = 0; d < l.InputParameters.length; d++)
                            if (l.InputParameters[d].control_DefaultValue.id === i.id) {
                                o = l.InputParameters[d].Parameter.Name;
                                break
                            }
                }
                if (void 0 != o)
                    for (var c = e.graph.data.Parameters, s = 0; s < c.length; s++)
                        if (c[s].Name === o) {
                            a = c[s].Type;
                            break
                        }
                void 0 != a && e.graph.graph.getemptytype(a, n)
            },
            n = {
                type: "table",
                title: t.Title,
                width: "900px",
                data: e.graph.data.Commands,
                datadefault: {},
                keyproperty: "Name",
                elements: [{
                    name: t.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: t.InputParameters,
                    field: "InputParameters",
                    type: "table",
                    elements: [{
                        name: t.InputParametersName,
                        code: "ipname",
                        field: "Name",
                        type: "input",
                        width: "30%"
                    }, {
                        name: t.InputParametersParameter,
                        code: "ipparameter",
                        field: "Parameter.Name",
                        type: "select",
                        displayfield: "Name",
                        datasource: e.graph.getNonSystemParameters()
                    }, {
                        name: t.InputParametersIsRequired,
                        code: "iisrequired",
                        field: "IsRequired",
                        type: "checkbox"
                    }, {
                        name: t.InputParametersDefaultValue,
                        code: "idefaultvalue",
                        field: "DefaultValue",
                        type: "json",
                        width: "40%",
                        getemptytype: i
                    }]
                }],
                graph: e.graph,
                readonly: e.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Commands, t, n), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), e.graph.StoreGraphData()
                }
            };
        if (void 0 != e.graph.Settings.forms && void 0 != e.graph.Settings.forms.commands) return void e.graph.Settings.forms.commands(n);
        var a = new WorkflowDesignerForm(n),
            o = function (e, t) {
                var i = !0;
                return i &= e.CheckRequired(t, ["Name"], WorkflowDesignerConstants.FieldIsRequired), i &= e.CheckUnique(t, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique), t.forEach(function (t) {
                    e.CheckRequired(t.InputParameters, ["Name", "Parameter.Name"], WorkflowDesignerConstants.FieldIsRequired) || (i = !1)
                }), i
            },
            r = function (e) {
                return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0)
            };
        a.showModal(r)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.ConfirmDialog = function () {
    return function (e, t, i, n, a) {
        var o = $('<div tabindex="0" class="ui mini modal WorkflowDesignerConfirmDialog"></div>');
        o.append($('<div class="header">' + WorkflowDesignerConstants.DialogConfirmText + "</div>")), o.append($('<div class="content scrolling"><p>' + e + "</p></div>"));
        var r = $('<div class="actions"></div>').append('<div tabindex="1" class="ui primary ok button">' + t + "</div>").append('<div class="ui secondary  cancel button">' + n + "</div>");
        o.append(r), WorkflowDesignerCommon.modal(o, {
            onApprove: function () {
                i()
            },
            onDeny: function () {
                a()
            },
            allowMultiple: !0,
            dimmerSettings: {
                opacity: .2,
                duration: {
                    show: 0,
                    hide: 0
                }
            },
            transition: "fade"
        }), WorkflowDesignerCommon.modal(o, "show")
    }
}(),
    function (e, t) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : e.moment = t()
    }(this, function () {
        "use strict";

        function e() {
            return Qe.apply(null, arguments)
        }

        function t(e) {
            return e instanceof Array || "[object Array]" === Object.prototype.toString.call(e)
        }

        function i(e) {
            return null != e && "[object Object]" === Object.prototype.toString.call(e)
        }

        function n(e) {
            return void 0 === e
        }

        function a(e) {
            return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e)
        }

        function o(e) {
            return e instanceof Date || "[object Date]" === Object.prototype.toString.call(e)
        }

        function r(e, t) {
            var i, n = [];
            for (i = 0; i < e.length; ++i) n.push(t(e[i], i));
            return n
        }

        function s(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
        }

        function l(e, t) {
            for (var i in t) s(t, i) && (e[i] = t[i]);
            return s(t, "toString") && (e.toString = t.toString), s(t, "valueOf") && (e.valueOf = t.valueOf), e
        }

        function d(e, t, i, n) {
            return pe(e, t, i, n, !0).utc()
        }

        function c(e) {
            return null == e._pf && (e._pf = {
                empty: !1,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: !1,
                invalidMonth: null,
                invalidFormat: !1,
                userInvalidated: !1,
                iso: !1,
                parsedDateParts: [],
                meridiem: null,
                rfc2822: !1,
                weekdayMismatch: !1
            }), e._pf
        }

        function h(e) {
            if (null == e._isValid) {
                var t = c(e),
                    i = et.call(t.parsedDateParts, function (e) {
                        return null != e
                    }),
                    n = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && i);
                if (e._strict && (n = n && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), null != Object.isFrozen && Object.isFrozen(e)) return n;
                e._isValid = n
            }
            return e._isValid
        }

        function u(e) {
            var t = d(NaN);
            return null != e ? l(c(t), e) : c(t).userInvalidated = !0, t
        }

        function m(e, t) {
            var i, a, o;
            if (n(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), n(t._i) || (e._i = t._i), n(t._f) || (e._f = t._f), n(t._l) || (e._l = t._l), n(t._strict) || (e._strict = t._strict), n(t._tzm) || (e._tzm = t._tzm), n(t._isUTC) || (e._isUTC = t._isUTC), n(t._offset) || (e._offset = t._offset), n(t._pf) || (e._pf = c(t)), n(t._locale) || (e._locale = t._locale), 0 < it.length)
                for (i = 0; i < it.length; i++) n(o = t[a = it[i]]) || (e[a] = o);
            return e
        }

        function g(t) {
            m(this, t), this._d = new Date(null != t._d ? t._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), !1 === nt && (nt = !0, e.updateOffset(this), nt = !1)
        }

        function f(e) {
            return e instanceof g || null != e && null != e._isAMomentObject
        }

        function p(e) {
            return e < 0 ? Math.ceil(e) || 0 : Math.floor(e)
        }

        function v(e) {
            var t = +e,
                i = 0;
            return 0 !== t && isFinite(t) && (i = p(t)), i
        }

        function y(e, t, i) {
            var n, a = Math.min(e.length, t.length),
                o = Math.abs(e.length - t.length),
                r = 0;
            for (n = 0; n < a; n++)(i && e[n] !== t[n] || !i && v(e[n]) !== v(t[n])) && r++;
            return r + o
        }

        function w(t) {
            !1 === e.suppressDeprecationWarnings && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + t)
        }

        function S(t, i) {
            var n = !0;
            return l(function () {
                if (null != e.deprecationHandler && e.deprecationHandler(null, t), n) {
                    for (var a, o = [], r = 0; r < arguments.length; r++) {
                        if (a = "", "object" == typeof arguments[r]) {
                            for (var s in a += "\n[" + r + "] ", arguments[0]) a += s + ": " + arguments[0][s] + ", ";
                            a = a.slice(0, -2)
                        } else a = arguments[r];
                        o.push(a)
                    }
                    w(t + "\nArguments: " + Array.prototype.slice.call(o).join("") + "\n" + (new Error).stack), n = !1
                }
                return i.apply(this, arguments)
            }, i)
        }

        function b(t, i) {
            null != e.deprecationHandler && e.deprecationHandler(t, i), at[t] || (w(i), at[t] = !0)
        }

        function C(e) {
            return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e)
        }

        function D(e, t) {
            var n, a = l({}, e);
            for (n in t) s(t, n) && (i(e[n]) && i(t[n]) ? (a[n] = {}, l(a[n], e[n]), l(a[n], t[n])) : null != t[n] ? a[n] = t[n] : delete a[n]);
            for (n in e) s(e, n) && !s(t, n) && i(e[n]) && (a[n] = l({}, a[n]));
            return a
        }

        function T(e) {
            null != e && this.set(e)
        }

        function k(e, t) {
            var i = e.toLowerCase();
            ot[i] = ot[i + "s"] = ot[t] = e
        }

        function x(e) {
            return "string" == typeof e ? ot[e] || ot[e.toLowerCase()] : void 0
        }

        function A(e) {
            var t, i, n = {};
            for (i in e) s(e, i) && (t = x(i)) && (n[t] = e[i]);
            return n
        }

        function _(e, t) {
            rt[e] = t
        }

        function I(e, t, i) {
            var n = "" + Math.abs(e),
                a = t - n.length;
            return (0 <= e ? i ? "+" : "" : "-") + Math.pow(10, Math.max(0, a)).toString().substr(1) + n
        }

        function P(e, t, i, n) {
            var a = n;
            "string" == typeof n && (a = function () {
                return this[n]()
            }), e && (ct[e] = a), t && (ct[t[0]] = function () {
                return I(a.apply(this, arguments), t[1], t[2])
            }), i && (ct[i] = function () {
                return this.localeData().ordinal(a.apply(this, arguments), e)
            })
        }

        function N(e, t) {
            return e.isValid() ? (t = W(t, e.localeData()), dt[t] = dt[t] || function (e) {
                var t, i, n, a = e.match(st);
                for (t = 0, i = a.length; t < i; t++) ct[a[t]] ? a[t] = ct[a[t]] : a[t] = (n = a[t]).match(/\[[\s\S]/) ? n.replace(/^\[|\]$/g, "") : n.replace(/\\/g, "");
                return function (t) {
                    var n, o = "";
                    for (n = 0; n < i; n++) o += C(a[n]) ? a[n].call(t, e) : a[n];
                    return o
                }
            }(t), dt[t](e)) : e.localeData().invalidDate()
        }

        function W(e, t) {
            function i(e) {
                return t.longDateFormat(e) || e
            }
            var n = 5;
            for (lt.lastIndex = 0; 0 <= n && lt.test(e);) e = e.replace(lt, i), lt.lastIndex = 0, n -= 1;
            return e
        }

        function F(e, t, i) {
            Tt[e] = C(t) ? t : function (e, n) {
                return e && i ? i : t
            }
        }

        function M(e, t) {
            return s(Tt, e) ? Tt[e](t._strict, t._locale) : new RegExp(L(e.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (e, t, i, n, a) {
                return t || i || n || a
            })))
        }

        function L(e) {
            return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
        }

        function O(e, t) {
            var i, n = t;
            for ("string" == typeof e && (e = [e]), a(t) && (n = function (e, i) {
                i[t] = v(e)
            }), i = 0; i < e.length; i++) kt[e[i]] = n
        }

        function E(e, t) {
            O(e, function (e, i, n, a) {
                n._w = n._w || {}, t(e, n._w, n, a)
            })
        }

        function R(e) {
            return G(e) ? 366 : 365
        }

        function G(e) {
            return e % 4 == 0 && e % 100 != 0 || e % 400 == 0
        }

        function Y(t, i) {
            return function (n) {
                return null != n ? (V(this, t, n), e.updateOffset(this, i), this) : B(this, t)
            }
        }

        function B(e, t) {
            return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN
        }

        function V(e, t, i) {
            e.isValid() && !isNaN(i) && ("FullYear" === t && G(e.year()) && 1 === e.month() && 29 === e.date() ? e._d["set" + (e._isUTC ? "UTC" : "") + t](i, e.month(), $(i, e.month())) : e._d["set" + (e._isUTC ? "UTC" : "") + t](i))
        }

        function $(e, t) {
            if (isNaN(e) || isNaN(t)) return NaN;
            var i, n = (t % (i = 12) + i) % i;
            return e += (t - n) / 12, 1 === n ? G(e) ? 29 : 28 : 31 - n % 7 % 2
        }

        function H(e, t) {
            var i;
            if (!e.isValid()) return e;
            if ("string" == typeof t)
                if (/^\d+$/.test(t)) t = v(t);
                else if (!a(t = e.localeData().monthsParse(t))) return e;
            return i = Math.min(e.date(), $(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, i), e
        }

        function U(t) {
            return null != t ? (H(this, t), e.updateOffset(this, !0), this) : B(this, "Month")
        }

        function j() {
            function e(e, t) {
                return t.length - e.length
            }
            var t, i, n = [],
                a = [],
                o = [];
            for (t = 0; t < 12; t++) i = d([2e3, t]), n.push(this.monthsShort(i, "")), a.push(this.months(i, "")), o.push(this.months(i, "")), o.push(this.monthsShort(i, ""));
            for (n.sort(e), a.sort(e), o.sort(e), t = 0; t < 12; t++) n[t] = L(n[t]), a[t] = L(a[t]);
            for (t = 0; t < 24; t++) o[t] = L(o[t]);
            this._monthsRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + a.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + n.join("|") + ")", "i")
        }

        function q(e) {
            var t;
            if (e < 100 && 0 <= e) {
                var i = Array.prototype.slice.call(arguments);
                i[0] = e + 400, t = new Date(Date.UTC.apply(null, i)), isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e)
            } else t = new Date(Date.UTC.apply(null, arguments));
            return t
        }

        function J(e, t, i) {
            var n = 7 + t - i;
            return -((7 + q(e, 0, n).getUTCDay() - t) % 7) + n - 1
        }

        function K(e, t, i, n, a) {
            var o, r, s = 1 + 7 * (t - 1) + (7 + i - n) % 7 + J(e, n, a);
            return r = s <= 0 ? R(o = e - 1) + s : s > R(e) ? (o = e + 1, s - R(e)) : (o = e, s), {
                year: o,
                dayOfYear: r
            }
        }

        function z(e, t, i) {
            var n, a, o = J(e.year(), t, i),
                r = Math.floor((e.dayOfYear() - o - 1) / 7) + 1;
            return r < 1 ? n = r + X(a = e.year() - 1, t, i) : r > X(e.year(), t, i) ? (n = r - X(e.year(), t, i), a = e.year() + 1) : (a = e.year(), n = r), {
                week: n,
                year: a
            }
        }

        function X(e, t, i) {
            var n = J(e, t, i),
                a = J(e + 1, t, i);
            return (R(e) - n + a) / 7
        }

        function Z(e, t) {
            return e.slice(t, 7).concat(e.slice(0, t))
        }

        function Q() {
            function e(e, t) {
                return t.length - e.length
            }
            var t, i, n, a, o, r = [],
                s = [],
                l = [],
                c = [];
            for (t = 0; t < 7; t++) i = d([2e3, 1]).day(t), n = this.weekdaysMin(i, ""), a = this.weekdaysShort(i, ""), o = this.weekdays(i, ""), r.push(n), s.push(a), l.push(o), c.push(n), c.push(a), c.push(o);
            for (r.sort(e), s.sort(e), l.sort(e), c.sort(e), t = 0; t < 7; t++) s[t] = L(s[t]), l[t] = L(l[t]), c[t] = L(c[t]);
            this._weekdaysRegex = new RegExp("^(" + c.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + l.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + r.join("|") + ")", "i")
        }

        function ee() {
            return this.hours() % 12 || 12
        }

        function te(e, t) {
            P(e, 0, 0, function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), t)
            })
        }

        function ie(e, t) {
            return t._meridiemParse
        }

        function ne(e) {
            return e ? e.toLowerCase().replace("_", "-") : e
        }

        function ae(e) {
            var t = null;
            if (!Et[e] && "undefined" != typeof module && module && module.exports) try {
                t = Mt._abbr, require("./locale/" + e), oe(t)
            } catch (e) { }
            return Et[e]
        }

        function oe(e, t) {
            var i;
            return e && ((i = n(t) ? se(e) : re(e, t)) ? Mt = i : "undefined" != typeof console && console.warn && console.warn("Locale " + e + " not found. Did you forget to load it?")), Mt._abbr
        }

        function re(e, t) {
            if (null === t) return delete Et[e], null;
            var i, n = Ot;
            if (t.abbr = e, null != Et[e]) b("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), n = Et[e]._config;
            else if (null != t.parentLocale)
                if (null != Et[t.parentLocale]) n = Et[t.parentLocale]._config;
                else {
                    if (null == (i = ae(t.parentLocale))) return Rt[t.parentLocale] || (Rt[t.parentLocale] = []), Rt[t.parentLocale].push({
                        name: e,
                        config: t
                    }), null;
                    n = i._config
                }
            return Et[e] = new T(D(n, t)), Rt[e] && Rt[e].forEach(function (e) {
                re(e.name, e.config)
            }), oe(e), Et[e]
        }

        function se(e) {
            var i;
            if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) return Mt;
            if (!t(e)) {
                if (i = ae(e)) return i;
                e = [e]
            }
            return function (e) {
                for (var t, i, n, a, o = 0; o < e.length;) {
                    for (t = (a = ne(e[o]).split("-")).length, i = (i = ne(e[o + 1])) ? i.split("-") : null; 0 < t;) {
                        if (n = ae(a.slice(0, t).join("-"))) return n;
                        if (i && i.length >= t && y(a, i, !0) >= t - 1) break;
                        t--
                    }
                    o++
                }
                return Mt
            }(e)
        }

        function le(e) {
            var t, i = e._a;
            return i && -2 === c(e).overflow && (t = i[1] < 0 || 11 < i[1] ? 1 : i[2] < 1 || i[2] > $(i[0], i[1]) ? 2 : i[3] < 0 || 24 < i[3] || 24 === i[3] && (0 !== i[4] || 0 !== i[5] || 0 !== i[6]) ? 3 : i[4] < 0 || 59 < i[4] ? 4 : i[5] < 0 || 59 < i[5] ? 5 : i[6] < 0 || 999 < i[6] ? 6 : -1, c(e)._overflowDayOfYear && (t < 0 || 2 < t) && (t = 2), c(e)._overflowWeeks && -1 === t && (t = 7), c(e)._overflowWeekday && -1 === t && (t = 8), c(e).overflow = t), e
        }

        function de(e, t, i) {
            return null != e ? e : null != t ? t : i
        }

        function ce(t) {
            var i, n, a, o, r, s = [];
            if (!t._d) {
                var l, d;
                for (l = t, d = new Date(e.now()), a = l._useUTC ? [d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()] : [d.getFullYear(), d.getMonth(), d.getDate()], t._w && null == t._a[2] && null == t._a[1] && function (e) {
                    var t, i, n, a, o, r, s, l;
                    if (null != (t = e._w).GG || null != t.W || null != t.E) o = 1, r = 4, i = de(t.GG, e._a[0], z(ve(), 1, 4).year), n = de(t.W, 1), ((a = de(t.E, 1)) < 1 || 7 < a) && (l = !0);
                    else {
                        o = e._locale._week.dow, r = e._locale._week.doy;
                        var d = z(ve(), o, r);
                        i = de(t.gg, e._a[0], d.year), n = de(t.w, d.week), null != t.d ? ((a = t.d) < 0 || 6 < a) && (l = !0) : null != t.e ? (a = t.e + o, (t.e < 0 || 6 < t.e) && (l = !0)) : a = o
                    }
                    n < 1 || n > X(i, o, r) ? c(e)._overflowWeeks = !0 : null != l ? c(e)._overflowWeekday = !0 : (s = K(i, n, a, o, r), e._a[0] = s.year, e._dayOfYear = s.dayOfYear)
                }(t), null != t._dayOfYear && (r = de(t._a[0], a[0]), (t._dayOfYear > R(r) || 0 === t._dayOfYear) && (c(t)._overflowDayOfYear = !0), n = q(r, 0, t._dayOfYear), t._a[1] = n.getUTCMonth(), t._a[2] = n.getUTCDate()), i = 0; i < 3 && null == t._a[i]; ++i) t._a[i] = s[i] = a[i];
                for (; i < 7; i++) t._a[i] = s[i] = null == t._a[i] ? 2 === i ? 1 : 0 : t._a[i];
                24 === t._a[3] && 0 === t._a[4] && 0 === t._a[5] && 0 === t._a[6] && (t._nextDay = !0, t._a[3] = 0), t._d = (t._useUTC ? q : function (e, t, i, n, a, o, r) {
                    var s;
                    return e < 100 && 0 <= e ? (s = new Date(e + 400, t, i, n, a, o, r), isFinite(s.getFullYear()) && s.setFullYear(e)) : s = new Date(e, t, i, n, a, o, r), s
                }).apply(null, s), o = t._useUTC ? t._d.getUTCDay() : t._d.getDay(), null != t._tzm && t._d.setUTCMinutes(t._d.getUTCMinutes() - t._tzm), t._nextDay && (t._a[3] = 24), t._w && void 0 !== t._w.d && t._w.d !== o && (c(t).weekdayMismatch = !0)
            }
        }

        function he(e) {
            var t, i, n, a, o, r, s = e._i,
                l = Gt.exec(s) || Yt.exec(s);
            if (l) {
                for (c(e).iso = !0, t = 0, i = Vt.length; t < i; t++)
                    if (Vt[t][1].exec(l[1])) {
                        a = Vt[t][0], n = !1 !== Vt[t][2];
                        break
                    }
                if (null == a) return void (e._isValid = !1);
                if (l[3]) {
                    for (t = 0, i = $t.length; t < i; t++)
                        if ($t[t][1].exec(l[3])) {
                            o = (l[2] || " ") + $t[t][0];
                            break
                        }
                    if (null == o) return void (e._isValid = !1)
                }
                if (!n && null != o) return void (e._isValid = !1);
                if (l[4]) {
                    if (!Bt.exec(l[4])) return void (e._isValid = !1);
                    r = "Z"
                }
                e._f = a + (o || "") + (r || ""), ge(e)
            } else e._isValid = !1
        }

        function ue(e, t, i, n, a, o) {
            var r = [function (e) {
                var t = parseInt(e, 10);
                return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t
            }(e), Pt.indexOf(t), parseInt(i, 10), parseInt(n, 10), parseInt(a, 10)];
            return o && r.push(parseInt(o, 10)), r
        }

        function me(e) {
            var t, i, n, a = Ut.exec(e._i.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, ""));
            if (a) {
                var o = ue(a[4], a[3], a[2], a[5], a[6], a[7]);
                if (t = a[1], i = o, n = e, t && Wt.indexOf(t) !== new Date(i[0], i[1], i[2]).getDay() && (c(n).weekdayMismatch = !0, !(n._isValid = !1))) return;
                e._a = o, e._tzm = function (e, t, i) {
                    if (e) return jt[e];
                    if (t) return 0;
                    var n = parseInt(i, 10),
                        a = n % 100;
                    return (n - a) / 100 * 60 + a
                }(a[8], a[9], a[10]), e._d = q.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), c(e).rfc2822 = !0
            } else e._isValid = !1
        }

        function ge(t) {
            if (t._f !== e.ISO_8601)
                if (t._f !== e.RFC_2822) {
                    t._a = [], c(t).empty = !0;
                    var i, n, a, o, r, l, d, h, u = "" + t._i,
                        m = u.length,
                        g = 0;
                    for (a = W(t._f, t._locale).match(st) || [], i = 0; i < a.length; i++) o = a[i], (n = (u.match(M(o, t)) || [])[0]) && (0 < (r = u.substr(0, u.indexOf(n))).length && c(t).unusedInput.push(r), u = u.slice(u.indexOf(n) + n.length), g += n.length), ct[o] ? (n ? c(t).empty = !1 : c(t).unusedTokens.push(o), l = o, h = t, null != (d = n) && s(kt, l) && kt[l](d, h._a, h, l)) : t._strict && !n && c(t).unusedTokens.push(o);
                    c(t).charsLeftOver = m - g, 0 < u.length && c(t).unusedInput.push(u), t._a[3] <= 12 && !0 === c(t).bigHour && 0 < t._a[3] && (c(t).bigHour = void 0), c(t).parsedDateParts = t._a.slice(0), c(t).meridiem = t._meridiem, t._a[3] = function (e, t, i) {
                        var n;
                        return null == i ? t : null != e.meridiemHour ? e.meridiemHour(t, i) : (null != e.isPM && ((n = e.isPM(i)) && t < 12 && (t += 12), n || 12 !== t || (t = 0)), t)
                    }(t._locale, t._a[3], t._meridiem), ce(t), le(t)
                } else me(t);
            else he(t)
        }

        function fe(s) {
            var d, p, v, y, w = s._i,
                S = s._f;
            return s._locale = s._locale || se(s._l), null === w || void 0 === S && "" === w ? u({
                nullInput: !0
            }) : ("string" == typeof w && (s._i = w = s._locale.preparse(w)), f(w) ? new g(le(w)) : (o(w) ? s._d = w : t(S) ? function (e) {
                var t, i, n, a, o;
                if (0 === e._f.length) return c(e).invalidFormat = !0, e._d = new Date(NaN);
                for (a = 0; a < e._f.length; a++) o = 0, t = m({}, e), null != e._useUTC && (t._useUTC = e._useUTC), t._f = e._f[a], ge(t), h(t) && (o += c(t).charsLeftOver, o += 10 * c(t).unusedTokens.length, c(t).score = o, (null == n || o < n) && (n = o, i = t));
                l(e, i || t)
            }(s) : S ? ge(s) : n(p = (d = s)._i) ? d._d = new Date(e.now()) : o(p) ? d._d = new Date(p.valueOf()) : "string" == typeof p ? (v = d, null === (y = Ht.exec(v._i)) ? (he(v), !1 === v._isValid && (delete v._isValid, me(v), !1 === v._isValid && (delete v._isValid, e.createFromInputFallback(v)))) : v._d = new Date(+y[1])) : t(p) ? (d._a = r(p.slice(0), function (e) {
                return parseInt(e, 10)
            }), ce(d)) : i(p) ? function (e) {
                if (!e._d) {
                    var t = A(e._i);
                    e._a = r([t.year, t.month, t.day || t.date, t.hour, t.minute, t.second, t.millisecond], function (e) {
                        return e && parseInt(e, 10)
                    }), ce(e)
                }
            }(d) : a(p) ? d._d = new Date(p) : e.createFromInputFallback(d), h(s) || (s._d = null), s))
        }

        function pe(e, n, a, o, r) {
            var s, l = {};
            return !0 !== a && !1 !== a || (o = a, a = void 0), (i(e) && function (e) {
                if (Object.getOwnPropertyNames) return 0 === Object.getOwnPropertyNames(e).length;
                var t;
                for (t in e)
                    if (e.hasOwnProperty(t)) return !1;
                return !0
            }(e) || t(e) && 0 === e.length) && (e = void 0), l._isAMomentObject = !0, l._useUTC = l._isUTC = r, l._l = a, l._i = e, l._f = n, l._strict = o, (s = new g(le(fe(l))))._nextDay && (s.add(1, "d"), s._nextDay = void 0), s
        }

        function ve(e, t, i, n) {
            return pe(e, t, i, n, !1)
        }

        function ye(e, i) {
            var n, a;
            if (1 === i.length && t(i[0]) && (i = i[0]), !i.length) return ve();
            for (n = i[0], a = 1; a < i.length; ++a) i[a].isValid() && !i[a][e](n) || (n = i[a]);
            return n
        }

        function we(e) {
            var t = A(e),
                i = t.year || 0,
                n = t.quarter || 0,
                a = t.month || 0,
                o = t.week || t.isoWeek || 0,
                r = t.day || 0,
                s = t.hour || 0,
                l = t.minute || 0,
                d = t.second || 0,
                c = t.millisecond || 0;
            this._isValid = function (e) {
                for (var t in e)
                    if (-1 === xt.call(Kt, t) || null != e[t] && isNaN(e[t])) return !1;
                for (var i = !1, n = 0; n < Kt.length; ++n)
                    if (e[Kt[n]]) {
                        if (i) return !1;
                        parseFloat(e[Kt[n]]) !== v(e[Kt[n]]) && (i = !0)
                    }
                return !0
            }(t), this._milliseconds = +c + 1e3 * d + 6e4 * l + 1e3 * s * 60 * 60, this._days = +r + 7 * o, this._months = +a + 3 * n + 12 * i, this._data = {}, this._locale = se(), this._bubble()
        }

        function Se(e) {
            return e instanceof we
        }

        function be(e) {
            return e < 0 ? -1 * Math.round(-1 * e) : Math.round(e)
        }

        function Ce(e, t) {
            P(e, 0, 0, function () {
                var e = this.utcOffset(),
                    i = "+";
                return e < 0 && (e = -e, i = "-"), i + I(~~(e / 60), 2) + t + I(~~e % 60, 2)
            })
        }

        function De(e, t) {
            var i = (t || "").match(e);
            if (null === i) return null;
            var n = ((i[i.length - 1] || []) + "").match(/([\+\-]|\d\d)/gi) || ["-", 0, 0],
                a = 60 * n[1] + v(n[2]);
            return 0 === a ? 0 : "+" === n[0] ? a : -a
        }

        function Te(t, i) {
            var n, a;
            return i._isUTC ? (n = i.clone(), a = (f(t) || o(t) ? t.valueOf() : ve(t).valueOf()) - n.valueOf(), n._d.setTime(n._d.valueOf() + a), e.updateOffset(n, !1), n) : ve(t).local()
        }

        function ke(e) {
            return 15 * -Math.round(e._d.getTimezoneOffset() / 15)
        }

        function xe() {
            return !!this.isValid() && this._isUTC && 0 === this._offset
        }

        function Ae(e, t) {
            var i, n, o, r = e,
                l = null;
            return Se(e) ? r = {
                ms: e._milliseconds,
                d: e._days,
                M: e._months
            } : a(e) ? (r = {}, t ? r[t] = e : r.milliseconds = e) : (l = zt.exec(e)) ? (i = "-" === l[1] ? -1 : 1, r = {
                y: 0,
                d: v(l[2]) * i,
                h: v(l[3]) * i,
                m: v(l[4]) * i,
                s: v(l[5]) * i,
                ms: v(be(1e3 * l[6])) * i
            }) : (l = Xt.exec(e)) ? (i = "-" === l[1] ? -1 : 1, r = {
                y: _e(l[2], i),
                M: _e(l[3], i),
                w: _e(l[4], i),
                d: _e(l[5], i),
                h: _e(l[6], i),
                m: _e(l[7], i),
                s: _e(l[8], i)
            }) : null == r ? r = {} : "object" == typeof r && ("from" in r || "to" in r) && (o = function (e, t) {
                var i;
                return e.isValid() && t.isValid() ? (t = Te(t, e), e.isBefore(t) ? i = Ie(e, t) : ((i = Ie(t, e)).milliseconds = -i.milliseconds, i.months = -i.months), i) : {
                    milliseconds: 0,
                    months: 0
                }
            }(ve(r.from), ve(r.to)), (r = {}).ms = o.milliseconds, r.M = o.months), n = new we(r), Se(e) && s(e, "_locale") && (n._locale = e._locale), n
        }

        function _e(e, t) {
            var i = e && parseFloat(e.replace(",", "."));
            return (isNaN(i) ? 0 : i) * t
        }

        function Ie(e, t) {
            var i = {};
            return i.months = t.month() - e.month() + 12 * (t.year() - e.year()), e.clone().add(i.months, "M").isAfter(t) && --i.months, i.milliseconds = +t - +e.clone().add(i.months, "M"), i
        }

        function Pe(e, t) {
            return function (i, n) {
                var a;
                return null === n || isNaN(+n) || (b(t, "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), a = i, i = n, n = a), Ne(this, Ae(i = "string" == typeof i ? +i : i, n), e), this
            }
        }

        function Ne(t, i, n, a) {
            var o = i._milliseconds,
                r = be(i._days),
                s = be(i._months);
            t.isValid() && (a = null == a || a, s && H(t, B(t, "Month") + s * n), r && V(t, "Date", B(t, "Date") + r * n), o && t._d.setTime(t._d.valueOf() + o * n), a && e.updateOffset(t, r || s))
        }

        function We(e, t) {
            var i = 12 * (t.year() - e.year()) + (t.month() - e.month()),
                n = e.clone().add(i, "months");
            return -(i + (t - n < 0 ? (t - n) / (n - e.clone().add(i - 1, "months")) : (t - n) / (e.clone().add(i + 1, "months") - n))) || 0
        }

        function Fe(e) {
            var t;
            return void 0 === e ? this._locale._abbr : (null != (t = se(e)) && (this._locale = t), this)
        }

        function Me() {
            return this._locale
        }

        function Le(e, t) {
            return (e % t + t) % t
        }

        function Oe(e, t, i) {
            return e < 100 && 0 <= e ? new Date(e + 400, t, i) - ti : new Date(e, t, i).valueOf()
        }

        function Ee(e, t, i) {
            return e < 100 && 0 <= e ? Date.UTC(e + 400, t, i) - ti : Date.UTC(e, t, i)
        }

        function Re(e, t) {
            P(0, [e, e.length], 0, t)
        }

        function Ge(e, t, i, n, a) {
            var o;
            return null == e ? z(this, n, a).year : ((o = X(e, n, a)) < t && (t = o), function (e, t, i, n, a) {
                var o = K(e, t, i, n, a),
                    r = q(o.year, 0, o.dayOfYear);
                return this.year(r.getUTCFullYear()), this.month(r.getUTCMonth()), this.date(r.getUTCDate()), this
            }.call(this, e, t, i, n, a))
        }

        function Ye(e, t) {
            t[6] = v(1e3 * ("0." + e))
        }

        function Be(e) {
            return e
        }

        function Ve(e, t, i, n) {
            var a = se(),
                o = d().set(n, t);
            return a[i](o, e)
        }

        function $e(e, t, i) {
            if (a(e) && (t = e, e = void 0), e = e || "", null != t) return Ve(e, t, i, "month");
            var n, o = [];
            for (n = 0; n < 12; n++) o[n] = Ve(e, n, i, "month");
            return o
        }

        function He(e, t, i, n) {
            "boolean" == typeof e ? a(t) && (i = t, t = void 0) : (t = e, e = !1, a(i = t) && (i = t, t = void 0)), t = t || "";
            var o, r = se(),
                s = e ? r._week.dow : 0;
            if (null != i) return Ve(t, (i + s) % 7, n, "day");
            var l = [];
            for (o = 0; o < 7; o++) l[o] = Ve(t, (o + s) % 7, n, "day");
            return l
        }

        function Ue(e, t, i, n) {
            var a = Ae(t, i);
            return e._milliseconds += n * a._milliseconds, e._days += n * a._days, e._months += n * a._months, e._bubble()
        }

        function je(e) {
            return e < 0 ? Math.floor(e) : Math.ceil(e)
        }

        function qe(e) {
            return 4800 * e / 146097
        }

        function Je(e) {
            return 146097 * e / 4800
        }

        function Ke(e) {
            return function () {
                return this.as(e)
            }
        }

        function ze(e) {
            return function () {
                return this.isValid() ? this._data[e] : NaN
            }
        }

        function Xe(e) {
            return (0 < e) - (e < 0) || +e
        }

        function Ze() {
            if (!this.isValid()) return this.localeData().invalidDate();
            var e, t, i = _i(this._milliseconds) / 1e3,
                n = _i(this._days),
                a = _i(this._months);
            t = p((e = p(i / 60)) / 60), i %= 60, e %= 60;
            var o = p(a / 12),
                r = a %= 12,
                s = n,
                l = t,
                d = e,
                c = i ? i.toFixed(3).replace(/\.?0+$/, "") : "",
                h = this.asSeconds();
            if (!h) return "P0D";
            var u = h < 0 ? "-" : "",
                m = Xe(this._months) !== Xe(h) ? "-" : "",
                g = Xe(this._days) !== Xe(h) ? "-" : "",
                f = Xe(this._milliseconds) !== Xe(h) ? "-" : "";
            return u + "P" + (o ? m + o + "Y" : "") + (r ? m + r + "M" : "") + (s ? g + s + "D" : "") + (l || d || c ? "T" : "") + (l ? f + l + "H" : "") + (d ? f + d + "M" : "") + (c ? f + c + "S" : "")
        }
        var Qe, et;
        et = Array.prototype.some ? Array.prototype.some : function (e) {
            for (var t = Object(this), i = t.length >>> 0, n = 0; n < i; n++)
                if (n in t && e.call(this, t[n], n, t)) return !0;
            return !1
        };
        var tt, it = e.momentProperties = [],
            nt = !1,
            at = {};
        e.suppressDeprecationWarnings = !1, e.deprecationHandler = null, tt = Object.keys ? Object.keys : function (e) {
            var t, i = [];
            for (t in e) s(e, t) && i.push(t);
            return i
        };
        var ot = {},
            rt = {},
            st = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            lt = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            dt = {},
            ct = {},
            ht = /\d\d/,
            ut = /\d{3}/,
            mt = /\d{4}/,
            gt = /[+-]?\d{6}/,
            ft = /\d\d?/,
            pt = /\d\d\d\d?/,
            vt = /\d\d\d\d\d\d?/,
            yt = /\d{1,3}/,
            wt = /\d{1,4}/,
            St = /[+-]?\d{1,6}/,
            bt = /[+-]?\d+/,
            Ct = /Z|[+-]\d\d(?::?\d\d)?/gi,
            Dt = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            Tt = {},
            kt = {};
        P("Y", 0, 0, function () {
            var e = this.year();
            return e <= 9999 ? "" + e : "+" + e
        }), P(0, ["YY", 2], 0, function () {
            return this.year() % 100
        }), P(0, ["YYYY", 4], 0, "year"), P(0, ["YYYYY", 5], 0, "year"), P(0, ["YYYYYY", 6, !0], 0, "year"), k("year", "y"), _("year", 1), F("Y", bt), F("YY", ft, ht), F("YYYY", wt, mt), F("YYYYY", St, gt), F("YYYYYY", St, gt), O(["YYYYY", "YYYYYY"], 0), O("YYYY", function (t, i) {
            i[0] = 2 === t.length ? e.parseTwoDigitYear(t) : v(t)
        }), O("YY", function (t, i) {
            i[0] = e.parseTwoDigitYear(t)
        }), O("Y", function (e, t) {
            t[0] = parseInt(e, 10)
        }), e.parseTwoDigitYear = function (e) {
            return v(e) + (68 < v(e) ? 1900 : 2e3)
        };
        var xt, At = Y("FullYear", !0);
        xt = Array.prototype.indexOf ? Array.prototype.indexOf : function (e) {
            var t;
            for (t = 0; t < this.length; ++t)
                if (this[t] === e) return t;
            return -1
        }, P("M", ["MM", 2], "Mo", function () {
            return this.month() + 1
        }), P("MMM", 0, 0, function (e) {
            return this.localeData().monthsShort(this, e)
        }), P("MMMM", 0, 0, function (e) {
            return this.localeData().months(this, e)
        }), k("month", "M"), _("month", 8), F("M", ft), F("MM", ft, ht), F("MMM", function (e, t) {
            return t.monthsShortRegex(e)
        }), F("MMMM", function (e, t) {
            return t.monthsRegex(e)
        }), O(["M", "MM"], function (e, t) {
            t[1] = v(e) - 1
        }), O(["MMM", "MMMM"], function (e, t, i, n) {
            var a = i._locale.monthsParse(e, n, i._strict);
            null != a ? t[1] = a : c(i).invalidMonth = e
        });
        var _t = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            It = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            Pt = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
        P("w", ["ww", 2], "wo", "week"), P("W", ["WW", 2], "Wo", "isoWeek"), k("week", "w"), k("isoWeek", "W"), _("week", 5), _("isoWeek", 5), F("w", ft), F("ww", ft, ht), F("W", ft), F("WW", ft, ht), E(["w", "ww", "W", "WW"], function (e, t, i, n) {
            t[n.substr(0, 1)] = v(e)
        }), P("d", 0, "do", "day"), P("dd", 0, 0, function (e) {
            return this.localeData().weekdaysMin(this, e)
        }), P("ddd", 0, 0, function (e) {
            return this.localeData().weekdaysShort(this, e)
        }), P("dddd", 0, 0, function (e) {
            return this.localeData().weekdays(this, e)
        }), P("e", 0, 0, "weekday"), P("E", 0, 0, "isoWeekday"), k("day", "d"), k("weekday", "e"), k("isoWeekday", "E"), _("day", 11), _("weekday", 11), _("isoWeekday", 11), F("d", ft), F("e", ft), F("E", ft), F("dd", function (e, t) {
            return t.weekdaysMinRegex(e)
        }), F("ddd", function (e, t) {
            return t.weekdaysShortRegex(e)
        }), F("dddd", function (e, t) {
            return t.weekdaysRegex(e)
        }), E(["dd", "ddd", "dddd"], function (e, t, i, n) {
            var a = i._locale.weekdaysParse(e, n, i._strict);
            null != a ? t.d = a : c(i).invalidWeekday = e
        }), E(["d", "e", "E"], function (e, t, i, n) {
            t[n] = v(e)
        });
        var Nt = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            Wt = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            Ft = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
        P("H", ["HH", 2], 0, "hour"), P("h", ["hh", 2], 0, ee), P("k", ["kk", 2], 0, function () {
            return this.hours() || 24
        }), P("hmm", 0, 0, function () {
            return "" + ee.apply(this) + I(this.minutes(), 2)
        }), P("hmmss", 0, 0, function () {
            return "" + ee.apply(this) + I(this.minutes(), 2) + I(this.seconds(), 2)
        }), P("Hmm", 0, 0, function () {
            return "" + this.hours() + I(this.minutes(), 2)
        }), P("Hmmss", 0, 0, function () {
            return "" + this.hours() + I(this.minutes(), 2) + I(this.seconds(), 2)
        }), te("a", !0), te("A", !1), k("hour", "h"), _("hour", 13), F("a", ie), F("A", ie), F("H", ft), F("h", ft), F("k", ft), F("HH", ft, ht), F("hh", ft, ht), F("kk", ft, ht), F("hmm", pt), F("hmmss", vt), F("Hmm", pt), F("Hmmss", vt), O(["H", "HH"], 3), O(["k", "kk"], function (e, t, i) {
            var n = v(e);
            t[3] = 24 === n ? 0 : n
        }), O(["a", "A"], function (e, t, i) {
            i._isPm = i._locale.isPM(e), i._meridiem = e
        }), O(["h", "hh"], function (e, t, i) {
            t[3] = v(e), c(i).bigHour = !0
        }), O("hmm", function (e, t, i) {
            var n = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n)), c(i).bigHour = !0
        }), O("hmmss", function (e, t, i) {
            var n = e.length - 4,
                a = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n, 2)), t[5] = v(e.substr(a)), c(i).bigHour = !0
        }), O("Hmm", function (e, t, i) {
            var n = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n))
        }), O("Hmmss", function (e, t, i) {
            var n = e.length - 4,
                a = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n, 2)), t[5] = v(e.substr(a))
        });
        var Mt, Lt = Y("Hours", !0),
            Ot = {
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                longDateFormat: {
                    LTS: "h:mm:ss A",
                    LT: "h:mm A",
                    L: "MM/DD/YYYY",
                    LL: "MMMM D, YYYY",
                    LLL: "MMMM D, YYYY h:mm A",
                    LLLL: "dddd, MMMM D, YYYY h:mm A"
                },
                invalidDate: "Invalid date",
                ordinal: "%d",
                dayOfMonthOrdinalParse: /\d{1,2}/,
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                months: It,
                monthsShort: Pt,
                week: {
                    dow: 0,
                    doy: 6
                },
                weekdays: Nt,
                weekdaysMin: Ft,
                weekdaysShort: Wt,
                meridiemParse: /[ap]\.?m?\.?/i
            },
            Et = {},
            Rt = {},
            Gt = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            Yt = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            Bt = /Z|[+-]\d\d(?::?\d\d)?/,
            Vt = [
                ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
                ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
                ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
                ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
                ["YYYY-DDD", /\d{4}-\d{3}/],
                ["YYYY-MM", /\d{4}-\d\d/, !1],
                ["YYYYYYMMDD", /[+-]\d{10}/],
                ["YYYYMMDD", /\d{8}/],
                ["GGGG[W]WWE", /\d{4}W\d{3}/],
                ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
                ["YYYYDDD", /\d{7}/]
            ],
            $t = [
                ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
                ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
                ["HH:mm:ss", /\d\d:\d\d:\d\d/],
                ["HH:mm", /\d\d:\d\d/],
                ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
                ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
                ["HHmmss", /\d\d\d\d\d\d/],
                ["HHmm", /\d\d\d\d/],
                ["HH", /\d\d/]
            ],
            Ht = /^\/?Date\((\-?\d+)/i,
            Ut = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            jt = {
                UT: 0,
                GMT: 0,
                EDT: -240,
                EST: -300,
                CDT: -300,
                CST: -360,
                MDT: -360,
                MST: -420,
                PDT: -420,
                PST: -480
            };
        e.createFromInputFallback = S("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function (e) {
            e._d = new Date(e._i + (e._useUTC ? " UTC" : ""))
        }), e.ISO_8601 = function () { }, e.RFC_2822 = function () { };
        var qt = S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
            var e = ve.apply(null, arguments);
            return this.isValid() && e.isValid() ? e < this ? this : e : u()
        }),
            Jt = S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
                var e = ve.apply(null, arguments);
                return this.isValid() && e.isValid() ? this < e ? this : e : u()
            }),
            Kt = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];
        Ce("Z", ":"), Ce("ZZ", ""), F("Z", Ct), F("ZZ", Ct), O(["Z", "ZZ"], function (e, t, i) {
            i._useUTC = !0, i._tzm = De(Ct, e)
        });
        e.updateOffset = function () { };
        var zt = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,
            Xt = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
        Ae.fn = we.prototype, Ae.invalid = function () {
            return Ae(NaN)
        };
        var Zt = Pe(1, "add"),
            Qt = Pe(-1, "subtract");
        e.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", e.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
        var ei = S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function (e) {
            return void 0 === e ? this.localeData() : this.locale(e)
        }),
            ti = 126227808e5;
        P(0, ["gg", 2], 0, function () {
            return this.weekYear() % 100
        }), P(0, ["GG", 2], 0, function () {
            return this.isoWeekYear() % 100
        }), Re("gggg", "weekYear"), Re("ggggg", "weekYear"), Re("GGGG", "isoWeekYear"), Re("GGGGG", "isoWeekYear"), k("weekYear", "gg"), k("isoWeekYear", "GG"), _("weekYear", 1), _("isoWeekYear", 1), F("G", bt), F("g", bt), F("GG", ft, ht), F("gg", ft, ht), F("GGGG", wt, mt), F("gggg", wt, mt), F("GGGGG", St, gt), F("ggggg", St, gt), E(["gggg", "ggggg", "GGGG", "GGGGG"], function (e, t, i, n) {
            t[n.substr(0, 2)] = v(e)
        }), E(["gg", "GG"], function (t, i, n, a) {
            i[a] = e.parseTwoDigitYear(t)
        }), P("Q", 0, "Qo", "quarter"), k("quarter", "Q"), _("quarter", 7), F("Q", /\d/), O("Q", function (e, t) {
            t[1] = 3 * (v(e) - 1)
        }), P("D", ["DD", 2], "Do", "date"), k("date", "D"), _("date", 9), F("D", ft), F("DD", ft, ht), F("Do", function (e, t) {
            return e ? t._dayOfMonthOrdinalParse || t._ordinalParse : t._dayOfMonthOrdinalParseLenient
        }), O(["D", "DD"], 2), O("Do", function (e, t) {
            t[2] = v(e.match(ft)[0])
        });
        var ii = Y("Date", !0);
        P("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), k("dayOfYear", "DDD"), _("dayOfYear", 4), F("DDD", yt), F("DDDD", ut), O(["DDD", "DDDD"], function (e, t, i) {
            i._dayOfYear = v(e)
        }), P("m", ["mm", 2], 0, "minute"), k("minute", "m"), _("minute", 14), F("m", ft), F("mm", ft, ht), O(["m", "mm"], 4);
        var ni = Y("Minutes", !1);
        P("s", ["ss", 2], 0, "second"), k("second", "s"), _("second", 15), F("s", ft), F("ss", ft, ht), O(["s", "ss"], 5);
        var ai, oi = Y("Seconds", !1);
        for (P("S", 0, 0, function () {
            return ~~(this.millisecond() / 100)
        }), P(0, ["SS", 2], 0, function () {
            return ~~(this.millisecond() / 10)
        }), P(0, ["SSS", 3], 0, "millisecond"), P(0, ["SSSS", 4], 0, function () {
            return 10 * this.millisecond()
        }), P(0, ["SSSSS", 5], 0, function () {
            return 100 * this.millisecond()
        }), P(0, ["SSSSSS", 6], 0, function () {
            return 1e3 * this.millisecond()
        }), P(0, ["SSSSSSS", 7], 0, function () {
            return 1e4 * this.millisecond()
        }), P(0, ["SSSSSSSS", 8], 0, function () {
            return 1e5 * this.millisecond()
        }), P(0, ["SSSSSSSSS", 9], 0, function () {
            return 1e6 * this.millisecond()
        }), k("millisecond", "ms"), _("millisecond", 16), F("S", yt, /\d/), F("SS", yt, ht), F("SSS", yt, ut), ai = "SSSS"; ai.length <= 9; ai += "S") F(ai, /\d+/);
        for (ai = "S"; ai.length <= 9; ai += "S") O(ai, Ye);
        var ri = Y("Milliseconds", !1);
        P("z", 0, 0, "zoneAbbr"), P("zz", 0, 0, "zoneName");
        var si = g.prototype;
        si.add = Zt, si.calendar = function (t, i) {
            var n = t || ve(),
                a = Te(n, this).startOf("day"),
                o = e.calendarFormat(this, a) || "sameElse",
                r = i && (C(i[o]) ? i[o].call(this, n) : i[o]);
            return this.format(r || this.localeData().calendar(o, this, ve(n)))
        }, si.clone = function () {
            return new g(this)
        }, si.diff = function (e, t, i) {
            var n, a, o;
            if (!this.isValid()) return NaN;
            if (!(n = Te(e, this)).isValid()) return NaN;
            switch (a = 6e4 * (n.utcOffset() - this.utcOffset()), t = x(t)) {
                case "year":
                    o = We(this, n) / 12;
                    break;
                case "month":
                    o = We(this, n);
                    break;
                case "quarter":
                    o = We(this, n) / 3;
                    break;
                case "second":
                    o = (this - n) / 1e3;
                    break;
                case "minute":
                    o = (this - n) / 6e4;
                    break;
                case "hour":
                    o = (this - n) / 36e5;
                    break;
                case "day":
                    o = (this - n - a) / 864e5;
                    break;
                case "week":
                    o = (this - n - a) / 6048e5;
                    break;
                default:
                    o = this - n
            }
            return i ? o : p(o)
        }, si.endOf = function (t) {
            var i;
            if (void 0 === (t = x(t)) || "millisecond" === t || !this.isValid()) return this;
            var n = this._isUTC ? Ee : Oe;
            switch (t) {
                case "year":
                    i = n(this.year() + 1, 0, 1) - 1;
                    break;
                case "quarter":
                    i = n(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                    break;
                case "month":
                    i = n(this.year(), this.month() + 1, 1) - 1;
                    break;
                case "week":
                    i = n(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                    break;
                case "isoWeek":
                    i = n(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                    break;
                case "day":
                case "date":
                    i = n(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case "hour":
                    i = this._d.valueOf(), i += 36e5 - Le(i + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5) - 1;
                    break;
                case "minute":
                    i = this._d.valueOf(), i += 6e4 - Le(i, 6e4) - 1;
                    break;
                case "second":
                    i = this._d.valueOf(), i += 1e3 - Le(i, 1e3) - 1
            }
            return this._d.setTime(i), e.updateOffset(this, !0), this
        }, si.format = function (t) {
            t || (t = this.isUtc() ? e.defaultFormatUtc : e.defaultFormat);
            var i = N(this, t);
            return this.localeData().postformat(i)
        }, si.from = function (e, t) {
            return this.isValid() && (f(e) && e.isValid() || ve(e).isValid()) ? Ae({
                to: this,
                from: e
            }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate()
        }, si.fromNow = function (e) {
            return this.from(ve(), e)
        }, si.to = function (e, t) {
            return this.isValid() && (f(e) && e.isValid() || ve(e).isValid()) ? Ae({
                from: this,
                to: e
            }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate()
        }, si.toNow = function (e) {
            return this.to(ve(), e)
        }, si.get = function (e) {
            return C(this[e = x(e)]) ? this[e]() : this
        }, si.invalidAt = function () {
            return c(this).overflow
        }, si.isAfter = function (e, t) {
            var i = f(e) ? e : ve(e);
            return !(!this.isValid() || !i.isValid()) && ("millisecond" === (t = x(t) || "millisecond") ? this.valueOf() > i.valueOf() : i.valueOf() < this.clone().startOf(t).valueOf())
        }, si.isBefore = function (e, t) {
            var i = f(e) ? e : ve(e);
            return !(!this.isValid() || !i.isValid()) && ("millisecond" === (t = x(t) || "millisecond") ? this.valueOf() < i.valueOf() : this.clone().endOf(t).valueOf() < i.valueOf())
        }, si.isBetween = function (e, t, i, n) {
            var a = f(e) ? e : ve(e),
                o = f(t) ? t : ve(t);
            return !!(this.isValid() && a.isValid() && o.isValid()) && ("(" === (n = n || "()")[0] ? this.isAfter(a, i) : !this.isBefore(a, i)) && (")" === n[1] ? this.isBefore(o, i) : !this.isAfter(o, i))
        }, si.isSame = function (e, t) {
            var i, n = f(e) ? e : ve(e);
            return !(!this.isValid() || !n.isValid()) && ("millisecond" === (t = x(t) || "millisecond") ? this.valueOf() === n.valueOf() : (i = n.valueOf(), this.clone().startOf(t).valueOf() <= i && i <= this.clone().endOf(t).valueOf()))
        }, si.isSameOrAfter = function (e, t) {
            return this.isSame(e, t) || this.isAfter(e, t)
        }, si.isSameOrBefore = function (e, t) {
            return this.isSame(e, t) || this.isBefore(e, t)
        }, si.isValid = function () {
            return h(this)
        }, si.lang = ei, si.locale = Fe, si.localeData = Me, si.max = Jt, si.min = qt, si.parsingFlags = function () {
            return l({}, c(this))
        }, si.set = function (e, t) {
            if ("object" == typeof e)
                for (var i = function (e) {
                    var t = [];
                    for (var i in e) t.push({
                        unit: i,
                        priority: rt[i]
                    });
                    return t.sort(function (e, t) {
                        return e.priority - t.priority
                    }), t
                }(e = A(e)), n = 0; n < i.length; n++) this[i[n].unit](e[i[n].unit]);
            else if (C(this[e = x(e)])) return this[e](t);
            return this
        }, si.startOf = function (t) {
            var i;
            if (void 0 === (t = x(t)) || "millisecond" === t || !this.isValid()) return this;
            var n = this._isUTC ? Ee : Oe;
            switch (t) {
                case "year":
                    i = n(this.year(), 0, 1);
                    break;
                case "quarter":
                    i = n(this.year(), this.month() - this.month() % 3, 1);
                    break;
                case "month":
                    i = n(this.year(), this.month(), 1);
                    break;
                case "week":
                    i = n(this.year(), this.month(), this.date() - this.weekday());
                    break;
                case "isoWeek":
                    i = n(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                    break;
                case "day":
                case "date":
                    i = n(this.year(), this.month(), this.date());
                    break;
                case "hour":
                    i = this._d.valueOf(), i -= Le(i + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5);
                    break;
                case "minute":
                    i = this._d.valueOf(), i -= Le(i, 6e4);
                    break;
                case "second":
                    i = this._d.valueOf(), i -= Le(i, 1e3)
            }
            return this._d.setTime(i), e.updateOffset(this, !0), this
        }, si.subtract = Qt, si.toArray = function () {
            var e = this;
            return [e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond()]
        }, si.toObject = function () {
            var e = this;
            return {
                years: e.year(),
                months: e.month(),
                date: e.date(),
                hours: e.hours(),
                minutes: e.minutes(),
                seconds: e.seconds(),
                milliseconds: e.milliseconds()
            }
        }, si.toDate = function () {
            return new Date(this.valueOf())
        }, si.toISOString = function (e) {
            if (!this.isValid()) return null;
            var t = !0 !== e,
                i = t ? this.clone().utc() : this;
            return i.year() < 0 || 9999 < i.year() ? N(i, t ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : C(Date.prototype.toISOString) ? t ? this.toDate().toISOString() : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3).toISOString().replace("Z", N(i, "Z")) : N(i, t ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ")
        }, si.inspect = function () {
            if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
            var e = "moment",
                t = "";
            this.isLocal() || (e = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", t = "Z");
            var i = "[" + e + '("]',
                n = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY",
                a = t + '[")]';
            return this.format(i + n + "-MM-DD[T]HH:mm:ss.SSS" + a)
        }, si.toJSON = function () {
            return this.isValid() ? this.toISOString() : null
        }, si.toString = function () {
            return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
        }, si.unix = function () {
            return Math.floor(this.valueOf() / 1e3)
        }, si.valueOf = function () {
            return this._d.valueOf() - 6e4 * (this._offset || 0)
        }, si.creationData = function () {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict
            }
        }, si.year = At, si.isLeapYear = function () {
            return G(this.year())
        }, si.weekYear = function (e) {
            return Ge.call(this, e, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
        }, si.isoWeekYear = function (e) {
            return Ge.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4)
        }, si.quarter = si.quarters = function (e) {
            return null == e ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e - 1) + this.month() % 3)
        }, si.month = U, si.daysInMonth = function () {
            return $(this.year(), this.month())
        }, si.week = si.weeks = function (e) {
            var t = this.localeData().week(this);
            return null == e ? t : this.add(7 * (e - t), "d")
        }, si.isoWeek = si.isoWeeks = function (e) {
            var t = z(this, 1, 4).week;
            return null == e ? t : this.add(7 * (e - t), "d")
        }, si.weeksInYear = function () {
            var e = this.localeData()._week;
            return X(this.year(), e.dow, e.doy)
        }, si.isoWeeksInYear = function () {
            return X(this.year(), 1, 4)
        }, si.date = ii, si.day = si.days = function (e) {
            if (!this.isValid()) return null != e ? this : NaN;
            var t, i, n = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            return null != e ? (t = e, i = this.localeData(), e = "string" != typeof t ? t : isNaN(t) ? "number" == typeof (t = i.weekdaysParse(t)) ? t : null : parseInt(t, 10), this.add(e - n, "d")) : n
        }, si.weekday = function (e) {
            if (!this.isValid()) return null != e ? this : NaN;
            var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return null == e ? t : this.add(e - t, "d")
        }, si.isoWeekday = function (e) {
            if (!this.isValid()) return null != e ? this : NaN;
            if (null == e) return this.day() || 7;
            var t, i, n = (t = e, i = this.localeData(), "string" == typeof t ? i.weekdaysParse(t) % 7 || 7 : isNaN(t) ? null : t);
            return this.day(this.day() % 7 ? n : n - 7)
        }, si.dayOfYear = function (e) {
            var t = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
            return null == e ? t : this.add(e - t, "d")
        }, si.hour = si.hours = Lt, si.minute = si.minutes = ni, si.second = si.seconds = oi, si.millisecond = si.milliseconds = ri, si.utcOffset = function (t, i, n) {
            var a, o = this._offset || 0;
            if (!this.isValid()) return null != t ? this : NaN;
            if (null == t) return this._isUTC ? o : ke(this);
            if ("string" == typeof t) {
                if (null === (t = De(Ct, t))) return this
            } else Math.abs(t) < 16 && !n && (t *= 60);
            return !this._isUTC && i && (a = ke(this)), this._offset = t, this._isUTC = !0, null != a && this.add(a, "m"), o !== t && (!i || this._changeInProgress ? Ne(this, Ae(t - o, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, e.updateOffset(this, !0), this._changeInProgress = null)), this
        }, si.utc = function (e) {
            return this.utcOffset(0, e)
        }, si.local = function (e) {
            return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(ke(this), "m")), this
        }, si.parseZone = function () {
            if (null != this._tzm) this.utcOffset(this._tzm, !1, !0);
            else if ("string" == typeof this._i) {
                var e = De(/Z|[+-]\d\d:?\d\d/gi, this._i);
                null != e ? this.utcOffset(e) : this.utcOffset(0, !0)
            }
            return this
        }, si.hasAlignedHourOffset = function (e) {
            return !!this.isValid() && (e = e ? ve(e).utcOffset() : 0, (this.utcOffset() - e) % 60 == 0)
        }, si.isDST = function () {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
        }, si.isLocal = function () {
            return !!this.isValid() && !this._isUTC
        }, si.isUtcOffset = function () {
            return !!this.isValid() && this._isUTC
        }, si.isUtc = xe, si.isUTC = xe, si.zoneAbbr = function () {
            return this._isUTC ? "UTC" : ""
        }, si.zoneName = function () {
            return this._isUTC ? "Coordinated Universal Time" : ""
        }, si.dates = S("dates accessor is deprecated. Use date instead.", ii), si.months = S("months accessor is deprecated. Use month instead", U), si.years = S("years accessor is deprecated. Use year instead", At), si.zone = S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", function (e, t) {
            return null != e ? ("string" != typeof e && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset()
        }), si.isDSTShifted = S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", function () {
            if (!n(this._isDSTShifted)) return this._isDSTShifted;
            var e = {};
            if (m(e, this), (e = fe(e))._a) {
                var t = e._isUTC ? d(e._a) : ve(e._a);
                this._isDSTShifted = this.isValid() && 0 < y(e._a, t.toArray())
            } else this._isDSTShifted = !1;
            return this._isDSTShifted
        });
        var li = T.prototype;
        li.calendar = function (e, t, i) {
            var n = this._calendar[e] || this._calendar.sameElse;
            return C(n) ? n.call(t, i) : n
        }, li.longDateFormat = function (e) {
            var t = this._longDateFormat[e],
                i = this._longDateFormat[e.toUpperCase()];
            return t || !i ? t : (this._longDateFormat[e] = i.replace(/MMMM|MM|DD|dddd/g, function (e) {
                return e.slice(1)
            }), this._longDateFormat[e])
        }, li.invalidDate = function () {
            return this._invalidDate
        }, li.ordinal = function (e) {
            return this._ordinal.replace("%d", e)
        }, li.preparse = Be, li.postformat = Be, li.relativeTime = function (e, t, i, n) {
            var a = this._relativeTime[i];
            return C(a) ? a(e, t, i, n) : a.replace(/%d/i, e)
        }, li.pastFuture = function (e, t) {
            var i = this._relativeTime[0 < e ? "future" : "past"];
            return C(i) ? i(t) : i.replace(/%s/i, t)
        }, li.set = function (e) {
            var t, i;
            for (i in e) C(t = e[i]) ? this[i] = t : this["_" + i] = t;
            this._config = e, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source)
        }, li.months = function (e, i) {
            return e ? t(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || _t).test(i) ? "format" : "standalone"][e.month()] : t(this._months) ? this._months : this._months.standalone
        }, li.monthsShort = function (e, i) {
            return e ? t(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[_t.test(i) ? "format" : "standalone"][e.month()] : t(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone
        }, li.monthsParse = function (e, t, i) {
            var n, a, o;
            if (this._monthsParseExact) return function (e, t, i) {
                var n, a, o, r = e.toLocaleLowerCase();
                if (!this._monthsParse)
                    for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], n = 0; n < 12; ++n) o = d([2e3, n]), this._shortMonthsParse[n] = this.monthsShort(o, "").toLocaleLowerCase(), this._longMonthsParse[n] = this.months(o, "").toLocaleLowerCase();
                return i ? "MMM" === t ? -1 !== (a = xt.call(this._shortMonthsParse, r)) ? a : null : -1 !== (a = xt.call(this._longMonthsParse, r)) ? a : null : "MMM" === t ? -1 !== (a = xt.call(this._shortMonthsParse, r)) ? a : -1 !== (a = xt.call(this._longMonthsParse, r)) ? a : null : -1 !== (a = xt.call(this._longMonthsParse, r)) ? a : -1 !== (a = xt.call(this._shortMonthsParse, r)) ? a : null
            }.call(this, e, t, i);
            for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), n = 0; n < 12; n++) {
                if (a = d([2e3, n]), i && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp("^" + this.months(a, "").replace(".", "") + "$", "i"), this._shortMonthsParse[n] = new RegExp("^" + this.monthsShort(a, "").replace(".", "") + "$", "i")), i || this._monthsParse[n] || (o = "^" + this.months(a, "") + "|^" + this.monthsShort(a, ""), this._monthsParse[n] = new RegExp(o.replace(".", ""), "i")), i && "MMMM" === t && this._longMonthsParse[n].test(e)) return n;
                if (i && "MMM" === t && this._shortMonthsParse[n].test(e)) return n;
                if (!i && this._monthsParse[n].test(e)) return n
            }
        }, li.monthsRegex = function (e) {
            return this._monthsParseExact ? (s(this, "_monthsRegex") || j.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (s(this, "_monthsRegex") || (this._monthsRegex = Dt), this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex)
        }, li.monthsShortRegex = function (e) {
            return this._monthsParseExact ? (s(this, "_monthsRegex") || j.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (s(this, "_monthsShortRegex") || (this._monthsShortRegex = Dt), this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex)
        }, li.week = function (e) {
            return z(e, this._week.dow, this._week.doy).week
        }, li.firstDayOfYear = function () {
            return this._week.doy
        }, li.firstDayOfWeek = function () {
            return this._week.dow
        }, li.weekdays = function (e, i) {
            var n = t(this._weekdays) ? this._weekdays : this._weekdays[e && !0 !== e && this._weekdays.isFormat.test(i) ? "format" : "standalone"];
            return !0 === e ? Z(n, this._week.dow) : e ? n[e.day()] : n
        }, li.weekdaysMin = function (e) {
            return !0 === e ? Z(this._weekdaysMin, this._week.dow) : e ? this._weekdaysMin[e.day()] : this._weekdaysMin
        }, li.weekdaysShort = function (e) {
            return !0 === e ? Z(this._weekdaysShort, this._week.dow) : e ? this._weekdaysShort[e.day()] : this._weekdaysShort
        }, li.weekdaysParse = function (e, t, i) {
            var n, a, o;
            if (this._weekdaysParseExact) return function (e, t, i) {
                var n, a, o, r = e.toLocaleLowerCase();
                if (!this._weekdaysParse)
                    for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], n = 0; n < 7; ++n) o = d([2e3, 1]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(o, "").toLocaleLowerCase(), this._shortWeekdaysParse[n] = this.weekdaysShort(o, "").toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(o, "").toLocaleLowerCase();
                return i ? "dddd" === t ? -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : null : "ddd" === t ? -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : null : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : null : "dddd" === t ? -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : null : "ddd" === t ? -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : null : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : null
            }.call(this, e, t, i);
            for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [],
                this._fullWeekdaysParse = []), n = 0; n < 7; n++) {
                if (a = d([2e3, 1]).day(n), i && !this._fulWorkflowDesignerlWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp("^" + this.weekdays(a, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[n] = new RegExp("^" + this.weekdaysShort(a, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[n] = new RegExp("^" + this.weekdaysMin(a, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[n] || (o = "^" + this.weekdays(a, "") + "|^" + this.weekdaysShort(a, "") + "|^" + this.weekdaysMin(a, ""), this._weekdaysParse[n] = new RegExp(o.replace(".", ""), "i")), i && "dddd" === t && this._fullWeekdaysParse[n].test(e)) return n;
                if (i && "ddd" === t && this._shortWeekdaysParse[n].test(e)) return n;
                if (i && "dd" === t && this._minWeekdaysParse[n].test(e)) return n;
                if (!i && this._weekdaysParse[n].test(e)) return n
            }
        }, li.weekdaysRegex = function (e) {
            return this._weekdaysParseExact ? (s(this, "_weekdaysRegex") || Q.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (s(this, "_weekdaysRegex") || (this._weekdaysRegex = Dt), this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex)
        }, li.weekdaysShortRegex = function (e) {
            return this._weekdaysParseExact ? (s(this, "_weekdaysRegex") || Q.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (s(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Dt), this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex)
        }, li.weekdaysMinRegex = function (e) {
            return this._weekdaysParseExact ? (s(this, "_weekdaysRegex") || Q.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (s(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Dt), this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex)
        }, li.isPM = function (e) {
            return "p" === (e + "").toLowerCase().charAt(0)
        }, li.meridiem = function (e, t, i) {
            return 11 < e ? i ? "pm" : "PM" : i ? "am" : "AM"
        }, oe("en", {
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (e) {
                var t = e % 10;
                return e + (1 === v(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
            }
        }), e.lang = S("moment.lang is deprecated. Use moment.locale instead.", oe), e.langData = S("moment.langData is deprecated. Use moment.localeData instead.", se);
        var di = Math.abs,
            ci = Ke("ms"),
            hi = Ke("s"),
            ui = Ke("m"),
            mi = Ke("h"),
            gi = Ke("d"),
            fi = Ke("w"),
            pi = Ke("M"),
            vi = Ke("Q"),
            yi = Ke("y"),
            wi = ze("milliseconds"),
            Si = ze("seconds"),
            bi = ze("minutes"),
            Ci = ze("hours"),
            Di = ze("days"),
            Ti = ze("months"),
            ki = ze("years"),
            xi = Math.round,
            Ai = {
                ss: 44,
                s: 45,
                m: 45,
                h: 22,
                d: 26,
                M: 11
            },
            _i = Math.abs,
            Ii = we.prototype;
        return Ii.isValid = function () {
            return this._isValid
        }, Ii.abs = function () {
            var e = this._data;
            return this._milliseconds = di(this._milliseconds), this._days = di(this._days), this._months = di(this._months), e.milliseconds = di(e.milliseconds), e.seconds = di(e.seconds), e.minutes = di(e.minutes), e.hours = di(e.hours), e.months = di(e.months), e.years = di(e.years), this
        }, Ii.add = function (e, t) {
            return Ue(this, e, t, 1)
        }, Ii.subtract = function (e, t) {
            return Ue(this, e, t, -1)
        }, Ii.as = function (e) {
            if (!this.isValid()) return NaN;
            var t, i, n = this._milliseconds;
            if ("month" === (e = x(e)) || "quarter" === e || "year" === e) switch (t = this._days + n / 864e5, i = this._months + qe(t), e) {
                case "month":
                    return i;
                case "quarter":
                    return i / 3;
                case "year":
                    return i / 12
            } else switch (t = this._days + Math.round(Je(this._months)), e) {
                case "week":
                    return t / 7 + n / 6048e5;
                case "day":
                    return t + n / 864e5;
                case "hour":
                    return 24 * t + n / 36e5;
                case "minute":
                    return 1440 * t + n / 6e4;
                case "second":
                    return 86400 * t + n / 1e3;
                case "millisecond":
                    return Math.floor(864e5 * t) + n;
                default:
                    throw new Error("Unknown unit " + e)
            }
        }, Ii.asMilliseconds = ci, Ii.asSeconds = hi, Ii.asMinutes = ui, Ii.asHours = mi, Ii.asDays = gi, Ii.asWeeks = fi, Ii.asMonths = pi, Ii.asQuarters = vi, Ii.asYears = yi, Ii.valueOf = function () {
            return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * v(this._months / 12) : NaN
        }, Ii._bubble = function () {
            var e, t, i, n, a, o = this._milliseconds,
                r = this._days,
                s = this._months,
                l = this._data;
            return 0 <= o && 0 <= r && 0 <= s || o <= 0 && r <= 0 && s <= 0 || (o += 864e5 * je(Je(s) + r), s = r = 0), l.milliseconds = o % 1e3, e = p(o / 1e3), l.seconds = e % 60, t = p(e / 60), l.minutes = t % 60, i = p(t / 60), l.hours = i % 24, s += a = p(qe(r += p(i / 24))), r -= je(Je(a)), n = p(s / 12), s %= 12, l.days = r, l.months = s, l.years = n, this
        }, Ii.clone = function () {
            return Ae(this)
        }, Ii.get = function (e) {
            return e = x(e), this.isValid() ? this[e + "s"]() : NaN
        }, Ii.milliseconds = wi, Ii.seconds = Si, Ii.minutes = bi, Ii.hours = Ci, Ii.days = Di, Ii.weeks = function () {
            return p(this.days() / 7)
        }, Ii.months = Ti, Ii.years = ki, Ii.humanize = function (e) {
            if (!this.isValid()) return this.localeData().invalidDate();
            var t, i, n, a, o, r, s, l, d, c, h, u = this.localeData(),
                m = (i = !e, n = u, a = Ae(t = this).abs(), o = xi(a.as("s")), r = xi(a.as("m")), s = xi(a.as("h")), l = xi(a.as("d")), d = xi(a.as("M")), c = xi(a.as("y")), (h = o <= Ai.ss && ["s", o] || o < Ai.s && ["ss", o] || r <= 1 && ["m"] || r < Ai.m && ["mm", r] || s <= 1 && ["h"] || s < Ai.h && ["hh", s] || l <= 1 && ["d"] || l < Ai.d && ["dd", l] || d <= 1 && ["M"] || d < Ai.M && ["MM", d] || c <= 1 && ["y"] || ["yy", c])[2] = i, h[3] = 0 < +t, h[4] = n, function (e, t, i, n, a) {
                    return a.relativeTime(t || 1, !!i, e, n)
                }.apply(null, h));
            return e && (m = u.pastFuture(+this, m)), u.postformat(m)
        }, Ii.toISOString = Ze, Ii.toString = Ze, Ii.toJSON = Ze, Ii.locale = Fe, Ii.localeData = Me, Ii.toIsoString = S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", Ze), Ii.lang = ei, P("X", 0, 0, "unix"), P("x", 0, 0, "valueOf"), F("x", bt), F("X", /[+-]?\d+(\.\d{1,3})?/), O("X", function (e, t, i) {
            i._d = new Date(1e3 * parseFloat(e, 10))
        }), O("x", function (e, t, i) {
            i._d = new Date(v(e))
        }), e.version = "2.24.0", Qe = ve, e.fn = si, e.min = function () {
            return ye("isBefore", [].slice.call(arguments, 0))
        }, e.max = function () {
            return ye("isAfter", [].slice.call(arguments, 0))
        }, e.now = function () {
            return Date.now ? Date.now() : +new Date
        }, e.utc = d, e.unix = function (e) {
            return ve(1e3 * e)
        }, e.months = function (e, t) {
            return $e(e, t, "months")
        }, e.isDate = o, e.locale = oe, e.invalid = u, e.duration = Ae, e.isMoment = f, e.weekdays = function (e, t, i) {
            return He(e, t, i, "weekdays")
        }, e.parseZone = function () {
            return ve.apply(null, arguments).parseZone()
        }, e.localeData = se, e.isDuration = Se, e.monthsShort = function (e, t) {
            return $e(e, t, "monthsShort")
        }, e.weekdaysMin = function (e, t, i) {
            return He(e, t, i, "weekdaysMin")
        }, e.defineLocale = re, e.updateLocale = function (e, t) {
            if (null != t) {
                var i, n, a = Ot;
                null != (n = ae(e)) && (a = n._config), (i = new T(t = D(a, t))).parentLocale = Et[e], Et[e] = i, oe(e)
            } else null != Et[e] && (null != Et[e].parentLocale ? Et[e] = Et[e].parentLocale : null != Et[e] && delete Et[e]);
            return Et[e]
        }, e.locales = function () {
            return tt(Et)
        }, e.weekdaysShort = function (e, t, i) {
            return He(e, t, i, "weekdaysShort")
        }, e.normalizeUnits = x, e.relativeTimeRounding = function (e) {
            return void 0 === e ? xi : "function" == typeof e && (xi = e, !0)
        }, e.relativeTimeThreshold = function (e, t) {
            return void 0 !== Ai[e] && (void 0 === t ? Ai[e] : (Ai[e] = t, "s" === e && (Ai.ss = t - 1), !0))
        }, e.calendarFormat = function (e, t) {
            var i = e.diff(t, "days", !0);
            return i < -6 ? "sameElse" : i < -1 ? "lastWeek" : i < 0 ? "lastDay" : i < 1 ? "sameDay" : i < 2 ? "nextDay" : i < 7 ? "nextWeek" : "sameElse"
        }, e.prototype = si, e.HTML5_FMT = {
            DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
            DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
            DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
            DATE: "YYYY-MM-DD",
            TIME: "HH:mm",
            TIME_SECONDS: "HH:mm:ss",
            TIME_MS: "HH:mm:ss.SSS",
            WEEK: "GGGG-[W]WW",
            MONTH: "YYYY-MM"
        }, e
    });function WorkflowDesigner(e) {
    function t() {
        var e = {
            actions: new Array,
            conditions: new Array,
            rules: new Array,
            referenceContainers: new Array
        },
            t = n.data;
        return t.Activities.forEach(function (i) {
            void 0 != i.Implementation && $.each(i.Implementation, function (n, a) {
                if (t.AdditionalParams.Actions.includes(a.ActionName)) return !0;
                var o = function (e) {
                    return "Action" === e.Type && e.Name === a.ActionName
                };
                $.grep(t.CodeActions, o).length || (e.actions.includes(a.ActionName) || e.actions.push(a.ActionName), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
            }), void 0 != i.PreExecutionImplementation && $.each(i.PreExecutionImplementation, function (n, a) {
                if (t.AdditionalParams.Actions.includes(a.ActionName)) return !0;
                var o = function (e) {
                    return "Action" === e.Type && e.Name === a.ActionName
                };
                $.grep(t.CodeActions, o).length || (e.actions.includes(a.ActionName) || e.actions.push(a.ActionName), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
            })
        }), t.Transitions.forEach(function (i) {
            $.each(i.Conditions, function (n, a) {
                if (a.Action && "Action" === a.Type) {
                    if (t.AdditionalParams.Conditions.includes(a.Action.ActionName)) return !0;
                    var o = function (e) {
                        return "Condition" === e.Type && e.Name === a.Action.ActionName
                    };
                    $.grep(t.CodeActions, o).length || (e.conditions.includes(a.Action.ActionName) || e.conditions.push(a.Action.ActionName), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
                }
            })
        }), t.Actors.forEach(function (i) {
            if (void 0 != i.Rule && !t.AdditionalParams.Rules.includes(i.Rule)) {
                var n = function (e) {
                    return ("RuleCheck" === e.Type || "RuleGet" === e.Type) && e.Name === i.Rule
                };
                $.grep(t.CodeActions, n).length || (e.rules.includes(i.Rule) || e.rules.push(i.Rule), e.referenceContainers.includes(i.Name) || e.referenceContainers.push(i.Name))
            }
        }), e
    }

    function i() {
        var e = t();
        e.referenceContainers.length > 0 && WorkflowDesignerWindows.ConfirmDialog(WorkflowDesignerConstants.BrokenReferencesDialogText, WorkflowDesignerConstants.ButtonTextYes, function () {
            var t = n.data;
            return t.AdditionalParams.Actions = t.AdditionalParams.Actions.concat(e.actions), t.AdditionalParams.Conditions = t.AdditionalParams.Conditions.concat(e.conditions), t.AdditionalParams.Rules = t.AdditionalParams.Rules.concat(e.rules), !0
        }, WorkflowDesignerConstants.ButtonTextNo, function () {
            return !0
        })
    }
    var n = this;
    this.Settings = e, window.localStorage || WorkflowDesignerCommon.defineLocalStorage(), Array.prototype.includes || WorkflowDesignerCommon.defineArrayIncludes(), this.GetName = function () {
        return n.Settings.name
    }, this.error = function (e, t) {
        alert(e), void 0 !== t && null !== t && console.log(e, t)
    }, this.refresh = function () {
        var e = void 0 !== this.data && void 0 !== this.data.__loadParams ? this.data.__loadParams : this.loadParams;
        void 0 === e ? alert("You might use refresh method after called load method only.") : this.load(e)
    }, this.getParam = function (e) {
        return localStorage["WorkflowDesigner_" + e]
    }, this.setParam = function (e, t) {
        var i = "WorkflowDesigner_" + e;
        localStorage[i] = t
    }, this.load = function (e) {
        var t = new Array;
        this.loadParams = e, this.schemecode = e.schemecode, this.processid = e.processid, this.schemeid = e.schemeid, e.readonly && (this.Settings.readonly = e.readonly), t.push({
            name: "schemecode",
            value: this.schemecode
        }), t.push({
            name: "processid",
            value: this.processid
        }), t.push({
            name: "schemeid",
            value: this.schemeid
        }), t.push({
            name: "operation",
            value: "load"
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: t,
            async: !0,
            success: function (t) {
                var a = {};
                try {
                    a = JSON.parse(t)
                } catch (e) {
                    return void n.error(t)
                }
                if (a.isError) return void n.error(a.errorMessage);
                a.__loadParams = e, n.data = a, e.processid && n.data.IsSubprocessScheme || i(), n.render()
            },
            error: function (e, t, i) {
                n.error(t + " " + i)
            }
        })
    }, this.exists = function (e) {
        var t = new Array;
        this.schemecode = e.schemecode, this.processid = e.processid, this.schemeid = e.schemeid, e.readonly && (this.Settings.readonly = e.readonly), t.push({
            name: "schemecode",
            value: this.schemecode
        }), t.push({
            name: "processid",
            value: this.processid
        }), t.push({
            name: "schemeid",
            value: this.schemeid
        }), t.push({
            name: "operation",
            value: "exists"
        });
        var i = $.ajax({
            url: this.Settings.apiurl,
            data: t,
            async: !1,
            error: function (e, t, i) {
                n.error(t + " " + i)
            }
        }).responseText;
        try {
            return JSON.parse(i)
        } catch (e) {
            return n.error(i), !1
        }
    }, this.create = function () {
        var e = new Array;
        e.push({
            name: "operation",
            value: "load"
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: e,
            async: !0,
            success: function (e) {
                var t = {};
                try {
                    t = JSON.parse(e)
                } catch (t) {
                    return void n.error(e)
                }
                if (t.isError) return void n.error(t.errorMessage);
                n.data = t, n.render()
            }
        })
    }, this.render = function () {
        var e = !1;
        n.Graph && (n.Graph.destroy(), void 0 != n.data && void 0 != n.data.__loadParams && (void 0 != n.data.__loadParams.isFullScreen && (e = n.data.__loadParams.isFullScreen), void 0 != n.data.__loadParams.readonly && (this.Settings.readonly = n.data.__loadParams.readonly)));
        var t = [WorkflowDesignerActivityManager, WorkflowDesignerTransitionManager, WorkflowDesignerKeyboard];
        if (Array.isArray(n.Settings.externalComponents) && n.Settings.externalComponents.forEach(function (e) {
            t.push(e)
        }), this.Settings.printable || t.push(WorkflowDesignerBackground), this.Settings.notrendertoolbar || t.push(WorkflowDesignerToolbar), n.Settings.printable && void 0 != n.data) {
            var i = 0,
                a = 0;
            $(n.data.Activities).each(function (e) {
                var t = parseInt(this.DesignerSettings.X),
                    n = parseInt(this.DesignerSettings.Y);
                t > i && (i = t), n > a && (a = n)
            }), n.Settings.graphwidth = i + n.Settings.DefaultActivityWidth, n.Settings.graphheight = a + n.Settings.DefaultActivityHeight
        }
        n.Graph = new WorkflowGraph(this.Settings.renderTo, n, n.Settings, t), n.Graph.setFullScreen(e), void 0 != n.data && (WorkflowDesignerCommon.DataCorrection(n.data), void 0 != n.data.__loadParams && void 0 != n.data.__loadParams.graphData && (n.Graph.graphData = n.data.__loadParams.graphData, n.Graph.graphDataIndex = n.data.__loadParams.graphDataIndex), n.Graph.Draw(n.data))
    }, this.save = function (e, t) {
        if (n.Settings.readonly) return void alert(WorkflowDesignerConstants.ErrorReadOnlySaveText);
        var i = new Array;
        i.push({
            name: "schemecode",
            value: this.schemecode
        }), i.push({
            name: "processid",
            value: this.processid
        }), i.push({
            name: "schemeid",
            value: this.schemeid
        }), i.push({
            name: "operation",
            value: "save"
        }), i.push({
            name: "data",
            value: JSON.stringify(this.data)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (i) {
                var a = {};
                try {
                    a = JSON.parse(i)
                } catch (e) {
                    return void (void 0 !== t ? t(i) : n.error(i))
                }
                if (a.isError) return void (void 0 !== t ? t(a.errorMessage, a.errorDetails) : n.error(a.errorMessage, a.errorDetails));
                n.data = a, n.render(), e && setTimeout(function () {
                    e(n)
                }, 100)
            }
        })
    }, this.downloadscheme = function (e) {
        var t = new Array;
        t.push({
            name: "operation",
            value: "downloadscheme"
        }), t.push({
            name: "data",
            value: JSON.stringify(this.data)
        }), e && e.name && t.push({
            name: "scheme",
            value: e.name
        }), WorkflowDesignerCommon.download(this.Settings.apiurl, t, "post")
    }, this.uploadscheme = function (e, t) {
        var a = this.createurl("uploadscheme"),
            o = new FormData(e),
            r = new XMLHttpRequest;
        r.open("POST", a), r.onload = function () {
            var e = r.response,
                a = {};
            try {
                a = JSON.parse(e)
            } catch (t) {
                return void n.error(e)
            }
            if (a.isError) return void n.error(a.errorMessage);
            n.data = a, i(), n.render(), t && t(n)
        }, r.send(o)
    }, this.createurl = function (e) {
        var t = this.Settings.apiurl,
            i = "?";
        return t.indexOf("?") >= 0 && (i = "&"), t += i + "operation=" + e, i = "&", void 0 != this.schemeid && (t += i + "schemeid=" + this.schemeid), void 0 != this.processid && (t += i + "processid=" + this.processid), void 0 != this.schemecode && (t += i + "schemecode=" + this.schemecode), t
    }, this.validate = function () {
        if (1 != $.grep(n.data.Activities, function (e) {
            return e.IsInitial
        }).length) return WorkflowDesignerConstants.ErrorActivityIsInitialCountText;
        if (n.data.CanBeInlined) {
            if (0 == $.grep(n.data.Activities, function (e) {
                return e.IsFinal
            }).length) return WorkflowDesignerConstants.ErrorActivityIsFinalCountText
        }
        var e = t().referenceContainers;
        return $.each(n.data.Transitions, function (t, i) {
            var n = !1;
            "Auto" !== i.Trigger.Type && (("Timer" === i.Trigger.Type && !i.Trigger.Timer || "Command" === i.Trigger.Type && !i.Trigger.Command) && e.push(i.Name), n = !0), null !== i.Restrictions && void 0 !== i.Restrictions && $.each(i.Restrictions, function (t, a) {
                a.Actor || n || (e.push(i.Name), n = !0)
            })
        }), $.each(n.data.Activities, function (t, i) {
            "Inline" !== i.ActivityType || void 0 != i.SchemeCode && "" !== i.SchemeCode || e.push(i.Name)
        }), e.length > 0 ? WorkflowDesignerConstants.ErrorInvalidObjectsSaveText(e.join(", ")) : void 0
    }, this.destroy = function () {
        this.schemecode = void 0, this.processid = void 0, this.schemeid = void 0, this.data = void 0, void 0 !== this.Graph && this.Graph.destroy()
    }, this.compile = function (e, t) {
        e = {
            Name: e.Name,
            Type: e.Type,
            IsGlobal: e.IsGlobal,
            IsAsync: e.IsAsync,
            ActionCode: e.ActionCode,
            Usings: e.Usings
        };
        var i = new Array;
        i.push({
            name: "schemecode",
            value: this.schemecode
        }), i.push({
            name: "processid",
            value: this.processid
        }), i.push({
            name: "schemeid",
            value: this.schemeid
        }), i.push({
            name: "operation",
            value: "compile"
        }), i.push({
            name: "data",
            value: JSON.stringify(e)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (e) {
                try {
                    e = JSON.parse(e)
                } catch (t) {
                    n.error(e)
                }
                t && setTimeout(function () {
                    t(e)
                }, 100)
            }
        })
    }, this.deleteGlobalCodeAction = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "deleteglobalcodeaction"
        }), i.push({
            name: "names",
            value: JSON.stringify(e)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (e) {
                try {
                    e = JSON.parse(e)
                } catch (t) {
                    n.error(e)
                }
                t && setTimeout(function () {
                    t(e)
                }, 100)
            }
        })
    }, this.getemptytype = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "getemptytype"
        }), i.push({
            name: "data",
            value: JSON.stringify(e)
        });
        $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !0,
            type: "post",
            success: function (e) {
                t && setTimeout(function () {
                    t(e)
                }, 100)
            }
        })
    }, this.requestcodeactionparameter = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "getcodeactionparameter"
        }), i.push({
            name: "type",
            value: e
        }), i.push({
            name: "name",
            value: t
        });
        for (var n = $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !1,
            type: "post"
        }), a = JSON.parse(n.responseText), o = 0; o < a.length; o += 1) null === a[o].Name && (a[o].Name = "");
        return a
    }, this.requestautocompletesuggestions = function (e, t) {
        var i = new Array;
        i.push({
            name: "operation",
            value: "getautocompletesuggestions"
        }), i.push({
            name: "category",
            value: e
        }), i.push({
            name: "value",
            value: t
        });
        var n = $.ajax({
            url: this.Settings.apiurl,
            data: i,
            async: !1,
            type: "post"
        });
        return JSON.parse(n.responseText)
    }, this.readonlymode = function (e) {
        var t = this;
        void 0 === e || null == e ? (t.Settings.notrendertoolbar = !1, t.Settings.notshowwindows = !1, t.Settings.disableobjectmovements = !1) : (void 0 != e.notrendertoolbar ? t.Settings.notrendertoolbar = e.notrendertoolbar : t.Settings.notrendertoolbar = !1, void 0 != e.notshowwindows ? t.Settings.notshowwindows = e.notshowwindows : t.Settings.notshowwindows = !1, void 0 != e.disableobjectmovements ? t.Settings.disableobjectmovements = e.disableobjectmovements : t.Settings.disableobjectmovements = !1), t.Settings.readonly = !0, t.Settings.printable && (t.Settings.graphheight = t.Settings.originalgraphheighth, t.Settings.graphwidth = t.Settings.originalgraphwidth, t.Settings.printable = !1), t.render()
    }, this.printablemode = function () {
        var e = this;
        e.Settings.printable || (e.Settings.originalgraphheighth = e.Settings.graphheight, e.Settings.originalgraphwidth = e.Settings.graphwidth), e.Settings.notrendertoolbar = !0, e.Settings.notshowwindows = !0, e.Settings.disableobjectmovements = !1, e.Settings.readonly = !0, e.Settings.printable = !0, e.render()
    }, this.editablemode = function () {
        var e = this;
        e.Settings.notrendertoolbar = !1, e.Settings.notshowwindows = !1, e.Settings.disableobjectmovements = !1, e.Settings.readonly = !1, e.Settings.printable && (e.Settings.graphheight = e.Settings.originalgraphheighth, e.Settings.graphwidth = e.Settings.originalgraphwidth, e.Settings.printable = !1), e.render()
    }, void 0 === this.Settings.mode || ("readonly" === this.Settings.mode.toLowerCase() ? this.readonlymode(e) : "printable" === this.Settings.mode.toLowerCase() ? this.printablemode() : this.editablemode()), this.autoarrangement = function () {
        var e = this.Graph.GetComponentByType("WorkflowDesignerToolbar");
        void 0 != e && e.AutoArrangement()
    }, this.downloadschemeBPMN = function (e) {
        var t = new Array;
        t.push({
            name: "operation",
            value: "downloadschemebpmn"
        }), t.push({
            name: "data",
            value: JSON.stringify(this.data)
        }), e && e.name && t.push({
            name: "scheme",
            value: e.name
        }), WorkflowDesignerCommon.download(this.Settings.apiurl, t, "post")
    }, this.uploadschemeBPMN = function (e, t) {
        var a = this.GetName() + "_uploadiframe",
            o = document.createElement("iframe");
        o.setAttribute("id", a), o.setAttribute("name", a), o.setAttribute("width", "0"), o.setAttribute("height", "0"), o.setAttribute("border", "0"), o.setAttribute("style", "width: 0; height: 0; border: none;"), e.parentNode.appendChild(o), window.frames[a].name = a;
        var r = document.getElementById(a),
            s = function () {
                r.detachEvent ? r.detachEvent("onload", s) : r.removeEventListener("load", s, !1), r.contentDocument ? content = r.contentDocument.body.innerText : r.contentWindow ? content = r.contentWindow.document.body.innerHTML : r.document && (content = r.document.body.innerHTML), setTimeout(function () {
                    r.parentNode.removeChild(r)
                }, 250);
                var e = {};
                try {
                    e = JSON.parse(content)
                } catch (e) {
                    return void n.error(content)
                }
                if (e.isError) return void n.error(e.errorMessage);
                n.data = e, i(), n.render(), t && t(n)
            };
        r.addEventListener && r.addEventListener("load", s, !0), r.attachEvent && r.attachEvent("onload", s), e.setAttribute("target", a), e.setAttribute("action", this.createurl("uploadschemebpmn")), e.setAttribute("method", "post"), e.setAttribute("enctype", "multipart/form-data"), e.setAttribute("encoding", "multipart/form-data"), e.submit()
    }
}

function WorkflowDesignerOverviewMap() {
    this.type = "WorkflowDesignerOverviewMap";
    var e = this;
    this.init = function (t) {
        this.graph = t, this.Layer = new Konva.Layer, this.Layer.scale(.5), this.graph.Stage.add(this.Layer), this.Layer.setZIndex(1e3);
        var i = this.graph.Stage.width(),
            n = this.graph.Stage.height(),
            a = void 0 != this.graph.Settings.overviewMapWidth ? this.graph.Settings.overviewMapWidth : WorkflowDesignerConstants.OverviewMap.width,
            o = void 0 != this.graph.Settings.overviewMapHeight ? this.graph.Settings.overviewMapHeight : WorkflowDesignerConstants.OverviewMap.height;
        e.background = new Konva.Image({
            x: i - a - 5,
            y: n - o - 5,
            width: a,
            height: o,
            fill: "white",
            shadowEnabled: !0,
            shadowBlur: 5,
            shadowOpacity: .3
        }), e.Layer.add(e.background)
    }, this.draw = function () {
        this.GraphRedrawAll()
    }, this.GraphRedrawAll = function () {
        console.log("GraphRedrawAll")
    }
}

function WorkflowDesignerForm(e) {
    this.type = "WorkflowDesignerForm", this.parameters = e, this.id = WorkflowDesignerCommon.createUUID(), this.isReadOnly = function () {
        return this.parameters.readonly
    }, this.showModal = function (e, t, i) {
        var n = this;
        n.window = $('<div tabindex="0" class="ui modal WorkflowDesignerDialog"></div>'), void 0 != WorkflowDesignerConstants.FormMaxHeight && "" != WorkflowDesignerConstants.FormMaxHeight && n.window.css("max-height", WorkflowDesignerConstants.FormMaxHeight), void 0 != this.parameters.width && "" != this.parameters.width && n.window.width(this.parameters.width), n.window.id = this.id;
        var a = void 0;
        switch (this.parameters.type) {
            case "table":
                a = this.generateTable(this.parameters);
                break;
            case "form":
                a = this.generateForm(this.parameters);
                break;
            case "tabs":
                a = this.generateTabs(this.parameters)
        }
        void 0 == a && (a = new Array), void 0 != n.parameters.top && a.unshift(n.parameters.top), void 0 != n.parameters.bottom && a.push(n.parameters.bottom), void 0 != this.parameters.renderFinalFunc && this.parameters.renderFinalFunc(a, n);
        var o = n.getEditData(n.parameters);
        n.ClearTempField(o), n.window.append($('<div class="header">' + this.parameters.title + '<div class="headerbuttons"> <span class="close"></span> <span class="fillscreen"></span> </div>')), n.window.append($('<div class="content scrolling"></div>').append(a));
        var r = $('<div class="actions"></div>');
        n.isReadOnly() ? r.append('<div class="ui secondary  cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (r.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), r.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), n.window.append(r);
        var s = function () {
            if (n.ClearError(), void 0 != e && !n.isReadOnly()) {
                return !!e(n.getEditData(n.parameters), n.parameters) && (n.allowDestroy = !0, !0)
            }
        },
            l = function () {
                if (!n.isReadOnly()) {
                    var e = n.getEditData(n.parameters);
                    return void 0 !== i && i(e, n.parameters), n.ClearTempField(e), JSON.stringify(o) === JSON.stringify(e) ? (n.allowDestroy = !0, !0) : (WorkflowDesignerWindows.ConfirmDialog(WorkflowDesignerConstants.CloseWithoutSaving, WorkflowDesignerConstants.ButtonTextYes, function () {
                        n.allowDestroy = !0, WorkflowDesignerCommon.modal(n.window, "hide")
                    }, WorkflowDesignerConstants.ButtonTextNo, function () {
                        return !0
                    }), !0)
                }
                n.allowDestroy = !0
            };
        WorkflowDesignerCommon.modal(n.window, {
            closable: !1,
            onApprove: s,
            onDeny: l,
            allowMultiple: !0,
            onHidden: function () {
                n.allowDestroy && n.destroy(), n.parameters.onHidden && n.parameters.onHidden()
            },
            dimmerSettings: {
                opacity: .2,
                duration: {
                    show: 0,
                    hide: 0
                }
            },
            transition: "fade"
        }), WorkflowDesignerCommon.modal(n.window, "show"), WorkflowDesignerCommon.modal(n.window, "refresh"), void 0 != this.refreshFunc && this.refreshFunc(), $(".item", n.window).tab({
            context: "parent"
        }), $(".ui.accordion", n.window).accordion({
            exclusive: !1
        }), $(".close", n.window).click(function () {
            (n.isReadOnly() || l()) && (n.allowDestroy = !0, WorkflowDesignerCommon.modal(n.window, "hide"))
        }), $(".fillscreen", n.window).click(function () {
            n.window.hasClass("fullscreen") ? n.window.removeClass("fullscreen") : n.window.addClass("fullscreen"), setTimeout(function () {
                void 0 != n.refreshFunc && n.refreshFunc()
            }, 500)
        })
    }, this.destroy = function () {
        void 0 != this.destroyFunc && this.destroyFunc(), $(".WorkflowDesignerDialogautoComplete").remove(), this.window.remove()
    }, this.InfoDialog = function (e, t, i) {
        var n = "ui modal WorkflowDesignerConfirmDialog";
        void 0 != i && (n += " " + i);
        var a = $('<div tabindex="0" class="' + n + '"></div>');
        a.append($('<div class="header">' + e + "</div>")), a.append($('<div class="content scrolling"><p>' + t + "</p></div>"));
        var o = $('<div class="actions"></div>').append('<div tabindex="1" class="ui primary ok button">' + WorkflowDesignerConstants.EditCodeLabel.OK + "</div>");
        a.append(o), WorkflowDesignerCommon.modal(a, {
            allowMultiple: !0,
            dimmerSettings: {
                opacity: .2,
                duration: {
                    show: 0,
                    hide: 0
                }
            },
            transition: "fade"
        }), WorkflowDesignerCommon.modal(a, "show")
    }, this.getEditData = function (e) {
        var t, i = this;
        if ("form" === e.type || "group" === e.type) t = {}, e.elements.forEach(function (e) {
            void 0 != e.field && (t["control_" + e.field] = e.control), "table" === e.type || "form" === e.type ? t[e.field] = i.getEditData(e) : "group" === e.type ? i.objAssign(t, i.getEditData(e)) : "scheme" === e.type || i.SetValueByPropertyName(t, e.field, i.getEasyControlValue(e))
        });
        else if ("table" === e.type) {
            void 0 == t && (t = []);
            var n = e.control;
            if (e.elements.forEach(function (e) {
                var a = i.getElementCode(e),
                    o = "[name=" + a + "]",
                    r = n.find(o);
                if (void 0 != r)
                    for (var s = 0; s < r.length; s++) void 0 == t[s] && (t[s] = {}), t[s]["control_" + e.field] = r[s], "table" === e.type || "form" === e.type ? t[s][e.field] = i.getEditData({
                        type: e.type,
                        control: $(r[s]),
                        elements: e.elements
                    }) : i.SetValueByPropertyName(t[s], e.field, i.getEasyControlValue({
                        type: e.type,
                        control: r[s]
                    }))
            }), e.keyproperty)
                for (var a = n.children("tbody").children("tr"), o = 0; o < a.length; o++) void 0 == t[o] && (t[o] = {}), t[o].keyproperty = $(a[o]).attr("keyproperty")
        }
        return t
    }, this.generateTabs = function (e, t) {
        var i = this,
            n = new Array,
            a = $('<div class="ui top attached tabular menu" />'),
            o = !0;
        e.elements.forEach(function (e) {
            var t = $('<a class="item">' + e.name + "</a>");
            t.attr("data-tab", e.tabKey), o && (t.addClass("active"), o = !1), a.append(t)
        }), n.push(a), o = !0;
        var r = null;
        return e.elements.forEach(function (e) {
            var t = $('<div class="ui bottom attached tab segment" />');
            switch (t.attr("data-tab", e.tabKey), o && (t.addClass("active"), o = !1), e.type) {
                case "table":
                    r = i.generateTable(e);
                    break;
                case "form":
                    r = i.generateForm(e);
                    break;
                case "accordion":
                    r = i.generateAccordion(e);
                    break;
                default:
                    r = null
            }
            t.append(r), n.push(t)
        }), n
    }, this.generateAccordion = function (e, t) {
        var i, n, a = this,
            o = $('<div class="ui accordion" />'),
            r = !0;
        return $.each(e.data, function (t, s) {
            i = $('<div class="title"><i class="dropdown icon"></i>' + t + "</div>"), r && i.addClass("active"), o.append(i), n = $('<div class="content" />'), r && (n.addClass("active"), r = !1), e.elements.forEach(function (e) {
                switch (e.type) {
                    case "table":
                        e.data = s, n.append(a.generateTable(e))
                }
            }), o.append(n)
        }), o
    }, this.generateForm = function (e, t) {
        var i = this,
            n = "group" == e.type ? $('<div class="fields">') : $('<div class="ui form">');
        void 0 != e.width && n.width(e.width), n.attr("name", i.getElementCode(e));
        var a = new Array;
        return e.elements.forEach(function (n) {
            var o = $('<div class="field">');
            void 0 != n.width && o.width(n.width), void 0 == t && (t = "");
            var r = t + "_" + n.field,
                s = void 0;
            if (void 0 != n.name && (s = "table" === n.type ? $('<h4 class="ui dividing header"></h4>') : $("<label></label>"), s[0].innerHTML = n.name, o.append(s)), "table" === n.type) {
                n.data || (n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field]);
                var l = i.generateTable(n, r);
                o.append(l)
            } else if ("form" === n.type) {
                n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field];
                var l = i.generateForm(n, r);
                o.append(l)
            } else if ("group" === n.type) {
                n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data;
                var l = i.generateForm(n, r);
                o.append(l)
            } else if ("accordion" === n.type) {
                n.data || (n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field]);
                var l = i.generateAccordion(n, r);
                o.append(l)
            } else if ("scheme" === n.type) {
                var d = n.group + "_group",
                    c = $('<div id="' + d + '"></div>'),
                    h = $(window).height() - 550;
                h < 400 && (h = 400), c.height(h), n.control = c[0], o.append(c[0]), i.refreshFunc = function () {
                    void 0 != i.wfdesigner && i.wfdesigner.destroy(), i.wfdesigner = new WorkflowDesigner({
                        name: d,
                        renderTo: d,
                        imagefolder: i.parameters.graph.Settings.imagefolder,
                        apiurl: i.parameters.graph.Settings.apiurl,
                        graphwidth: c.width(),
                        graphheight: h,
                        readonly: !0,
                        group: n.group,
                        hideElementsToolbar: !0,
                        hideLegend: !0,
                        hideInfoBlock: !0
                    }), i.wfdesigner.data = i.parameters.graph.data, i.wfdesigner.render()
                }, i.destroyFunc = function () {
                    c.remove(), void 0 != i.wfdesigner && i.wfdesigner.destroy()
                }
            } else {
                var c = i.generateEasyControls(n, i.GetValueByPropertyName(e.data, n.field), r);
                void 0 != s && (s[0].for = c[0].id), n.control = c[0], o.append(c[0])
            }
            a.push(o)
        }), e.control = n, n.append(a), n
    }, this.generateTable = function (e, t) {
        var i = this,
            n = $('<table class="ui form WorkflowDesignerTable"></table>');
        n.attr("name", i.getElementCode(e));
        var a = $("<thead></thead>"),
            o = $("<tr></tr>");
        if (!i.isReadOnly()) {
            var r = $('<th class="movecol"></th>');
            o.append(r)
        }
        e.elements.forEach(function (e) {
            var t = $("<th></th>");
            t[0].innerHTML = e.name, void 0 != e.width && (t[0].width = e.width), o.append(t)
        }), this.isReadOnly() || o.append("<th></th>"), a.append(o), n.append(a);
        var s = function (a) {
            void 0 != e.beforerowadded && e.beforerowadded(a, i);
            var o = $("<tr></tr>");
            e.keyproperty && o.attr("keyproperty", a[e.keyproperty]), void 0 == t && (t = "");
            var r = t + WorkflowDesignerCommon.createUUID();
            if (!i.isReadOnly()) {
                var s = $("<td class='movecol'><div class='btnmove'></div></td>");
                s.attr("draggable", !0), s.bind("dragstart", function (e) {
                    if (null !== e && void 0 !== e && null !== e.originalEvent && void 0 !== e.originalEvent && null !== e.originalEvent.dataTransfer && void 0 !== e.originalEvent.dataTransfer) try {
                        e.originalEvent.dataTransfer.setData("text/plain", "anything")
                    } catch (e) { }
                    o.css("opacity", .5), n.row = o
                }).bind("dragover", function (e) {
                    e.preventDefault()
                }).bind("drop", function (e) {
                    if (e.preventDefault(), void 0 != n.row) {
                        var t = n.find("tr");
                        t.index(n.row[0]) > t.index(o[0]) ? n.row.insertBefore(o) : n.row.insertAfter(o), n.row.css("opacity", ""), n.row = void 0
                    }
                }), o.append(s)
            }
            if (e.elements.forEach(function (t) {
                if ("table" === t.type) {
                    t.fieldFunc ? t.data = t.fieldFunc(a) : t.data = a[t.field];
                    var n = i.generateTable(t, r);
                    o.append($("<td></td>").append(n))
                } else {
                    var s = i.generateEasyControls(t, i.GetValueByPropertyName(a, t.field), r, a);
                    void 0 !== e.onrowchanged && s.change(function () {
                        e.onrowchanged(o, i)
                    }), o.append($("<td></td>").append(s))
                }
            }), !i.isReadOnly()) {
                var l = $('<a class="btnDelete"></a>');
                l[0].innerHTML = WorkflowDesignerConstants.ButtonTextDelete, l[0].href = "#", l.on("click", function () {
                    return !(void 0 !== e.onrowdelete && !e.onrowdelete(o, i)) && (o.remove(), 0 == $("tr", $(n).find("tbody")).length && n.css("display", "none"), WorkflowDesignerCommon.modal(i.window, "refresh"), !1)
                }), o.append($("<td></td>").append(l))
            }
            n.append(o), void 0 !== e.onrowadded && e.onrowadded(o, i)
        };
        void 0 != e.data && e.data.forEach(function (e) {
            s(e)
        }), void 0 != e.data && 0 != e.data.length || n.css("display", "none"), e.control = n;
        var l = new Array;
        if (l.push(n), !this.isReadOnly()) {
            var d = $('<a class="btnAdd"></a>');
            d[0].innerHTML = WorkflowDesignerConstants.ButtonTextCreate, d[0].href = "#", d.on("click", function () {
                var t = {};
                return e.datadefault && (t = e.datadefault), "none" == n.css("display") && 0 == $("tr", $(n).find("tbody")).length && n.css("display", ""), s(t), WorkflowDesignerCommon.modal(i.window, "refresh"), !1
            }), l.push(d)
        }
        return l
    }, this.generateEasyControls = function (e, t, i, n) {
        var a = this,
            o = null;
        if ("input" === e.type) return new InputControl(a).generate(e, t, i);
        if ("checkbox" === e.type) return new CheckboxControl(a).generate(e, t, i);
        if ("select" === e.type) return new SelectControl(a).generate(e, t, i);
        if ("textarea" === e.type) return o = $('<textarea rows="6" style="width: 100%;"></textarea>'), o[0].id = a.generateid(e.field, i), o[0].name = a.getElementCode(e), void 0 != t && (o[0].value = t), this.isReadOnly() && o.attr("readonly", !0), o;
        if ("json" === e.type) return new JsonControl(a, e, i).generateBasicControl(t);
        if ("jsonparameter" === e.type) return new JsonControl(a, e, i).generateParameterControl(t, n);
        if ("code" === e.type) return a.generateCodeControl(e, t, i, n);
        if ("transitionclassifier" === e.type) {
            switch (o = $('<img class="table-icon" />'), t) {
                case 0:
                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.not-specified.png"), o.attr("alt", "NotSpecified"), o.attr("title", "NotSpecified");
                    break;
                case 1:
                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.direct.png"), o.attr("alt", "Direct"), o.attr("title", "Direct");
                    break;
                case 2:
                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.reverse.png"), o.attr("alt", "Reverse"), o.attr("title", "Reverse")
            }
            return o
        }
        return "parameters" === e.type ? new ParametersControl(a).generate(e, t, i) : "defaultvalue" === e.type ? new DefaultValueControl(a, e, i).generate(t, n) : void 0
    }, this.generateCodeControl = function (e, i, n, a) {
        void 0 == i && (i = "");
        var o = $('<button class="ui button basic">' + WorkflowDesignerConstants.EditCodeLabel.EditCodeButton + "</button>");
        o[0].id = this.generateid(e.field, n), o[0].name = t.getElementCode(e), o[0].code = {}, o[0].code.code = decodeURIComponent(i);
        var r = a.Usings;
        r = void 0 == r ? t.parameters.graph.data.AdditionalParams.Usings.join(";") + ";" : decodeURIComponent(r), o[0].code.usings = r;
        var s = t.isReadOnly() ? ' readonly="true"' : "",
            l = $('<div class="ui large modal WorkflowDesignerDialogChild">');
        l[0].id = o[0].id + "_form", l.append('<div class="header">' + WorkflowDesignerConstants.EditCodeLabel.Title + "</div>");
        var d = $('<div class="content scrolling"></div>'),
            c = $('<a class="ui button">' + WorkflowDesignerConstants.EditCodeLabel.ShowUsings + "</a>");
        d.append(c);
        var h = $('<div id="' + o[0].id + '_usings" style="padding-top: 6px;display:none"/>');
        h.append('<textarea style="width:100%;height: 100px; max-width:inherit;" id="' + o[0].id + '_usingsedit"' + s + ">asdfasdfasd</textarea>"), d.append(h), d.append('<div id="' + o[0].id + '_function_upper" />'), d.append('<div id="' + o[0].id + '_editor" style="height:' + WorkflowDesignerConstants.EditCodeSettings.CodeHeight + 'px" ' + s + "></div>"), d.append('<div id="' + o[0].id + '_function_lower">}</div>'), c.on("click", function (e) {
            h.is(":visible") ? (h.hide(), c[0].innerText = WorkflowDesignerConstants.EditCodeLabel.ShowUsings) : (h.show(), c[0].innerText = WorkflowDesignerConstants.EditCodeLabel.HideUsings), WorkflowDesignerCommon.modal(l, "refresh")
        }), l.append(d);
        var u = $('<div class="actions"></div>'),
            m = $('<div class="ui button">' + WorkflowDesignerConstants.EditCodeLabel.Compile + "</div>");
        return u.append(m), m.on("click", function () {
            for (var e = t.getEditData(t.parameters), i = void 0, n = 0; n < e.length; n++)
                if (e[n].control_ActionCode.id == o[0].id) {
                    i = e[n];
                    break
                }
            if (void 0 != i) {
                i.ActionCode = encodeURIComponent(ace.edit(o[0].id + "_editor").getValue()), i.Usings = encodeURIComponent($("#" + o[0].id + "_usingsedit")[0].value.replace(/(\r\n|\n|\r)/gm, ""));
                var a = function (e) {
                    var i = e.Success ? WorkflowDesignerConstants.EditCodeLabel.Success : WorkflowDesignerConstants.EditCodeLabel.Error,
                        n = e.Success ? WorkflowDesignerConstants.EditCodeLabel.CompileSucceeded : e.Message;
                    return t.InfoDialog(i, n, e.Success ? "mini" : void 0), !1
                };
                t.parameters.graph.designer.compile(i, a)
            }
        }), o[0].readOnly ? u.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (u.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), u.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), l.append(u), o.on("click", function (e) {
            WorkflowDesignerCommon.modal(l, {
                closable: !1,
                allowMultiple: !0,
                onApprove: function () {
                    o[0].code = {}, o[0].code.code = ace.edit(o[0].id + "_editor").getValue(), o[0].code.usings = $("#" + o[0].id + "_usingsedit")[0].value.replace(/(\r\n|\n|\r)/gm, "")
                },
                onHidden: function () {
                    setTimeout(function () {
                        WorkflowDesignerCommon.modal(t.window, "show")
                    }, 10)
                },
                dimmerSettings: {
                    opacity: .2,
                    duration: {
                        show: 0,
                        hide: 0
                    }
                },
                transition: "fade"
            });
            var i = ace.edit(o[0].id + "_editor");
            $("#" + o[0].id + "_usingsedit")[0].value = t.htmlEncode(t.modifyUsingString(o[0].code.usings)), $("#" + o[0].id + "_usings").accordion({
                collapsible: !0,
                active: !1,
                heightStyle: "content scrolling"
            });
            var a = $("#" + t.generateid("Type", n))[0].value.toLowerCase(),
                r = $("#" + t.generateid("Name", n))[0].value,
                s = $("#" + t.generateid("IsAsync", n))[0].checked;
            r = "" === r ? "???" : "<b>" + r + "</b>";
            var d = "{";
            if ("action" === a) {
                d = (s ? "async Task " : "void ") + r + (s ? " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter, CancellationToken token) {" : " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {")
            }
            if ("condition" === a) {
                d = (s ? "async Task&lt;bool&gt; " : "bool ") + r + (s ? " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter, CancellationToken token) {" : " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {")
            }
            "ruleget" === a && (d = "IEnumerable&lt;string&gt; " + r + " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {"), "rulecheck" === a && (d = "bool " + r + " (ProcessInstance processInstance, WorkflowRuntime runtime, string identityId, string parameter) {"), $("#" + o[0].id + "_function_upper").html(d);
            var i = ace.edit(o[0].id + "_editor");
            i.getSession().setMode("ace/mode/csharp"), i.setValue(o[0].code.code), i.clearSelection(), t.isReadOnly() ? i.setOptions({
                readOnly: !0
            }) : (i.setOptions({
                readOnly: !1
            }), i.focus()), WorkflowDesignerCommon.modal(t.window, "hide"), WorkflowDesignerCommon.modal(l, "show")
        }), o
    }, this.addAutoComplete = function (e, t) {
        if (void 0 != e.datasource) {
            var n;
            n = Array.isArray(e.datasource) ? function (t, n) {
                t = t.toLowerCase();
                var a = e.datasource,
                    o = [];
                for (i = 0; i < a.length; i++) ~a[i].toLowerCase().indexOf(t) && o.push(a[i]);
                n(o)
            } : e.datasource.bind(t);
            var a = {
                minChars: 0,
                source: n
            };
            t.autoComplete(a)
        }
    }, this.modifyUsingString = function (e) {
        return ";" === e.substring(e.length - 1) && (e = e.substring(0, e.length - 1)), e.split(";").join(";\r\n") + ";"
    }, this.getEasyControlValue = function (e) {
        var t = this;
        if ("input" === e.type) return e.control.value;
        if ("json" === e.type || "jsonparameter" === e.type) return "div" === e.control.localName ? $(e.control).find("input").val() : e.control.value;
        if ("code" === e.type) return e.control.code;
        if ("parameters" === e.type) return e.control.parameters;
        if ("checkbox" === e.type) return "div" === e.control.localName ? e.indeterminable && $(e.control).checkbox("is indeterminate") ? null : e.control.children[0].checked : e.indeterminable && $(e.control).parent().checkbox("is indeterminate") ? null : e.control.checked;
        if ("select" === e.type) return e.control.value;
        if ("textarea" === e.type) return e.control.value;
        if ("defaultvalue" === e.type) {
            switch (e.control.type) {
                case "text":
                    return t.getEasyControlValue({
                        type: "input",
                        control: e.control
                    });
                case "checkbox":
                    return t.getEasyControlValue({
                        type: "checkbox",
                        control: e.control,
                        indeterminable: !0
                    });
                case "select-one":
                    return t.getEasyControlValue({
                        type: "select",
                        control: e.control
                    })
            }
            return null
        }
    }, this.generateid = function (e, t) {
        return t ? e + "_" + t + "_" + this.id : e + "_" + this.id
    }, this.GetValueByPropertyName = function (e, t) {
        if (void 0 != e) {
            if (t.indexOf(".") < 0) return e[t];
            var i = e;
            return t.split(".").forEach(function (e) {
                void 0 != i && (i = i[e])
            }), i
        }
    }, this.SetValueByPropertyName = function (e, t, i) {
        if (t.indexOf(".") < 0) return e[t] = i;
        for (var n = e, a = t.split("."), o = 0; o < a.length; o++) {
            var r = a[o];
            o == a.length - 1 ? n[r] = i : (void 0 == n[r] && (n[r] = {}), n = n[r])
        }
    }, this.ClearError = function () {
        var e = this.window.find(".field-validation-error");
        e.attr("title", ""),
            e.removeClass("field-validation-error"), this.window.find(".error-message").remove()
    }, this.ControlAddError = function (e, t) {
        var i = $(e);
        i.addClass("field-validation-error"), i.attr("title", t)
    }, this.CheckRequired = function (e, t, i) {
        var n = this,
            a = !0;
        return e.forEach(function (e) {
            t.forEach(function (t) {
                "" == n.GetValueByPropertyName(e, t) && (n.ControlAddError(e["control_" + t], i), a = !1)
            })
        }), a
    }, this.CheckUnique = function (e, t, i) {
        for (var n = this, a = !0, o = 0; o < e.length; o++)
            for (var r = o + 1; r < e.length; r++) this._checkUniqueEquals(e[o], e[r], t) && (t.forEach(function (t) {
                n.ControlAddError(e[o]["control_" + t], i), n.ControlAddError(e[r]["control_" + t], i)
            }), a = !1);
        return a
    }, this._checkUniqueEquals = function (e, t, i) {
        for (var n = 0; n < i.length; n++) {
            var a = i[n];
            if (e[a] != t[a]) return !1
        }
        return !0
    };
    var t = this;
    this.ClearTempField = function (e, i) {
        void 0 != e && (void 0 == i && (i = this.parameters.elements), i.forEach(function (n) {
            $.isArray(e) ? e.forEach(function (e) {
                t.ClearTempField(e, i)
            }) : void 0 != e["control_" + n.field] && delete e["control_" + n.field], n.elements && (void 0 == n.field ? t.ClearTempField(e, n.elements) : t.ClearTempField(e[n.field], n.elements))
        }))
    }, this.getElementCode = function (e) {
        return void 0 != e.code ? e.code : e.field
    }, this.htmlEncode = function (e) {
        return $("<div/>").text(e).html()
    }, this.htmlDecode = function (e) {
        return $("<div/>").html(e).text()
    }, this.toCompactJSON = function (e) {
        try {
            return JSON.stringify(JSON.parse(e))
        } catch (t) {
            try {
                return JSON5.stringify(JSON5.parse(e))
            } catch (t) {
                return e
            }
        }
    }, this.toPrettyJSON = function (e) {
        try {
            return JSON.stringify(JSON.parse(e), null, "\t")
        } catch (t) {
            try {
                return JSON5.stringify(JSON5.parse(e), null, "\t")
            } catch (t) {
                return e
            }
        }
    }, this.objAssign = function (e, t) {
        "use strict";
        if (null == e) throw new TypeError("Cannot convert undefined or null to object");
        for (var i = Object(e), n = 1; n < arguments.length; n++) {
            var a = arguments[n];
            if (null != a)
                for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (i[o] = a[o])
        }
        return i
    }
}

function WorkflowDesignerTransitionManager() {
    this.type = "WorkflowDesignerTransitionManager", this.init = function (e) {
        var t = this;
        this.graph = e, this.Layer = new Konva.Layer, this.graph.Stage.add(this.Layer), this.Layer.setZIndex(2), this.graph = e, this.APLayer = new Konva.Layer, this.graph.Stage.add(this.APLayer), this.APLayer.setZIndex(3);
        var i = function () {
            t.APLayer.batchDraw(), t.Layer.batchDraw()
        };
        this.ImageTimer = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.timer.png", i), this.ImageCondition = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.condition.png", i), this.ImageActor = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transtion.actor.png", i), this.ImageOtherwise = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.otherwise.png", i)
    }, this.ItemControls = new Array, this.draw = function () {
        null != this.ItemControls && this.ItemControls.forEach(function (e) {
            e.destroy()
        }), this.ItemControls = new Array;
        var e = this;
        void 0 != this.graph.data.Transitions && this.graph.data.Transitions.forEach(function (t) {
            var i = e.graph.GetComponentByType("WorkflowDesignerActivityManager"),
                n = i.find(t.From),
                a = i.find(t.To),
                o = !1;
            if (void 0 == n && t.From.DesignerSettings.Group != e.graph.Settings.group && (n = i.findGroup(t.From.DesignerSettings.Group, e.graph.Settings.group), o = !0), void 0 == a && t.To.DesignerSettings.Group != e.graph.Settings.group && (a = i.findGroup(t.To.DesignerSettings.Group, e.graph.Settings.group), o = !0), void 0 != n && void 0 != a && (!o || n != a)) {
                var r = new WorkflowDesignerTransitionControl({
                    from: n,
                    to: a,
                    item: t,
                    graph: e.graph,
                    manager: e,
                    group: o
                });
                e.ItemControls.push(r), r.Draw()
            }
        }), this.batchDraw()
    }, this.batchDraw = function () {
        this.CorrectItems(), this.Layer.batchDraw(), this.APLayer.batchDraw()
    }, this.CorrectItems = function () {
        for (var e = 0; e < this.ItemControls.length; e++)
            for (var t = this.ItemControls[e], i = 0; i < this.ItemControls.length; i++)
                if (e != i) {
                    var n = this.ItemControls[i];
                    t.start.x == n.start.x && t.start.y == n.start.y && (n.start.x += 5), t.end.x == n.end.x && t.end.y == n.end.y && (n.end.x += 5), t.middle.x == n.middle.x && t.middle.y == n.middle.y && (n.middle.x += 15)
                }
    }, this.getIntersectingActivity = function (e) {
        return this.graph.GetComponentByType("WorkflowDesignerActivityManager").getIntersectingActivity(e)
    }, this.LayerSetOffset = function (e) {
        this.Layer.setOffset(e), this.APLayer.setOffset(e)
    }, this.LayerScale = function (e) {
        var t = (e.scale, e.delta);
        this.Layer.setScale({
            x: this.Layer.getScale().x + t,
            y: this.Layer.getScale().y + t
        }), this.APLayer.setScale({
            x: this.APLayer.getScale().x + t,
            y: this.APLayer.getScale().y + t
        })
    }, this.LayerScaleNorm = function () {
        this.Layer.setScale({
            x: 1,
            y: 1
        }), this.Layer.setOffset({
            x: 0,
            y: 0
        }), this.APLayer.setScale({
            x: 1,
            y: 1
        }), this.APLayer.setOffset({
            x: 0,
            y: 0
        })
    }, this.DeselectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Deselect()
        })
    }, this.SelectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Select()
        })
    }, this.GetSelected = function () {
        var e = new Array;
        return this.ItemControls.forEach(function (t) {
            t.selected && e.push(t)
        }), e
    }, this.SelectByPosition = function (e) {
        this.ItemControls.forEach(function (t) {
            t.getIntersectingRect(e) && t.Select()
        })
    }, this.SelectByItem = function (e) {
        this.ItemControls.forEach(function (t) {
            t.item == e && t.Select()
        })
    }, this.CreateNewTransition = function (e, t) {
        var i = this;
        if (void 0 == t) {
            var n = e.control.getX() + e.rectangle.attrs.width,
                a = e.control.getY() + e.rectangle.attrs.height / 2,
                o = {
                    x: n,
                    y: a
                },
                r = new WorkflowDesignerTransitionManagerTempControl({
                    x: o.x,
                    y: o.y,
                    manager: this
                });
            r.Draw(o.x + 10, o.y), this.batchDraw();
            var s = function (e) {
                var t = i.graph.CorrectPossition({
                    x: e.evt.offsetX,
                    y: e.evt.offsetY
                }, i.Layer);
                r.Redraw(t), i.Layer.batchDraw()
            },
                l = function (t) {
                    var n = {
                        x: t.evt.offsetX,
                        y: t.evt.offsetY
                    },
                        a = i.getIntersectingActivity(n);
                    void 0 != a && i.CreateNewTransition(e, a), r.Delete(), i.graph.Stage.off("mousemove.WorkflowDesignerTransitionManagerTempControl", s), i.graph.Stage.off("mouseup.WorkflowDesignerTransitionManagerTempControl", l), i.batchDraw(), i.graph.StoreGraphData()
                };
            return this.graph.Stage.on("mousemove.WorkflowDesignerTransitionManagerTempControl", s), this.graph.Stage.on("mouseup.WorkflowDesignerTransitionManagerTempControl", l), r
        }
        var d = {
            Name: this.GetDefaultName(e.GetName(), t.GetName()),
            From: e.item,
            To: t.item,
            Trigger: {
                Type: "Auto"
            },
            Conditions: [{
                Type: "Always"
            }],
            AllowConcatenationType: "And",
            RestrictConcatenationType: "And",
            ConditionsConcatenationType: "And",
            Classifier: "NotSpecified",
            DesignerSettings: {}
        },
            c = new WorkflowDesignerTransitionControl({
                from: e,
                to: t,
                item: d,
                graph: i.graph,
                manager: i
            });
        return i.ItemControls.push(c), i.graph.data.Transitions.push(d), c.Draw(), c
    }, this.GetDefaultName = function (e, t) {
        for (var i = e + "_" + t + "_", n = 1, a = 0; a < this.graph.data.Transitions.length; a++) {
            this.graph.data.Transitions[a].Name == i + n && (n++ , a = -1)
        }
        return i + n
    }
}

function WorkflowDesignerActivityControl(e) {
    var t = this;
    this.manager = e.manager, this.graph = e.graph, this.x = e.x, this.y = e.y, this.group = e.group, this.item = e.item, this.control = void 0, this.rectangle = void 0, this.text = void 0, this.createTransitionAndActivityButton = void 0, this.createTransitionButton = void 0, this.selected = !1, this.dependentTransitions = new Array, this.getX = function () {
        return this.rectangle.attrs.x + this.control.attrs.x
    }, this.getY = function () {
        return this.rectangle.attrs.y + this.control.attrs.y
    }, this.GetName = function () {
        return this.group && null !== this.item.FirstTimeInlineName && void 0 !== this.item.FirstTimeInlineName ? this.item.FirstTimeInlineName : this.item.Name
    }, this.SetName = function (e) {
        this.item.Name = e
    }, this.Draw = function () {
        var i = t.graph.Settings,
            n = !t.graph.Settings.disableobjectmovements;
        if (void 0 == this.graph.Settings.drawElements || void 0 == this.graph.Settings.drawElements.activity || this.graph.Settings.drawElements.activity(this) === !1) {
            t.control = new Konva.Group({
                x: e.x,
                y: e.y,
                rotation: 0,
                draggable: n,
                dragBoundFunc: function (e) {
                    var n = (i.DefaultMoveStep * t.manager.Layer.getScaleX(), i.DefaultMoveStep * t.manager.Layer.getScaleY()),
                        e = {
                            x: Math.round(e.x / n) * n,
                            y: Math.round(e.y / n) * n
                        };
                    if (t.selected) {
                        var a = this.getAbsolutePosition();
                        t.manager.ObjectMove({
                            sender: t,
                            changepos: {
                                x: e.x - a.x,
                                y: e.y - a.y
                            }
                        })
                    }
                    return e
                }
            });
            var a = WorkflowDesignerConstants.ActivityColor,
                o = WorkflowDesignerConstants.ActivityTextColor;
            t.item.IsFinal && (a = WorkflowDesignerConstants.ActivityFinalColor, o = WorkflowDesignerConstants.ActivityFinalTextColor, !1), t.item.IsInitial && (a = WorkflowDesignerConstants.ActivityInitialColor, o = WorkflowDesignerConstants.ActivityInitialTextColor, !1);
            (this.group ? t.graph.IsGroupActive(t.item.DesignerSettings.Group) : t.graph.GetCurrentActivity() == t.item.Name) && (a = WorkflowDesignerConstants.SelectColor, o = WorkflowDesignerConstants.SelectTextColor, !1), t.graph.isCurrentActivityForSubprocess(t.item.Name) && (a = WorkflowDesignerConstants.SelectSubProcessColor, o = WorkflowDesignerConstants.SelectSubProcessTextColor, !1);
            var r = "Inline" === this.item.ActivityType || this.group;
            t.rectangle = new Konva.Rect({
                x: 0,
                y: 0,
                width: this.graph.Settings.DefaultActivityWidth,
                height: this.graph.Settings.DefaultActivityHeight,
                fill: a,
                cornerRadius: 5,
                dash: r ? [8, 4] : void 0,
                stroke: r ? WorkflowDesignerConstants.ActivityShape : void 0,
                strokeWidth: r ? 4 : 0
            }), t.control.add(t.rectangle), this.group || (Array.isArray(t.item.Implementation) && t.item.Implementation.length > 0 && t.control.add(new Konva.Text({
                x: t.rectangle.attrs.width - 20,
                y: 38,
                text: "E",
                fontSize: 12,
                fontFamily: "Arial",
                fill: o,
                fontStyle: "bold"
            })), Array.isArray(t.item.PreExecutionImplementation) && t.item.PreExecutionImplementation.length > 0 && t.control.add(new Konva.Text({
                x: t.rectangle.attrs.width - 30,
                y: 38,
                text: "P",
                fontSize: 12,
                fontFamily: "Arial",
                fill: o,
                fontStyle: "bold"
            }))), t.text = new Konva.Text({
                x: 10,
                y: 10,
                text: this.GetName(),
                fontSize: 12,
                fontFamily: "Arial",
                fontStyle: "bold",
                fill: o
            }), void 0 == t.item.State && (t.item.State = "");
            var s = this.group ? t.item.OriginalSchemeCode : t.item.State;
            r && (t.control.add(new Konva.Text({
                x: t.rectangle.attrs.width - 20,
                y: 10,
                text: "I",
                fontSize: 12,
                fontFamily: "Arial",
                fill: o,
                fontStyle: "bold"
            })), void 0 != t.item.SchemeCode && (s = t.item.SchemeCode)), t.stateText = new Konva.Text({
                x: 10,
                y: 25,
                text: s,
                fontSize: 12,
                fontFamily: "Arial",
                fill: o
            }), t.control.add(t.text), t.control.add(t.stateText);
            var l = "";
            1 == t.item.IsInitial && (l.length > 0 && (l += " "), l += WorkflowDesignerConstants.ActivityFormLabel.IsInitial), 1 == t.item.IsFinal && (l.length > 0 && (l += " "), l += WorkflowDesignerConstants.ActivityFormLabel.IsFinal), 1 == t.graph.getParam("exinfo") && (t.createExInfo(t.control), 1 == t.item.IsForSetState && (l.length > 0 && (l += " - "), l += WorkflowDesignerConstants.ActivityFormLabel.IsForSetState)), "" != l && (t.typeText = new Konva.Text({
                x: 10,
                y: 40,
                text: l,
                fontSize: 12,
                fontFamily: "Arial",
                fill: o
            }), t.control.add(t.typeText)), t.graph.Settings.disableobjectmovements || (this.control.on("dragend", this.Sync), this.control.on("dragmove", this._onMove), this.control.on("click", this._onClick), this.control.on("touchend", this._onClick)), this.control.on("dblclick", this._onDblClick);
            var d = t.graph.Settings.imagefolder,
                c = [];
            if (t.graph.Settings.notshowwindows || c.push({
                img: d + "wfe.settings.png",
                click: function () {
                    t.ShowProperties()
                }
            }), t.graph.Settings.readonly || t.group || (c.push({
                img: d + "wfe.transition.png",
                click: function () {
                    t._onCreateTransition()
                }
            }), c.push({
                img: d + "wfe.activity.png",
                click: function () {
                    t._onCreateTransitionAndActivity()
                }
            }), c.push({
                img: d + "wfe.clone.png",
                click: function () {
                    t.manager.Clone(t)
                }
            }), c.push({
                img: d + "wfe.delete.png",
                click: function () {
                    t._onDelete()
                }
            })), c.length > 0) {
                var h = {
                    x: t.rectangle.getWidth() - 30 * c.length,
                    y: -40
                };
                t.bar = WorkflowDesignerBar(t.manager.Layer, c, h), t.control.add(t.bar), t.bar.hide()
            }
            t.manager.Layer.add(t.control)
        }
    }, this.Delete = function () {
        this.control.destroy(), this.graph.data.Activities.splice(this.graph.data.Activities.indexOf(this.item), 1), this.manager.ItemControls.splice(this.manager.ItemControls.indexOf(this), 1);
        for (var e = new Array, t = 0; t < this.dependentTransitions.length; t++) e.push(this.dependentTransitions[t]);
        for (var t = 0; t < e.length; t++) e[t].Delete()
    }, this.Select = function () {
        if (!this.selected) {
            var e = this;
            this.rectangle.setStrokeWidth(4), this.rectangle.setStroke(WorkflowDesignerConstants.SelectColor), void 0 != e.bar && e.bar.show(), this.selected = !0
        }
    }, this.Deselect = function () {
        if (this.selected) {
            var e = "Inline" === this.item.ActivityType || this.group;
            this.rectangle.setStrokeWidth(e ? 4 : 0), this.rectangle.setStroke(e ? WorkflowDesignerConstants.ActivityShape : this.rectangle.fill()), void 0 != t.bar && t.bar.hide(), this.selected = !1
        }
    }, this.ObjectMove = function (e) {
        var i = this.control.getAbsolutePosition();
        if (i.x += e.x, i.y += e.y, this.control.setAbsolutePosition(i), this.Sync(), !(t.dependentTransitions.length < 1))
            for (var n = 0; n < t.dependentTransitions.length; n++) {
                var a = t.dependentTransitions[n];
                a.middle = void 0, a.Draw()
            }
    }, this._onMove = function () {
        if (!(t.dependentTransitions.length < 1)) {
            var e = !1;
            if (void 0 == t.oldpos) t.oldpos = t.control.getPosition();
            else {
                var i = t.control.getPosition();
                (Math.abs(i.x - t.oldpos.x) > 20 || Math.abs(i.y - t.oldpos.y) > 20) && (e = !0)
            }
            for (var n = 0; n < t.dependentTransitions.length; n++) {
                var a = t.dependentTransitions[n];
                e && (a.middle = void 0, a.item.DesignerSettings = {}), a.Draw()
            }
            t.manager.redrawTransitions()
        }
    }, this._onClick = function (e) {
        var i = t.selected;
        e.evt.ctrlKey || t.graph.DeselectAll(), i ? t.Deselect() : t.Select(), t.graph.onSelectionChanged(!i), t.manager.batchDraw()
    }, this._onDblClick = function () {
        t.graph.DeselectAll(), t.Select(), t.manager.batchDraw(), t.graph.Settings.notshowwindows || t.ShowProperties()
    }, this._onDelete = function () {
        var e = this;
        e.graph.confirm(WorkflowDesignerConstants.DeleteConfirmCurrent, function () {
            e.Delete(), e.graph.onSelectionChanged(), e.graph.redrawAll(), e.graph.StoreGraphData()
        })
    }, this._onCreateTransitionAndActivity = function () {
        t.manager.createTransitionAndActivity(t), t.graph.StoreGraphData()
    }, this._onCreateTransition = function () {
        t.manager.createTransition(t)
    }, this.RegisterTransition = function (e) {
        for (var t = !1, i = 0; i < this.dependentTransitions.length; i++)
            if (this.dependentTransitions[i].GetName() == e.GetName()) {
                t = !0;
                break
            }
        t || this.dependentTransitions.push(e)
    }, this.UnregisterTransition = function (e) {
        for (var t = new Array, i = 0; i < this.dependentTransitions.length; i++) this.dependentTransitions[i].GetName() != e.GetName() && t.push(this.dependentTransitions[i]);
        this.dependentTransitions = t
    }, this.RegisterTransition = function (e) {
        for (var t = !1, i = 0; i < this.dependentTransitions.length; i++)
            if (this.dependentTransitions[i].GetName() == e.GetName()) {
                t = !0;
                break
            }
        t || this.dependentTransitions.push(e)
    }, this.UnregisterTransition = function (e) {
        for (var t = new Array, i = 0; i < this.dependentTransitions.length; i++) this.dependentTransitions[i].GetName() != e.GetName() && t.push(this.dependentTransitions[i]);
        this.dependentTransitions = t
    }, this.getRectPos = function () {
        var e = this.rectangle.getAbsolutePosition(),
            t = e.x,
            i = e.y;
        return {
            xl: t,
            yl: i,
            xr: t + this.rectangle.getWidth() * this.manager.Layer.getScaleX(),
            yr: i + this.rectangle.getHeight() * this.manager.Layer.getScaleY()
        }
    }, this.getIntersectingActivity = function (e) {
        var t = this.getRectPos();
        return e.x >= t.xl && e.x < t.xr && e.y >= t.yl && e.y < t.yr
    }, this.getIntersectingActivityRect = function (e) {
        var t = this.getRectPos();
        return !(e.xl > t.xr || e.xr < t.xl || e.yl > t.yr || e.yr < t.yl)
    }, this.ShowInlineProperties = function () {
        var e = WorkflowDesignerConstants.ActivityFormLabel,
            i = t.graph.data.AdditionalParams.InlinedSchemeCodes,
            n = {
                type: "form",
                title: e.TitleForInline,
                width: "800px",
                data: this.item,
                elements: [{
                    name: e.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: e.Scheme,
                    field: "SchemeCode",
                    type: "select",
                    datasource: i,
                    width: "100%"
                }],
                graph: t.graph,
                readonly: t.graph.Settings.readonly,
                saveFunc: function (e) {
                    t.item.Name = e.Name, t.item.SchemeCode = e.SchemeCode, WorkflowDesignerCommon.DataCorrection(t.graph.data), t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.activity) this.graph.Settings.forms.activity(n);
        else {
            var a = new WorkflowDesignerForm(n),
                o = function (e, i) {
                    var n = !0;
                    return n &= e.CheckRequired([i], ["Name", "Scheme"], WorkflowDesignerConstants.FieldIsRequired), t.graph.data.Activities.forEach(function (a) {
                        a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                    }), n
                },
                r = function (e) {
                    return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0)
                };
            a.showModal(r)
        }
    }, this.ShowProperties = function () {


        var e;
        if (this.group) return void this.ShowGroup();
        if ("Inline" === this.item.ActivityType) return void this.ShowInlineProperties();
        var i = WorkflowDesignerConstants.ActivityFormLabel,
            n = [{
                name: i.ImpAction,
                code: "impAction",
                field: "ActionName",
                type: "select",
                datasource: t.graph.getActionNames(),
                onchange: function (e) {
                    var t = $(e),
                        i = t.closest("tr").find("[name=impparam]").closest("td"),
                        n = i.children(),
                        a = n[0].rebuild($(e).val(), n.find("input").val());
                    n.remove(), i.append(a)
                }
            }, {
                name: i.ImpActionParameter,
                code: "impparam",
                field: "ActionParameter",
                type: "jsonparameter",
                graph: t.graph,
                parametertype: "Action",
                openautocompleteonclick: !0,
                datasource: function (e, i) {
                    var n = $(this).closest("tr"),
                        a = n.find("[name=impAction]")[0].value;
                    i(t.graph.getAutoCompleteSuggestions("actionparameter", a, e))
                }
            }],
            a = {
                type: "form",
                title: i.Title,
                data: this.item,
                elements: [{
                    type: "group",
                    elements: [{
                        name: i.Name,
                        field: "Name",
                        type: "select",
                        datasource: [
                            "WorkFlow Start", "Workorder Approval",
                            "Workorder Cancelled", "Processing Facility",
                            "Shipping Type", "Get Quote and confirm from different carriers",
                            "Box Shipping Type", "Pickup by Third Party(Sending Email)",
                            "Box Pick (Fulfillment)", "Generate and send Reclaim Label",
                            "Generate and send label through email", "Truck Vendor",
                            "Get confirmed dates for pickup and schedule(Third)", "Send to Click soft",
                            "Generate Return Label", "Shipping", "Parcel Receive", "Load Pickup from customer location",
                            "Load Recieve at facility","Capture Pallet details from Load", "Sort", "Test ",
                            "Repair",
                            "Harvest","Imaging",
                            "Recycle FG",
                            "De - install",
                            "Data Erasure",
                            "Shredding",
                            "Degaussing",
"Crushing / Punching",
"Pulverize",
"Drill",
"Payment",
"Upload Asset information by Third Party",
"Finished Goods(Inventory)",
"Generate Report to Customer",
"Get Confirmation on the Report from Customer",
"Invoice Generation",
"Payment(Asset Recovery & Processing fees)"
],
                        width: "100%"

                    }, {
                        name: i.State,
                        field: "State",
                            type: "select",
                        datasource: ["Account Manager","Pickup Executive",
                            "Warehouse Executive",
                        "Truck Vendor"],
                        width: "100%"
                    }]
                }, /*{
                    type: "group",
                    elements: [{
                        name: i.IsInitial,
                        field: "Initial",
                        type: "checkbox"
                    }, {
                        name: i.IsFinal,
                        field: "Final",
                        type: "checkbox"
                    }, {
                        name: i.IsForSetState,
                        field: "IsForSetState",
                        type: "checkbox"
                    }, {
                        name: i.IsAutoSchemeUpdate,
                        field: "IsAutoSchemeUpdate",
                        type: "checkbox"
                    }]
                },*/ {
                    name: i.Implementation,
                    field: "Implementation",
                    type: "table",
                    elements: n
                }, /*{
                    name: i.PreExecutionImplementation,
                    field: "PreExecutionImplementation",
                    type: "table",
                    elements: n
                }, {
                    name: i.Annotations,
                    type: "table",
                    field: "Annotations",
                    keyproperty: "Name",
                    elements: [{
                        name: i.AnnotationName,
                        field: "Name",
                        type: "input"
                    }, {
                        name: i.AnnotationValue,
                        field: "JsonValue",
                        type: "json"
                    }]
                }*/],
                graph: t.graph,
                readonly: t.graph.Settings.readonly,
                saveFunc: function (e) {
                    if (Array.isArray(e.Implementation)) {
                        var i = 1;
                        e.Implementation.forEach(function (e) {
                            e.Order = i, i++
                        })
                    }
                    if (Array.isArray(e.PreExecutionImplementation)) {
                        var i = 1;
                        e.PreExecutionImplementation.forEach(function (e) {
                            e.Order = i, i++
                        })
                    }
                    t.item.Name = e.Name, t.item.State = e.State,
                        //t.item.IsInitial = e.IsInitial, t.item.IsFinal = e.IsFinal, t.item.IsForSetState = e.IsForSetState, t.item.IsAutoSchemeUpdate = e.IsAutoSchemeUpdate, 
                        t.item.Implementation = e.Implementation,
                        //t.item.PreExecutionImplementation = e.PreExecutionImplementation, t.item.Annotations = e.Annotations,
                        WorkflowDesignerCommon.DataCorrection(t.graph.data), t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.activity) this.graph.Settings.forms.activity(a);
        else {
            e = new WorkflowDesignerForm(a);
            var o = function (e, i) {
                var n = !0;
                return n &= e.CheckRequired([i], ["Name"], WorkflowDesignerConstants.FieldIsRequired), t.graph.data.Activities.forEach(function (a) {

                    a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                }), e.CheckRequired(i.Implementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired)
                    //||
                    //(n = !1), e.CheckRequired(i.PreExecutionImplementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired) ||
                    //(n = !1), e.CheckRequired(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) ||
                    //(n = !1), e.CheckUnique(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)
                    //||
                    //(n = !1), i.Annotations.forEach(function (a) {
                    //a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                    //}
                    //)
                    , n
            },
                r = function (t) {
                    return !!o(e, t) && (e.ClearTempField(t), e.parameters.saveFunc(t), !0)
                };
            e.showModal(r)
        }
    }, this.ShowGroup = function () {
        new WorkflowDesignerForm({
            type: "form",
            title: this.GetName(),
            data: this.manager.graph.data,
            elements: [{
                type: "scheme",
                group: this.item.DesignerSettings.Group
            }],
            graph: t.graph,
            readonly: !0
        }).showModal()
    }, this.Sync = function () {
        if (t.group) {
            void 0 == t.item.DesignerSettings.InlineElementSettings && (t.item.DesignerSettings.InlineElementSettings = {});
            var e = t.control.getPosition();
            t.item.DesignerSettings.InlineElementSettings.X = e.x, t.item.DesignerSettings.InlineElementSettings.Y = e.y
        } else {
            void 0 == t.item.DesignerSettings && (t.item.DesignerSettings = {});
            var e = t.control.getPosition();
            t.item.DesignerSettings.X = e.x, t.item.DesignerSettings.Y = e.y
        }
        t.oldpos = void 0
    }, this.createExInfo = function (e) {
        var i = "";
        Array.isArray(t.item.Implementation) && t.item.Implementation.length > 0 && t.item.Implementation.forEach(function (e) {
            i.length > 0 && (i += ", "), i += e.ActionName
        });
        var n = "";
        if (Array.isArray(t.item.PreExecutionImplementation) && t.item.PreExecutionImplementation.length > 0 && (t.item.PreExecutionImplementation.forEach(function (e) {
            n.length > 0 && (n += ", "), n += e.ActionName
        }), "" == i && (i = WorkflowDesignerConstants.None)), i.length > 0) {
            var a = new Konva.Text({
                x: 10,
                y: this.graph.Settings.DefaultActivityHeight + 5,
                text: i,
                fontFamily: "Arial",
                fontSize: 12,
                fill: "#4A4A4A",
                fontStyle: "bold"
            });
            if (e.add(a), n.length > 0) {
                var o = new Konva.Text({
                    x: 10,
                    y: this.graph.Settings.DefaultActivityHeight + a.getHeight() + 5,
                    text: n,
                    fontFamily: "Arial",
                    fontSize: 12,
                    fill: "#4A4A4A",
                    fontStyle: "italic"
                });
                e.add(o)
            }
        }
    }, this.destroy = function () {
        this.control.destroy()
    }
}

function WorkflowGraph(e, t, i, n) {
    var a = this;
    a.container = e, a.designer = t, a.suggestionsCache = new Object, a.parametersCache = new Object, void 0 == i && (i = new Object), void 0 == i.Container && (i.Container = "container"), void 0 == i.graphwidth && (i.graphwidth = 1024), void 0 == i.graphheight && (i.graphheight = 768), void 0 == i.DefaultActivityWidth && (i.DefaultActivityWidth = 200), void 0 == i.DefaultActivityHeight && (i.DefaultActivityHeight = 60), void 0 == i.DefaultMoveStep && (i.DefaultMoveStep = 10), void 0 == i.imagefolder && (i.imagefolder = "/images/"), this.Settings = i, this.Settings.ContainerStage = this.container + "_stage", $("#" + this.container).append("<div id='" + this.Settings.ContainerStage + "' class='workflowenginecontainerstage'></div>"), this.Stage = new Konva.Stage({
        container: this.Settings.ContainerStage,
        width: parseInt(this.Settings.graphwidth),
        height: parseInt(this.Settings.graphheight)
    }), this.getParam = function (e) {
        var t = this.designer.getParam(e);
        return "true" === t || "false" !== t && t
    }, this.setParam = function (e, t) {
        this.designer.setParam(e, t)
    }, this.Components = new Array, this.AddComponent = function (e) {
        var t = new e;
        return t.init(this), a.Components.push(t), t
    }, this.GetComponentByType = function (e) {
        for (var t = 0; t < this.Components.length; t++)
            if (this.Components[t].type == e) return this.Components[t]
    }, this.ComponentsExecute = function (e, t) {
        a.Components.forEach(function (i) {
            i[e] && i[e](t)
        })
    }, n && n.forEach(function (e) {
        a.AddComponent(e)
    }), this.Draw = function (e) {
        a.data = e, 0 == a.graphData.length && a.StoreGraphData(), a.onSelectionChanged(), a.ComponentsExecute("draw")
    }, this.GraphLayerSetOffset = function (e, t) {
        a.ComponentsExecute("LayerSetOffset", {
            x: e,
            y: t
        }), a.redrawAll()
    }, this.GraphLayerScale = function (e, t) {
        void 0 == a._bg && (a._bg = a.GetComponentByType("WorkflowDesignerBackground"));
        var i = a._bg.BackgroundLayer.getScale(),
            n = i.x + e;
        n > .3 && n < 2 && (a.ComponentsExecute("LayerScale", {
            scale: i.x,
            delta: e
        }), void 0 != t && a.ComponentsExecute("setPosition", t), a.redrawAll())
    }, this.GraphLayerScaleNorm = function () {
        a.ComponentsExecute("LayerScaleNorm", 1), a.redrawAll()
    }, this.GraphUpdatePosition = function (e) {
        void 0 == a._bg && (a._bg = a.GetComponentByType("WorkflowDesignerBackground")), a._bg.updatePosition(e), a.redrawAll()
    }, this.Refresh = function () {
        a.designer.refresh()
    }, this.onFullScreenClick = function () {
        void 0 !== this.data.__loadParams && this.data.__loadParams.isFullScreen ? (this.setFullScreen(!1), this.data.__loadParams.isFullScreen = !1) : (this.setFullScreen(!0), void 0 === this.data.__loadParams && (this.data.__loadParams = {}), this.data.__loadParams.isFullScreen = !0), this.redrawAll()
    }, this.setFullScreen = function (e) {
        var t = $("#" + this.container);
        void 0 == this._toolbar && (this._toolbar = this.GetComponentByType("WorkflowDesignerToolbar"));
        var i = this._toolbar;
        if (e) {
            this.originalContainerStyle = t.attr("style"), void 0 == this.originalContainerStyle && (this.originalContainerStyle = ""), this.originalWidth = this.Stage.width(), this.originalHeight = this.Stage.height();
            var n = $(window).width() - 2,
                a = $(window).height() - 2;
            this.Stage.hide(), this.Stage.width(n), this.Stage.height(a), void 0 != i && (i.setItemActive("fullscreen", !0), i.changeSize(n, a)), t.css({
                position: "absolute",
                top: 0,
                left: 0,
                width: n,
                height: a,
                "z-index": 1e3,
                background: "white"
            }), this.Stage.show()
        } else void 0 != this.originalContainerStyle && void 0 != this.originalWidth && void 0 != this.originalHeight && (this.Stage.hide(), t.attr("style", this.originalContainerStyle), this.Stage.width(this.originalWidth), this.Stage.height(this.originalHeight), void 0 != i && (i.setItemActive("fullscreen", !1), i.changeSize(this.originalWidth, this.originalHeight)), this.Stage.show())
    }, this.DeselectAll = function () {
        a.ComponentsExecute("DeselectAll"), a.onSelectionChanged(!1), a.redrawAll()
    }, this.SelectAll = function () {
        a.ComponentsExecute("SelectAll"), a.onSelectionChanged(!1), a.redrawAll()
    }, this.redrawAll = function () {
        void 0 == this._toolbal && (this._toolbal = a.GetComponentByType("WorkflowDesignerToolbar")), void 0 != this._toolbal && this._toolbal.draw(), a.Stage.batchDraw()
    }, this.CorrectPossition = function (e, t) {
        return 0 == t.getScaleX() || 0 == t.getScaleY() ? {
            x: t.getOffsetX(),
            y: 0
        } : {
                x: e.x / t.getScaleX() + t.getOffsetX(),
                y: e.y / t.getScaleY() + t.getOffsetY()
            }
    }, this.DeleteSelected = function () {
        var e = this,
            t = new Array;
        this.Components.forEach(function (e) {
            e.GetSelected && (t = t.concat(e.GetSelected()))
        }), t.length > 0 && e.confirm(WorkflowDesignerConstants.DeleteConfirm, function () {
            t.forEach(function (e) {
                e.Delete()
            }), e.onSelectionChanged(!1), e.StoreGraphData(), e.redrawAll()
        })
    }, this.confirm = function (e, t) {
        var i = $('<div class="ui mini modal"></div>');
        i.append($('<div class="content"><p>' + e + "</p></div>"));
        var n = $('<div class="actions"></div>').append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextYes + "</div>").append('<div class="ui secondary  cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>");
        i.append(n), WorkflowDesignerCommon.modal(i, {
            onApprove: function () {
                t()
            }
        }), WorkflowDesignerCommon.modal(i, "show")
    }, this.destroy = function () {
        if (void 0 != this.originalContainerStyle) {
            $("#" + this.container).attr("style", this.originalContainerStyle)
        }
        void 0 != this.data && (void 0 == this.data.__loadParams && (this.data.__loadParams = {}), this.data.__loadParams.graphData = this.graphData, this.data.__loadParams.graphDataIndex = this.graphDataIndex), this.Stage.destroy(), this.ComponentsExecute("destroy")
    }, this.GetCurrentActivity = function () {
        if (void 0 != a.data && void 0 != a.data.AdditionalParams && void 0 != a.data.AdditionalParams.ProcessParameters)
            for (var e = 0; e < a.data.AdditionalParams.ProcessParameters.length; e++) {
                var t = a.data.AdditionalParams.ProcessParameters[e];
                if ("CurrentActivity" === t.Name) return t.Value
            }
    }, this.isCurrentActivityForSubprocess = function (e) {
        if (void 0 == a.data || void 0 == a.data.AdditionalParams || !Array.isArray(a.data.AdditionalParams.SubprocessCurrentActivities)) return !1;
        for (var t = 0; t < a.data.AdditionalParams.SubprocessCurrentActivities.length; t++)
            if (e === a.data.AdditionalParams.SubprocessCurrentActivities[t]) return !0;
        return !1
    }, this.IsGroupActive = function (e) {
        var t = this.GetCurrentActivity();
        if (void 0 == t) return !1;
        for (var i = 0; i < a.data.Activities.length; i++) {
            var n = a.data.Activities[i];
            if (t === n.Name) return a.CheckActive(n, e)
        }
        return !1
    }, this.CheckActive = function (e, t) {
        var i = this,
            n = e.DesignerSettings.Group;
        if (n === t) return !0;
        var a = null;
        if (void 0 !== e.DesignerSettings.InlineElementSettings && null !== e.DesignerSettings.InlineElementSettings && void 0 !== e.DesignerSettings.InlineElementSettings.Group && null !== e.DesignerSettings.InlineElementSettings.Group) a = e;
        else
            for (var o = 0; o < i.data.Activities.length; o++) {
                var r = i.data.Activities[o];
                if (r.DesignerSettings.Group === n && void 0 !== r.DesignerSettings.InlineElementSettings && null !== r.DesignerSettings.InlineElementSettings && void 0 !== r.DesignerSettings.InlineElementSettings.Group && null !== r.DesignerSettings.InlineElementSettings.Group) {
                    a = r;
                    break
                }
            }
        if (null === a) return !1;
        var s = a.DesignerSettings.InlineElementSettings.Group;
        if (s === t) return !0;
        for (var l = null, o = 0; o < i.data.Activities.length; o++) {
            var d = i.data.Activities[o];
            if (void 0 !== d.DesignerSettings.InlineElementSettings && null !== d.DesignerSettings.InlineElementSettings && d.DesignerSettings.Group === s) {
                l = d;
                break
            }
        }
        return null !== l && i.CheckActive(l, t)
    }, this.getActionParameterDefinition = function (e, t) {
        for (var i = 0; i < a.data.CodeActions.length; i++) {
            var n = a.data.CodeActions[i];
            if (n.Type === t && n.Name === e) {
                if (n.ParameterDefinitions && n.ParameterDefinitions.length > 0) return n.ParameterDefinitions;
                break
            }
        }
        return a.getCodeactionParameter(t, e)
    }, this.getActionNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.CodeActions.length; i++) {
            var n = e.data.CodeActions[i];
            "action" === n.Type.toLowerCase() && t.push(n.Name)
        }
        return e.data.AdditionalParams.Actions.concat(t)
    },
        this.getServices = function () {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            console.log(this.responseText);
            if (this.readyState === 4 && this.status === 200) {
                alert(this.responseText);
            }
        };
        xhttp.open("GET", "https://localhost:44381/api/WorkOrder/GetServices", true);

        }

        this.getConditionNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.CodeActions.length; i++) {
            var n = e.data.CodeActions[i];
            "condition" === n.Type.toLowerCase() && t.push(n.Name)
        }
        return e.data.AdditionalParams.Conditions.concat(t)
    }, this.getActorNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.CodeActions.length; i++) {
            var n = e.data.CodeActions[i];
            "ruleget" !== n.Type.toLowerCase() && "rulecheck" !== n.Type.toLowerCase() || t.push(n.Name)
        }
        return e.unique(e.data.AdditionalParams.Rules.concat(t))
    }, this.getTypeNames = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.Parameters.length; i++) {
            var n = e.data.Parameters[i];
            t.push(decodeURIComponent(n.Type))
        }
        return e.unique(e.data.AdditionalParams.Types.concat(t))
    }, this.getCodeactionParameter = function (e, t) {
        var i = null;
        return void 0 !== this.parametersCache[e] && void 0 !== this.parametersCache[e][t] ? i = this.parametersCache[e][t] : (void 0 === this.parametersCache[e] && (this.parametersCache[e] = new Object), i = this.designer.requestcodeactionparameter(e, t), this.parametersCache[e][t] = i), i
    }, this.getAutoCompleteSuggestions = function (e, t, i) {
        var n;
        return void 0 === t || "" === t ? new Array : (void 0 != this.suggestionsCache[e] && void 0 != this.suggestionsCache[e][t] ? n = this.suggestionsCache[e][t] : (void 0 == this.suggestionsCache[e] && (this.suggestionsCache[e] = new Object), n = this.designer.requestautocompletesuggestions(e, t), this.suggestionsCache[e][t] = n), $.grep(n, function (e) {
            return e.toLowerCase().indexOf(i.toLowerCase()) >= 0
        }))
    }, this.getNonSystemParameters = function () {
        for (var e = this, t = new Array, i = 0; i < e.data.Parameters.length; i++) {
            var n = e.data.Parameters[i];
            "system" != n.Purpose.toLowerCase() && t.push(n)
        }
        return t
    }, this.unique = function (e) {
        return $.grep(e, function (t, i) {
            return i === $.inArray(t, e)
        })
    }, this.setInlinedFlag = function (e) {
        this.data.CanBeInlined = e, a.StoreGraphData()
    }, this.graphData = [], this.graphDataIndex = -1, this.StoreGraphData = function () {
        var e = void 0;
        void 0 != this.data.__loadParams && (e = this.data.__loadParams.graphData, this.data.__loadParams.graphData = void 0);
        var t = JSON.stringify(this.data);
        if (void 0 != e && (this.data.__loadParams.graphData = e), this.graphDataIndex < 0 || this.graphData[this.graphDataIndex] != t) {
            this.graphDataIndex++ , this.graphData.length > this.graphDataIndex && this.graphData.splice(this.graphDataIndex, this.graphData.length - this.graphDataIndex), this.graphData.push(t);
            var i = 200;
            void 0 != WorkflowDesignerConstants.UndoDepth && (i = WorkflowDesignerConstants.UndoDepth), this.graphData.length > i && (this.graphData.splice(0, 1), this.graphDataIndex--)
        }
        this.сheckToolbarButtonState()
    }, this.ClearGraphData = function () {
        this.graphData = [], this.graphDataIndex = -1
    }, this.Undo = function () {
        this.graphDataIndex > 0 && this.changeGraphDataIndex(this.graphDataIndex - 1)
    }, this.Redo = function () {
        this.graphData.length > this.graphDataIndex && this.changeGraphDataIndex(this.graphDataIndex + 1)
    }, this.changeGraphDataIndex = function (e) {
        if (this.graphData.length > e) {
            var t = JSON.parse(this.graphData[e]);
            WorkflowDesignerCommon.DataCorrection(t), this.designer.data = t, this.Draw(t), this.graphDataIndex = e
        }
        this.сheckToolbarButtonState()
    }, this.сheckToolbarButtonState = function () {
        void 0 == this._toolbal && (this._toolbal = a.GetComponentByType("WorkflowDesignerToolbar"));
        var e = this._toolbal;
        void 0 != e && (e.setItemDisabled("undo", this.graphDataIndex <= 0), e.setItemDisabled("redo", this.graphData.length <= this.graphDataIndex + 1), e.onChangeScheme(), e.Layer.batchDraw())
    }, this.onSelectionChanged = function (e) {
        void 0 == this._toolbal && (this._toolbal = a.GetComponentByType("WorkflowDesignerToolbar"));
        var t = this._toolbal;
        if (void 0 != t) {
            var i;
            if (void 0 == e) {
                var n = a.GetComponentByType("WorkflowDesignerActivityManager"),
                    o = a.GetComponentByType("WorkflowDesignerTransitionManager"),
                    r = n.GetSelected(),
                    s = o.GetSelected();
                i = r.length > 0 || s.length > 0
            } else i = e;
            t.setItemDisabled("copy", !i),
                t.setItemDisabled("delete", !i)
        }
    }
}

function WorkflowDesignerTransitionControl(e) {
    var t = this;
    this.manager = e.manager, this.graph = e.graph, this.from = e.from, this.to = e.to, this.item = e.item, this.group = e.group, this.setFrom = function (e) {
        this.from = e, this.item.From = e.item
    }, this.setTo = function (e) {
        this.to = e, this.item.To = e.item
    }, this.GetName = function () {
        return this.item.Name
    }, this.SetName = function (e) {
        this.item.Name = e
    }, this.control = void 0, this.arrow = void 0, this.line = void 0, void 0 != this.item.DesignerSettings && void 0 != this.item.DesignerSettings.X && void 0 != this.item.DesignerSettings.Y && (this.middle = {
        x: Number(this.item.DesignerSettings.X),
        y: Number(this.item.DesignerSettings.Y)
    }), this.from.RegisterTransition(this), this.to.RegisterTransition(this), this.start = void 0, this.end = void 0, this.angle = void 0, this.activePoint = void 0, this.touchpoints = [], this.DrawTransition = function (e, t) {
        var i, n, a, o, r = this,
            s = this.from.rectangle,
            l = this.to.rectangle;
        i = Number(this.from.getX()), n = Number(this.from.getY()), a = Number(this.to.getX()), o = Number(this.to.getY());
        var d = Number(s.attrs.width / 2),
            c = Number(s.attrs.height / 2),
            h = Number(l.attrs.width / 2),
            u = Number(l.attrs.height / 2),
            m = i + d,
            g = n + c,
            f = a + h,
            p = o + u;
        if (this.direction = {
            start: 0,
            end: 0
        }, this.from == this.to) this.start = {
            x: m + d,
            y: g - c + 14
        }, this.end = {
            x: f + h - 25,
            y: p - u
        }, this.direction.end = 1, void 0 == this.middle && (this.middle = {
            x: m + d + c,
            y: g - 2 * c
        });
        else {
            var v = !1;
            void 0 == this.middle && (v = !0, this.middle = {
                x: (m + f) / 2,
                y: (g + p) / 2
            });
            var y = m,
                w = g,
                S = f,
                b = p;
            if (g - c - 25 > this.middle.y && p - u - 25 > this.middle.y ? (w = g - c, b = p - u, this.direction.start = 1, this.direction.end = 1) : g + c + 25 < this.middle.y && p + u + 25 < this.middle.y ? (w = g + c, b = p + u, this.direction.start = 1, this.direction.end = 1) : m - d - 25 > this.middle.x && f - h - 25 > this.middle.x ? (y = m - d, S = f - h) : m + d + 25 < this.middle.x && f + h + 25 < this.middle.x ? (y = m + d, S = f + h) : (m + d + 25 < this.middle.x ? y += d : m - d - 25 > this.middle.x ? y -= d : g + c + 25 < this.middle.y ? (w += c, this.direction.start = 1) : g - c - 25 > this.middle.y ? (w -= c, this.direction.start = 1) : y <= this.middle.x ? y += d : y -= d, f + h + 25 < this.middle.x ? S += h : f - h - 25 > this.middle.x ? S -= h : p + u + 25 < this.middle.y ? (b += u, this.direction.end = 1) : p - u - 25 > this.middle.y ? (b -= u, this.direction.end = 1) : (w >= this.middle.y ? b += u : b -= u, this.direction.end = 1)), void 0 != e && (y = e.x, w = e.y, v = !0), void 0 != t && (S = t.x, b = t.y, v = !0), this.start = {
                x: y,
                y: w
            }, this.end = {
                x: S,
                y: b
            }, v) {
                this.middle = {
                    x: (y + S) / 2,
                    y: (w + b) / 2
                };
                for (var C = 0; C < r.manager.ItemControls.length; C++) {
                    var D = r.manager.ItemControls[C];
                    D != r && D.middle.x == r.middle.x && D.middle.y == r.middle.y && (0 == r.direction.start ? r.middle.y += 40 : r.middle.x += 40)
                }
            }
            void 0 == e && (0 == this.direction.start ? this.middle.y > w + c - 7 ? w += c - 7 : this.middle.y < w - c + 7 ? w -= c - 7 : w = this.middle.y : this.middle.x > y + d - 10 ? y += d - 10 : this.middle.x < y - d + 10 ? y -= d - 10 : y = this.middle.x), void 0 == t && (0 == this.direction.end ? this.middle.y > b + u - 7 ? b += u - 7 : this.middle.y < b - u + 7 ? b -= u - 7 : b = this.middle.y : this.middle.x > S + h - 10 ? S += h - 10 : this.middle.x < S - h + 10 ? S -= h - 10 : S = this.middle.x), this.start = {
                x: y,
                y: w
            }, this.end = {
                x: S,
                y: b
            }
        }
        this.points = this.GetPoints([this.start.x, this.start.y, this.middle.x, this.middle.y, this.end.x, this.end.y], this.direction);
        var T = this.GetColor();
        if (this.angle = Math.atan2(this.points[this.points.length - 1] - this.points[this.points.length - 3], this.points[this.points.length - 2] - this.points[this.points.length - 4]), void 0 == this.control) {
            this.control = new Konva.Group({
                x: 0,
                y: 0,
                rotation: 0
            }), this.arrow = WorkflowDesignerCommon.createArrowByAngle(this.end.x, this.end.y, this.angle, 15, T);
            var k = {
                points: this.points,
                stroke: T,
                strokeWidth: 2,
                lineCap: "round",
                lineJoin: "round"
            };
            this.item.IsFork && (k.dash = [10, 10]), this.line = new Konva.Line(k), this.control.add(this.line), this.control.add(this.arrow), this.manager.Layer.add(this.control)
        } else WorkflowDesignerCommon.updateArrowByAngle(this.arrow, this.end.x, this.end.y, this.angle, 15, T), this.line.setPoints(this.points)
    }, this.GetPoints = function (e, t) {
        if (e[0] == e[2] == e[4] || e[1] == e[3] == e[5]) return e;
        var i = new Array;
        return e[0] == e[2] || e[1] == e[3] ? i.push(e[0], e[1], e[2], e[3]) : (i.push(e[0], e[1]), 0 == t.start ? i.push(e[2], e[1]) : i.push(e[0], e[3]), i.push(e[2], e[3])), 0 == t.end && i[i.length - 2] != e[4] ? i.push(i[i.length - 2], e[5]) : 1 == t.end && i[i.length - 1] != e[5] && i.push(e[4], i[i.length - 1]), i.push(e[4], e[5]), i
    }, this.GetColor = function () {
        var e = void 0 == this.item.Classifier ? "notspecified" : this.item.Classifier.toLowerCase();
        return "notspecified" == e ? "#7F8C8D" : "direct" == e ? "#27AE60" : "#2980B9"
    }, this.DrawActivePoint = function () {
        if (this.activePoint) this._moveActivePoint(this.middle.x, this.middle.y);
        else {
            var e = void 0;
            void 0 != this.graph.Settings.drawElements && void 0 != this.graph.Settings.drawElements.transitionActivePoint && (e = this.graph.Settings.drawElements.transitionActivePoint(this, this.middle.x, this.middle.y)), e || (e = this.graph.Settings.transitionActivePointOldStyle ? this._createActivePointOld(this.middle.x, this.middle.y, this.control) : this._createActivePoint(this.middle.x, this.middle.y, this.control)), t.manager.APLayer.add(e), this.activePoint = e
        }
    }, this.DrawTouchPoints = function () {
        this._getLineLength(this.start.x, this.start.y, this.end.x, this.end.y);
        if (void 0 == this.touchpoints[0] || this.touchpoints[0].isdestroyed) {
            var e = this._createTouchPoint(this.points, this.control, !1);
            t.manager.APLayer.add(e), this.touchpoints[0] = e
        } else this._moveTouchPoints(this.touchpoints[0], this.points, !1);
        if (void 0 == this.touchpoints[1] || this.touchpoints[1].isdestroyed) {
            var i = this._createTouchPoint(this.points, this.control, !0);
            t.manager.APLayer.add(i), this.touchpoints[1] = i
        } else this._moveTouchPoints(this.touchpoints[1], this.points, !0)
    }, this.Draw = function (e, t) {
        this.DrawTransition(e, t), this.DrawActivePoint(), this.graph.Settings.readonly || this.DrawTouchPoints()
    }, this.DeleteTouchPoint = function (e) {
        for (var t = 0; t < this.touchpoints.length; t++) this.touchpoints[t].isend === e && (this.touchpoints[t].destroy(), this.touchpoints[t].isdestroyed = !0)
    }, this.Delete = function () {
        this.from.UnregisterTransition(this), this.to.UnregisterTransition(this), this.control.destroy(), void 0 != this.activePoint.ToolTip && this.activePoint.ToolTip.destroy(), this.activePoint.destroy();
        for (var e = 0; e < this.touchpoints.length; e++) this.touchpoints[e].destroy();
        var t = this.graph.data.Transitions.indexOf(this.item);
        t >= 0 && this.graph.data.Transitions.splice(t, 1), t = this.manager.ItemControls.indexOf(this), t >= 0 && this.manager.ItemControls.splice(t, 1)
    }, this._onDelete = function () {
        t.graph.confirm(WorkflowDesignerConstants.DeleteConfirmCurrent, function () {
            t.Delete(), t.graph.onSelectionChanged(), t.graph.redrawAll(), t.graph.StoreGraphData()
        })
    }, this.Select = function () {
        if (1 != this.selected) {
            var e = this;
            if (e.oldstroke = this.line.getStroke(), e.line.setStroke(WorkflowDesignerConstants.SelectColor), e.line.setStrokeWidth(3), void 0 == e.bar) {
                var t = e.graph.Settings.imagefolder,
                    i = -15,
                    n = [];
                e.graph.Settings.notshowwindows || n.push({
                    img: t + "wfe.settings.png",
                    click: function () {
                        e.ShowProperties()
                    }
                }), e.graph.Settings.readonly || (n.push({
                    img: t + "wfe.delete.png",
                    click: function () {
                        e._onDelete()
                    }
                }), i = -30), n.length > 0 && (e.bar = WorkflowDesignerBar(e.manager.APLayer, n, {
                    x: i,
                    y: -50
                }), e.activePoint.add(e.bar))
            } else this.bar.show();
            e.selected = !0
        }
    }, this.Deselect = function () {
        0 != this.selected && (this.line.setStrokeWidth(2), void 0 != this.oldstroke && this.line.setStroke(this.oldstroke), void 0 != this.bar && this.bar.hide(), this.selected = !1)
    }, this._moveTouchPoints = function (e, t, i) {
        var n = i ? {
            x: t[t.length - 2],
            y: t[t.length - 1]
        } : {
                x: t[0],
                y: t[1]
            },
            a = i ? {
                x: t[t.length - 4],
                y: t[t.length - 3]
            } : {
                    x: t[2],
                    y: t[3]
                },
            o = {
                x: 0,
                y: 0
            },
            r = i ? 24 : 10;
        n.x == a.x ? n.y < a.y ? o.y = r : o.y = -r : n.y == a.y && (n.x < a.x ? o.x = r : o.x = -r), e.setPosition(n), e.circle.setPosition(o)
    }, this._createTouchPoint = function (e, t, i) {
        var n = this,
            a = i ? {
                x: e[e.length - 2],
                y: e[e.length - 1]
            } : {
                    x: e[0],
                    y: e[1]
                },
            o = i ? {
                x: e[e.length - 4],
                y: e[e.length - 3]
            } : {
                    x: e[2],
                    y: e[3]
                },
            r = {
                x: 0,
                y: 0
            },
            s = i ? 24 : 10;
        a.x == o.x ? a.y < o.y ? r.y = s : r.y = -s : a.y == o.y && (a.x < o.x ? r.x = s : r.x = -s);
        var l = new Konva.Group({
            x: a.x,
            y: a.y,
            draggable: !0
        });
        l.isend = i;
        var d = this.GetColor(),
            c = new Konva.Circle({
                x: r.x,
                y: r.y,
                radius: 5,
                fill: d
            });
        l.add(c), l.circle = c, l.transition = t;
        var h = function () {
            var e = n.graph.CorrectPossition(c.getAbsolutePosition(), n.manager.Layer);
            i ? n.DrawTransition(void 0, e) : n.DrawTransition(e, void 0), n.DrawActivePoint(), n.DeleteTouchPoint(!i), n.manager.batchDraw()
        };
        return l.on("dragmove", function () {
            h()
        }), l.on("dragend", function () {
            var e = c.getAbsolutePosition(),
                t = n.manager.getIntersectingActivity(e);
            void 0 == t || t.group || (n.middle = void 0, n.Sync(), i ? (n.to.UnregisterTransition(n), n.setTo(t), n.to.RegisterTransition(n)) : (n.from.UnregisterTransition(n), n.setFrom(t), n.from.RegisterTransition(n)), n.graph.StoreGraphData()), n.Draw(), n.manager.batchDraw()
        }), l
    }, this._moveActivePoint = function (e, t) {
        this.activePoint.setPosition({
            x: e,
            y: t
        })
    }, this._createActivePoint = function (e, t, i) {
        var n = this,
            a = !n.graph.Settings.disableobjectmovements,
            o = new Konva.Group({
                x: e,
                y: t,
                draggable: a
            }),
            r = "";
        isTimer = !1;
       // var s = this.item.Trigger.Type.toLowerCase();
        var s = "auto";
        "auto" === s ? (r = WorkflowDesignerConstants.TransitionAuto, void 0 == r && (r = "Auto")) : "command" === s ? this.item.Trigger && this.item.Trigger.Command && this.item.Trigger.Command.Name && (r = this.item.Trigger.Command.Name, r.length > 15 && (r = r.substr(0, 15) + "...")) : "timer" === s && (isTimer = !0, this.item.Trigger && this.item.Trigger.Timer && this.item.Trigger.Timer.Name && (r = this.item.Trigger.Timer.Name, r.length > 15 && (r = r.substr(0, 15) + "...")));
        var l = [],
            d = [];
        isTimer && l.push(this.manager.ImageTimer), Array.isArray(this.item.Restrictions) && this.item.Restrictions.length > 0 && d.push(this.manager.ImageActor);
       // var c = this.item.Conditions[0].Type.toLowerCase();
        var c = "action";
        "action" === c ? d.push(this.manager.ImageCondition) : "otherwise" === c && d.push(this.manager.ImageOtherwise);
        var h = WorkflowDesignerCommon.getTextWidth(r, "bold 12px arial") + 2,
            u = 15 * l.length,
            m = 15 * d.length,
            g = (h + u + m) / 2,
            f = h + u + m + 10,
            p = new Konva.Text({
                x: -g + u + 1,
                y: -5,
                text: r,
                fontSize: 12,
                fontFamily: "Arial",
                fill: "#FFFFFF",
                fontStyle: "bold"
            }),
            v = new Konva.Rect({
                x: -g - 5,
                y: -12,
                width: f,
                height: 25,
                fill: n.GetColor(),
                cornerRadius: 15
            });
        o.add(v);
        for (var y = 0; y < l.length; y++) o.add(new Konva.Image({
            x: -g + 12 * y + 2,
            y: -5,
            image: l[y],
            width: 10,
            height: 10,
            strokeWidth: 0
        }));
        for (var y = 0; y < d.length; y++) o.add(new Konva.Image({
            x: -g + 2 + u + h + 12 * y,
            y: -5,
            image: d[y],
            width: 10,
            height: 10,
            strokeWidth: 0
        }));
        o.add(p), o.transition = i;
        var w = function (e, t) {
            var i = n.graph.CorrectPossition(o.getAbsolutePosition(), n.manager.Layer);
            n.middle = i, n.DrawTransition(), n.graph.Settings.readonly || n.DrawTouchPoints(), e && (n.DrawActivePoint(), n.Sync()), n.manager.batchDraw()
        },
            S = function (e) {
                if (!n.graph.Settings.disableobjectmovements) {
                    var t = n.selected;
                    e.evt.ctrlKey || n.graph.DeselectAll(), t ? n.Deselect() : n.Select(), void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide(), n.graph.onSelectionChanged(), n.manager.batchDraw()
                }
            };
        if (o.on("click", S), o.on("touchend", S), o.on("dblclick", function () {
            n.graph.DeselectAll(), n.Select(), n.manager.batchDraw(), n.graph.Settings.notshowwindows || n.ShowProperties()
        }), o.on("dragstart", function () {
            n.graph.Settings.disableobjectmovements || void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide()
        }), o.on("dragmove", function () {
            n.graph.Settings.disableobjectmovements || w(!1)
        }), o.on("dragend", function () {
            n.graph.Settings.disableobjectmovements || w(!0)
        }), 1 == n.graph.getParam("exinfo")) n.createExInfo(o);
        else {
         //   var b = this.item.Trigger.Type;
           // void 0 != n.item.Trigger && void 0 != n.item.Trigger.Command && "Command" === n.item.Trigger.Type && (b += " " + n.item.Trigger.Command.Name), void 0 != n.item.Trigger && void 0 != n.item.Trigger.Timer && "Timer" === n.item.Trigger.Type && (b += " " + n.item.Trigger.Timer.Name), b += "\r\n" + this.item.Conditions[0].Type, void 0 != n.item.Conditions[0] && "Action" === n.item.Conditions[0].Type && (b += " " + n.item.Conditions[0].Action.ActionName), WorkflowDesignerTooltip(n.manager.APLayer, o, b, 17)
        }
        return o
    }, this._createActivePointOld = function (e, t, i) {
        var n = this,
            a = !n.graph.Settings.disableobjectmovements,
            o = new Konva.Group({
                x: e,
                y: t,
                draggable: a
            }),
            r = "",
            s = this.item.Trigger.Type.toLowerCase();
        "auto" === s ? r += "A" : "command" === s ? r += "C" : "timer" === s && (r += "T");
        var l = this.item.Conditions[0].Type.toLowerCase();
        "always" === l ? r += "A" : "action" === l ? r += "C" : "otherwise" === l && (r += "O"), Array.isArray(this.item.Restrictions) && this.item.Restrictions.length > 0 && (r += "R");
        var d = new Konva.Rect({
            x: 3 == r.length ? -22 : -16,
            y: -15,
            width: 3 == r.length ? 47 : 34,
            height: 30,
            fill: n.GetColor(),
            cornerRadius: 15
        });
        o.add(d);
        var c = new Konva.Text({
            x: 3 == r.length ? -16 : -10,
            y: -7,
            text: r,
            fontSize: 16,
            fontFamily: "Arial",
            fill: "#FFFFFF",
            fontStyle: "bold"
        });
        o.add(c), o.transition = i;
        var h = function (e, t) {
            var i = n.graph.CorrectPossition(o.getAbsolutePosition(), n.manager.Layer);
            n.middle = i, n.DrawTransition(), n.graph.Settings.readonly || n.DrawTouchPoints(), e && (n.DrawActivePoint(), n.Sync()), n.manager.batchDraw()
        },
            u = function (e) {
                if (!n.graph.Settings.disableobjectmovements) {
                    var t = n.selected;
                    e.evt.ctrlKey || n.graph.DeselectAll(), t ? n.Deselect() : n.Select(), void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide(), n.graph.onSelectionChanged(), n.manager.batchDraw()
                }
            };
        if (o.on("click", u), o.on("touchend", u), o.on("dblclick", function () {
            n.graph.DeselectAll(), n.Select(), n.manager.batchDraw(), n.graph.Settings.notshowwindows || n.ShowProperties()
        }), o.on("dragstart", function () {
            n.graph.Settings.disableobjectmovements || void 0 != n.activePoint.ToolTip && n.activePoint.ToolTip.hide()
        }), o.on("dragmove", function () {
            n.graph.Settings.disableobjectmovements || h(!1)
        }), o.on("dragend", function () {
            n.graph.Settings.disableobjectmovements || h(!0)
        }), 1 == n.graph.getParam("exinfo")) n.createExInfo(o);
        else {
            var m = this.item.Trigger.Type;
            void 0 != n.item.Trigger && void 0 != n.item.Trigger.Command && "Command" === n.item.Trigger.Type && (m += " " + n.item.Trigger.Command.Name), void 0 != n.item.Trigger && void 0 != n.item.Trigger.Timer && "Timer" === n.item.Trigger.Type && (m += " " + n.item.Trigger.Timer.Name), m += "\r\n" + this.item.Conditions[0].Type, void 0 != n.item.Conditions[0] && "Action" === n.item.Conditions[0].Type && (m += " " + n.item.Conditions[0].Action.ActionName), WorkflowDesignerTooltip(n.manager.APLayer, o, m, 17)
        }
        return o
    }, this.createExInfo = function (e) {
        var i = "";
        if (void 0 != t.item.Trigger && void 0 != t.item.Trigger.Command && "Command" === t.item.Trigger.Type && (Array.isArray(t.item.Restrictions) && t.item.Restrictions.length > 0 && t.item.Restrictions.forEach(function (e) {
            if (void 0 != e.Actor) {
                var t = e.Actor.Name;
                "Restrict" == e.Type && (t = "(" + t + ")"), i.length > 0 && (i += ", "), i += t
            }
        }), i.length > 0 && (i += " -> "), i += t.item.Trigger.Command.Name), void 0 != t.item.Trigger && void 0 != t.item.Trigger.Timer && "Timer" === t.item.Trigger.Type) {
            var n = t.item.Trigger.Timer.Value;
            void 0 != n && "" != n && (i += " " + n)
        }
        if (i.length > 0) {
            var a = new Konva.Text({
                x: 0,
                y: -30,
                text: i,
                fontFamily: "Arial",
                fontSize: 12,
                fill: "#4A4A4A",
                fontStyle: "bold"
            });
            a.setX(-Number(a.getWidth() / 2)), e.add(a)
        }
        var o = "";
        if (Array.isArray(t.item.Conditions) && t.item.Conditions.length > 0 && t.item.Conditions.forEach(function (e) {
            if (void 0 != e.Action) {
                var t = e.Action.ActionName;
                1 == e.ConditionInversion && (t = "(" + t + ")"), o.length > 0 && (o += ", "), o += t
            }
        }), o.length > 0) {
            var a = new Konva.Text({
                x: 0,
                y: 20,
                text: o,
                fontFamily: "Arial",
                fontSize: 12,
                fill: "#4A4A4A",
                fontStyle: "bold"
            });
            a.setX(-Number(a.getWidth() / 2)), e.add(a)
        }
    }, this._getLineLength = function (e, t, i, n) {
        return Math.sqrt(Math.pow(i - e, 2) + Math.pow(n - t, 2))
    }, this._getBendingKoeff = function (e, t, i, n, a, o) {
        var r = t - n,
            s = i - e,
            l = e * n - i * t;
        s <= 0 && (r = -r, s = -s, l = -l);
        var d = -(l + r * a) / s,
            c = d < o ? -1 : 1,
            h = this._getLineLength(e, t, i, n),
            u = (e + i) / 2,
            m = (t + n) / 2,
            g = this._getLineLength(u, m, a, o),
            f = g / h * c;
        return 0 == s && (f = -f), f
    }, this.getIntersectingRect = function (e) {
        var t = this.activePoint.getAbsolutePosition();
        return t.x >= e.xl && t.x < e.xr && t.y >= e.yl && t.y < e.yr
    }, this.ShowProperties = function () {
        var e = WorkflowDesignerConstants.TransitionFormLabel,
            i = {
                name: e.From,
                field: "From.Name",
                type: "select",
                displayfield: "Name",
                datasource: t.graph.data.Activities,
                width: "100%"
            };
        void 0 != this.item.From && "Inline" === this.item.From.ActivityType && (i = {
            type: "group",
            width: "100%",
            elements: [i, {
                name: e.InlinedFinalActivityName,
                field: "InlinedFinalActivityName",
                type: "input",
                width: "100%"
            }]
        });
        var n = {
            type: "form",
            title: e.Title,
            data: this.item,
            readonly: this.graph.Settings.readonly,
            elements: [
                //{
                //type: "group",
                //elements: [
                //        {
                //        name: e.Name,
                //        field: "Name",
                //        type: "input",
                //        width: "100%"
                //    }, {
                //        name: e.Classifier,
                //        field: "Classifier",
                //        type: "select",
                //        width: "100%",
                //        datasource: ["Direct", "Reverse", "NotSpecified"]
                //        }
                //]
                //},
                {
                type: "group",
                elements: [i, {
                    name: e.To,
                    field: "To.Name",
                    type: "select",
                    displayfield: "Name",
                    datasource: t.graph.data.Activities,
                    width: "100%"
                }]
                },
                //{
                //field: "Trigger",
                //code: "trigger",
                //type: "form",
                //datadefault: {
                //    Type: "Command"
                //    },

                //elements: [{
                //    type: "group",
                //    elements: [{
                //        name: e.Trigger,
                //        code: "triggertype",
                //        field: "Type",
                //        type: "select",
                //        datasource: ["Auto", "Command", "Timer"]
                //    }, {
                //        name: e.TriggerCommand,
                //        code: "triggercommand",
                //        field: "Command.Name",
                //        type: "select",
                //        displayfield: "Name",
                //        datasource: t.graph.data.Commands
                //    }, {
                //        name: e.TriggerTimer,
                //        code: "triggertimer",
                //        field: "Timer.Name",
                //        type: "select",
                //        displayfield: "Name",
                //        datasource: t.graph.data.Timers
                //    }]
                //}]
                //},
                //{
                //type: "group",
                //elements: [{
                //    name: e.IsFork,
                //    field: "IsFork",
                //    code: "isfork",
                //    type: "checkbox"
                //}, {
                //    name: e.MergeViaSetState,
                //    field: "MergeViaSetState",
                //    code: "mergeviasetstate",
                //    type: "checkbox"
                //}, {
                //    name: e.DisableParentStateControl,
                //    field: "DisableParentStateControl",
                //    code: "disableparentstatecontrol",
                //    type: "checkbox"
                //}]
                //},
                {
                    name: "Work Order Attributes",
                    type: "table",
                    field: "Annotations",
                    keyproperty: "Name",
                    elements: [{
                        name: e.AnnotationName,
                        field: "Name",
                        type: "select",
                        datasource: ["Workorder Review Required",
                            "Workorder by Ingram",
                            "Type of pickup",
                            "Test or Recycle",
                            "Harevest",
                            "Imaging",
                            "De - install",

                            "Data Erasure",

                            "Shredding",

                            "Degaussing",

                            "Crushing / Punching",

                            "Pulverize",

                            "Drill",

                            "Site Survey"]
                    }, {
                        name: e.AnnotationValue,
                        field: "JsonValue",
                            type: "select",
                        datasource: ["True","False","Pickup","Delivery","Box Program"]
                    }]
                },
                {
                name: "Service Attributes",
                field: "Restrictions",
                code: "restrictions",
                type: "table",
                //datadefault: {
                //    Type: "Allow"
                //},
                elements: [{
                    name: "Name",
                    code: "resttype",
                    field: "Type",
                    type: "select",
                    datasource: ["workorder approval","Pickup Truck by"]
                }, {
                    name: "Operator",
                    code: "restactor",
                    field: "Actor.Name",
                    type: "select",
                    datasource: ["Equals","Greater Than","Less Than"]
                    },
                    {
                        name: "Value",
                        field: "JsonValue",
                        type: "select",
                        datasource: ["Approve","Reject","Ingram","Third Party"]
                    }
                        ]
                },
                //{
                //type: "group",
                //elements: [{
                //    name: e.AllowConcatenationType,
                //    field: "AllowConcatenationType",
                //    type: "select",
                //    datasource: ["And", "Or"]
                //}, {
                //    name: e.RestrictConcatenationType,
                //    field: "RestrictConcatenationType",
                //    type: "select",
                //    datasource: ["And", "Or"]
                //}]
                //},
                //{
                //    name: "Workorder Attributes",
                //    field: "Conditions",
                //    code: "condition",
                //    type: "select",
                //    elements: [
                //        {
                //            name: "Name",
                //            code: "conditiontype",
                //            type: "select",
                //            datasource: ["Workorder Review Required",
                //                "Workorder by Ingram",
                //                "Type of pickup",
                //                "Test or Recycle",
                //                "Harevest",
                //                "Imaging",
                //                "De - install",

                //                "Data Erasure",

                //                "Shredding",

                //                "Degaussing",

                //                "Crushing / Punching",

                //                "Pulverize",

                //                "Drill",

                //                "Site Survey"],
                //            width: "100%"
                //        },

                //        {
                //            name: "Value",
                //            code: "cond",
                //            type: "input",
                //            width: "100%"
                //        }
                //    ]

                //},

                //{
                //    name: e.Condition,
                //    field: "Conditions",
                //    code: "condition",
                //    type: "table",
                //    datadefault: {
                //        Type: "Always",
                //        ResultOnPreExecution: "Null"
                //    },
                //    elements: [{
                //        name: e.ConditionType,
                //        code: "conditiontype",
                //        field: "Type",
                //        type: "select",
                //        datasource: ["Workorder Review Required",
                //                "Workorder by Ingram",
                //                "Type of pickup",
                //                "Test or Recycle",
                //                "Harevest",
                //                "Imaging",
                //                "De - install",

                //                "Data Erasure",

                //                "Shredding",

                //                "Degaussing",

                //                "Crushing / Punching",

                //                "Pulverize",

                //                "Drill",

                //                "Site Survey"]
                //    }, {
                //        name: e.ConditionAction,
                //        code: "conditionaction",
                //        field: "Action.ActionName",
                //        type: "select",
                //       datasource: ["Equals","Greater than","Less than"],
                //        onchange: function (e) {
                //            var t = $(e),
                //                i = t.closest("tr").find("[name=conditionactionparameter]").closest("td"),
                //                n = i.children(),
                //                a = n[0].rebuild($(e).val(), n.find("input").val());
                //            n.remove(), i.append(a)
                //        }
                //    }, {
                //        name: e.ConditionActionParameter,
                //        code: "conditionactionparameter",
                //        field: "Action.ActionParameter",
                //        type: "input",
                //        },
                //    //    {
                //    //    name: e.ConditionInversion,
                //    //    code: "conditioninversion",
                //    //    field: "ConditionInversion",
                //    //    type: "checkbox"
                //    //}, {
                //    //    name: e.ResultOnPreExecution,
                //    //    code: "conditionresult",
                //    //    field: "ResultOnPreExecution",
                //    //    type: "select",
                //    //    datasource: ["True", "False"]
                //    //    }
                //    ],
                //    onrowadded: function (e) {
                //        var t = e.find("[name=conditiontype]"),
                //            i = e.find("[name=conditionaction]"),
                //            n = e.find("[name=conditionresult]"),
                //            a = e.find("[name=conditionactionparameter]").parent().parent(),
                //            o = e.find("[name=conditioninversion]").parent(),
                //            r = function () {
                //                "Action" === t[0].value ? (i.show(), n.show(), a.show(), o.show()) : (i.hide(), n.hide(), a.hide(), o.hide())
                //            };
                //        t.on("change", r), r()
                //    }
                //},


            //    {
            //    name: e.Condition,
            //    field: "Conditions",
            //    code: "condition",
            //    type: "table",
            //    datadefault: {
            //        Type: "Always",
            //        ResultOnPreExecution: "Null"
            //    },
            //    elements: [{
            //        name: e.ConditionType,
            //        code: "conditiontype",
            //        field: "Type",
            //        type: "select",
            //        datasource: ["Always", "Action", "Otherwise"]
            //    }, {
            //        name: e.ConditionAction,
            //        code: "conditionaction",
            //        field: "Action.ActionName",
            //        type: "select",
            //        datasource: t.graph.getConditionNames(),
            //        onchange: function (e) {
            //            var t = $(e),
            //                i = t.closest("tr").find("[name=conditionactionparameter]").closest("td"),
            //                n = i.children(),
            //                a = n[0].rebuild($(e).val(), n.find("input").val());
            //            n.remove(), i.append(a)
            //        }
            //    }, {
            //        name: e.ConditionActionParameter,
            //        code: "conditionactionparameter",
            //        field: "Action.ActionParameter",
            //        type: "jsonparameter",
            //        graph: t.graph,
            //        parametertype: "Condition",
            //        openautocompleteonclick: !0,
            //        datasource: function (e, i) {
            //            var n = $(this).closest("tr"),
            //                a = n.find("[name=conditionaction]")[0].value;
            //            i(t.graph.getAutoCompleteSuggestions("conditionparameter", a, e))
            //        }
            //    }, {
            //        name: e.ConditionInversion,
            //        code: "conditioninversion",
            //        field: "ConditionInversion",
            //        type: "checkbox"
            //    }, {
            //        name: e.ResultOnPreExecution,
            //        code: "conditionresult",
            //        field: "ResultOnPreExecution",
            //        type: "select",
            //        datasource: ["True", "False"]
            //    }],
            //    onrowadded: function (e) {
            //        var t = e.find("[name=conditiontype]"),
            //            i = e.find("[name=conditionaction]"),
            //            n = e.find("[name=conditionresult]"),
            //            a = e.find("[name=conditionactionparameter]").parent().parent(),
            //            o = e.find("[name=conditioninversion]").parent(),
            //            r = function () {
            //                "Action" === t[0].value ? (i.show(), n.show(), a.show(), o.show()) : (i.hide(), n.hide(), a.hide(), o.hide())
            //            };
            //        t.on("change", r), r()
            //    }
            //},
                //{
                //type: "group",
                //elements: [{
                //    name: e.ConditionsConcatenationType,
                //    field: "ConditionsConcatenationType",
                //    type: "select",
                //    datasource: ["And", "Or"]
                //}]
                //},
             ],
            renderFinalFunc: function (e, t) {
                var i = e.find("[name=restrictions]").parent(),
                    n = e.find("[name=triggertype]"),
                    a = e.find("[name=isfork]"),
                    o = e.find("[name=triggercommand]"),
                    r = e.find("[name=triggertimer]"),
                    s = e.find("[name=AllowConcatenationType]").parent().parent(),
                    l = e.find("[name=ConditionsConcatenationType]").parent().parent(),
                    d = e.find("[name=mergeviasetstate]").parent().parent(),
                    c = e.find("[name=disableparentstatecontrol]").parent().parent(),
                    h = function () {
                        var e = function (e) {
                            return e.prev()
                        },
                            //  a = n[0].value;
                            a = "Command";
                        "Command" == a ? (o.show(), e(o).show(), r.hide(), e(r).hide(), i.show()) : "Timer" == a ? (o.hide(), e(o).hide(), r.show(), e(r).show(), i.hide(), s.hide()) : (o.hide(), e(o).hide(), r.hide(), e(r).hide(), i.hide(), s.hide()), WorkflowDesignerCommon.modal(t.window, "refresh")
                    };
                n.on("change", h), h();
                var u = function () {
                   // a[0].checked ? (d.show(), c.show()) : (d.hide(), c.hide())
                    false ? (d.show(), c.show()) : (d.hide(), c.hide())
                };
                a.on("change", u), u();
                //var m = s.find("[name=AllowConcatenationType]")[0].value.toLowerCase(),
                //    g = s.find("[name=RestrictConcatenationType]")[0].value.toLowerCase(),
                //    f = l.find("[name=ConditionsConcatenationType]")[0].value.toLowerCase();
                //"and" === m && "and" === g && s.hide();
                //var p = e.find("[name=restrictions]").parent(),
                //    v = $('<a class="btnConcatParameters"></a>');
                //v[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters, v.on("click", function () {
                //    s.is(":visible") ? (s.hide(), v[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters) : (s.show(), v[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.HideConcatParameters), WorkflowDesignerCommon.modal(t.window, "refresh")
                //}), p.append("&nbsp;"), p.append(v), "and" === f && l.hide();
                //var y = e.find("[name=condition]").parent(),
                //    w = $('<a class="btnConcatParameters"></a>');
                //w[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters, w.on("click", function () {
                //    l.is(":visible") ? (l.hide(), w[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters) : (l.show(), w[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.HideConcatParameters), WorkflowDesignerCommon.modal(t.window, "refresh")
                //}), y.append("&nbsp;"), y.append(w), WorkflowDesignerCommon.modal(t.window, "refresh")
            },
            graph: t.graph,
            saveFunc: function (e) {
                t.item.Name = e.Name, t.item.From = {
                    Name: e.From.Name
                }, t.item.InlinedFinalActivityName = e.InlinedFinalActivityName, t.item.To = {
                    Name: e.To.Name
                }, t.item.Classifier = e.Classifier, t.item.Restrictions = e.Restrictions, t.item.Trigger = e.Trigger, t.item.Conditions = e.Conditions, t.item.IsFork = e.IsFork, t.item.MergeViaSetState = e.MergeViaSetState, t.item.DisableParentStateControl = e.DisableParentStateControl, t.item.ConditionsConcatenationType = e.ConditionsConcatenationType, t.item.AllowConcatenationType = e.AllowConcatenationType, t.item.RestrictConcatenationType = e.RestrictConcatenationType, t.item.Annotations = e.Annotations, WorkflowDesignerCommon.DataCorrection(t.graph.data), t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
            }
        };
        if (void 0 !== this.graph.Settings.forms && void 0 !== this.graph.Settings.forms.transition) this.graph.Settings.forms.transition(n);
        else {


               var  a = new WorkflowDesignerForm(n);
                var o = function (e, i) {
                    var n = !0;
                    n &= e.CheckRequired([i], ["Name"], WorkflowDesignerConstants.FieldIsRequired), n &= e.CheckRequired([i], ["Classifier"], WorkflowDesignerConstants.FieldIsRequired);
                    return t.graph.data.Transitions.forEach(function (a) {
                        a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                    })
                        , e.CheckRequired(i.Restrictions, ["Type", "Actor.Name"], WorkflowDesignerConstants.FieldIsRequired)||
                        //||
                        //(n = !1), e.CheckRequired(i.PreExecutionImplementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired) ||
                        //(n = !1), e.CheckRequired(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) ||
                        //(n = !1), e.CheckUnique(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)
                        //||
                        //(n = !1), i.Annotations.forEach(function (a) {
                        //a != t.item && a.Name == i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
                        //}
                        //)
                         (n = !1), n;
                },
                  r = function (e) {
                    return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0);
                };
                    //r = function (t) {
                    //    return !!o(e, t) && (e.ClearTempField(t), e.parameters.saveFunc(t), !0)
                    //};
            a.ClearTempField(e);
            a.showModal(r);
           // a.showModal(e)




            //var a = new WorkflowDesignerForm(n),
            //    o = function (e, i) {

            //        var n = !0;
            //        n &= e.CheckRequired([i], ["Name"], WorkflowDesignerConstants.FieldIsRequired), n &= e.CheckRequired([i], ["Classifier"], WorkflowDesignerConstants.FieldIsRequired);
            //        var a = ["Type"];
            //        //"Command" == i.Trigger.Type ? a.push("Command.Name") : "Timer" == i.Trigger.Type && a.push("Timer.Name"),
            //        //    n &= e.CheckRequired([i.Trigger], a, WorkflowDesignerConstants.FieldIsRequired),
            //        //    i.Conditions.forEach(function (t) {
            //        //    a = ["Type"], "Action" == t.Type && a.push("Action.ActionName"),
            //        //        n &= e.CheckRequired([t], a, WorkflowDesignerConstants.FieldIsRequired),
            //        //        "Always" == t.Type && i.Conditions.length > 1 ? (n = !1, e.ControlAddError(t.control_Type, WorkflowDesignerConstants.AlwaysConditionShouldBeSingle)) : "Otherwise" == t.Type && i.Conditions.length > 1 && (n = !1, e.ControlAddError(t.control_Type, WorkflowDesignerConstants.OtherwiseConditionShouldBeSingle))
            //        //});
            //      //  var o = i.control_Conditions.parent().children("h4");

            //        // changed for demo
            //        var value = false;

            //            //  (o.attr("title", void 0), o.css("color", "")),
            //        return  t.graph.data.Transitions.forEach(function (a) {
            //                a !== t.item && a.Name === i.Name && (n = !1, e.ControlAddError(i.control_Name, WorkflowDesignerConstants.FieldMustBeUnique))
            //            }), e.CheckRequired(i.Restrictions, ["Type", "Actor.Name"], WorkflowDesignerConstants.FieldIsRequired) ||
            //            //  (n = !1), e.CheckRequired(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) ||
            //            //  (n = !1), e.CheckUnique(i.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique) ||
            //            (n = !1), n;
            //    },
            //    r = function (e) {
            //        return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0);
            //    };
            //a.showModal(r)
        }
    }, this.Sync = function () {
        this.group || (t.item.DesignerSettings.Bending = t.bending, void 0 != t.middle && (t.item.DesignerSettings.X = t.middle.x, t.item.DesignerSettings.Y = t.middle.y))
    }, this.destroy = function () {
        this.control.destroy(), this.activePoint.destroy(), this.touchpoints.forEach(function (e) {
            e.destroy()
        }), void 0 != this.bar && this.bar.destroy()
    }
}

function WorkflowDesignerTransitionManagerTempControl(e) {
    this.x = e.x, this.y = e.y, this.manager = e.manager, this.control = void 0, this.Draw = function (e, t) {
        this.control = new Konva.Group({
            x: 0,
            y: 0,
            rotation: 0
        }), this.line = new Konva.Line({
            points: [this.x, this.y, e, t],
            stroke: "#FFCC99",
            strrokeWidth: 1
        });
        var i = Math.atan2(t - this.y, e - this.x);
        this.arrow = WorkflowDesignerCommon.createArrowByAngle(e, t, i, 20, "#FFCC99"), this.control.add(this.line), this.control.add(this.arrow), this.manager.Layer.add(this.control)
    }, this.Redraw = function (e) {
        this.line.setPoints([this.x, this.y, e.x, e.y]);
        var t = Math.atan2(e.y - this.y, e.x - this.x);
        WorkflowDesignerCommon.updateArrowByAngle(this.arrow, e.x, e.y, t, 20, "#FFCC99")
    }, this.Delete = function () {
        this.control.destroy()
    }
}

function WorkflowDesignerActivityManager() {
    this.type = "WorkflowDesignerActivityManager", this.init = function (e) {
        this.graph = e, this.Layer = new Konva.Layer, this.graph.Stage.add(this.Layer), this.Layer.setZIndex(1)
    }, this.ItemControls = new Array, this.draw = function () {
        null != this.ItemControls && this.ItemControls.forEach(function (e) {
            e.destroy()
        }), this.ItemControls = new Array;
        var e = this;
        void 0 != this.graph.data.Activities && this.graph.data.Activities.forEach(function (t) {
            var i, n, a = void 0;
            if (e.graph.Settings.group != t.DesignerSettings.Group) {
                if (void 0 != t.DesignerSettings.InlineElementSettings && t.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group) {
                    if ("" != t.DesignerSettings.InlineElementSettings.X && "" != t.DesignerSettings.InlineElementSettings.Y) i = Number(t.DesignerSettings.InlineElementSettings.X), n = Number(t.DesignerSettings.InlineElementSettings.Y);
                    else {
                        var o = e.GetDefaultPosition();
                        i = o.x, n = o.y
                    }
                    a = new WorkflowDesignerActivityControl({
                        x: i,
                        y: n,
                        item: t,
                        graph: e.graph,
                        manager: e,
                        group: !0
                    })
                }
            } else {
                if ("" != t.DesignerSettings.X && "" != t.DesignerSettings.Y) i = Number(t.DesignerSettings.X), n = Number(t.DesignerSettings.Y);
                else {
                    var o = e.GetDefaultPosition();
                    i = o.x, n = o.y
                }
                var a = new WorkflowDesignerActivityControl({
                    x: i,
                    y: n,
                    item: t,
                    graph: e.graph,
                    manager: e
                })
            }
            void 0 != a && (e.ItemControls.push(a), a.Draw(), a.Sync())
        }), this.Layer.batchDraw()
    }, this.CreateNewActivity = function (e, t) {
        void 0 == e && (e = this.GetDefaultPosition()), void 0 == t && (t = {
            IsAutoSchemeUpdate: !0,
            IsForSetState: !0
        }), void 0 == t.Name && (t.Name = this.GetDefaultName()), 0 == this.graph.data.Activities.length && (t.IsInitial = !0), t.DesignerSettings && (t.DesignerSettings = new {
            X: e.x,
            Y: e.y
        });
        var i = new WorkflowDesignerActivityControl({
            x: e.x,
            y: e.y,
            item: t,
            graph: this.graph,
            manager: this
        });
        return this.graph.data.Activities.push(t), this.ItemControls.push(i), i.Draw(), i.Sync(), i
    }, this.CreateNewInline = function (e, t) {
        void 0 == e && (e = this.GetDefaultPosition()), void 0 == t && (t = {
            IsAutoSchemeUpdate: !1,
            IsForSetState: !1,
            ActivityType: "Inline"
        }), void 0 == t.Name && (t.Name = this.GetDefaultName()), 0 == this.graph.data.Activities.length && (t.IsInitial = !0), t.DesignerSettings && (t.DesignerSettings = new {
            X: e.x,
            Y: e.y
        });
        var i = new WorkflowDesignerActivityControl({
            x: e.x,
            y: e.y,
            item: t,
            graph: this.graph,
            manager: this
        });
        return this.graph.data.Activities.push(t), this.ItemControls.push(i), i.Draw(), i.Sync(), i
    }, this.GetDefaultName = function () {
        for (var e = WorkflowDesignerConstants.ActivityNamePrefix, t = 1, i = 0; i < this.graph.data.Activities.length; i++) {
            this.graph.data.Activities[i].Name == e + t && (t++ , i = -1)
        }
        return e + t
    }, this.GetDefaultPosition = function () {
        for (var e = this.graph.CorrectPossition({
            x: 60,
            y: 100
        }, this.Layer), t = 2 * this.graph.Settings.DefaultMoveStep / this.Layer.getScaleX(), i = 0; i < this.ItemControls.length; i++) {
            var n = this.ItemControls[i].control.getPosition();
            n.x == e.x && n.y == e.y && (e.x += t, e.y += t, i = -1)
        }
        return e
    }, this.find = function (e) {
        if ("object" == typeof e && void 0 != e.Name) return this.find(e.Name);
        for (var t = 0; t < this.ItemControls.length; t++)
            if (this.ItemControls[t].item.Name === e) return this.ItemControls[t]
    }, this.findGroup = function (e, t) {
        for (var i = 0; i < this.graph.data.Activities.length; i++) {
            var n = this.graph.data.Activities[i];
            if (n.DesignerSettings.Group == e && void 0 != n.DesignerSettings.InlineElementSettings && n.DesignerSettings.InlineElementSettings.Group == t) return this.find(n.Name)
        }
    }, this.getIntersectingActivity = function (e) {
        for (var t = 0; t < this.ItemControls.length; t++) {
            var i = this.ItemControls[t];
            if (i.getIntersectingActivity(e)) return i
        }
    }, this.LayerSetOffset = function (e) {
        this.Layer.setOffset(e)
    }, this.LayerScale = function (e) {
        var t = (e.scale, e.delta);
        this.Layer.setScale({
            x: this.Layer.getScale().x + t,
            y: this.Layer.getScale().y + t
        })
    }, this.LayerScaleNorm = function (e) {
        this.Layer.setScale({
            x: 1,
            y: 1
        }), this.Layer.setOffset({
            x: 0,
            y: 0
        })
    }, this.redrawTransitions = function () {
        return void 0 == this.cTransition && (this.cTransition = this.graph.GetComponentByType("WorkflowDesignerTransitionManager")), this.cTransition.batchDraw()
    }, this.batchDraw = function () {
        this.Layer.batchDraw()
    }, this.SelectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Select()
        })
    }, this.DeselectAll = function () {
        this.ItemControls.forEach(function (e) {
            e.Deselect()
        })
    }, this.GetSizeForSaveAsImage = function (e) {
        for (var t = 0; t < this.ItemControls.length; t++) {
            var i = this.ItemControls[t],
                n = i.rectangle.getAbsolutePosition(),
                a = n.x,
                o = n.y,
                r = a + i.rectangle.getWidth() * this.Layer.getScaleX(),
                s = o + i.rectangle.getHeight() * this.Layer.getScaleX();
            a < e.x1 && (e.x1 = a), o < e.y1 && (e.y1 = o), r > e.x2 && (e.x2 = r), s > e.y2 && (e.y2 = s)
        }
        return e
    }, this.GetSelected = function () {
        var e = new Array;
        return this.ItemControls.forEach(function (t) {
            t.selected && e.push(t)
        }), e
    }, this.SelectByPosition = function (e) {
        this.ItemControls.forEach(function (t) {
            t.getIntersectingActivityRect(e) && t.Select()
        })
    }, this.SelectByItem = function (e) {
        this.ItemControls.forEach(function (t) {
            t.item == e && t.Select()
        })
    }, this.ObjectMove = function (e) {
        this.ItemControls.forEach(function (t) {
            t.selected && e.sender != t && t.ObjectMove(e.changepos)
        }), this.redrawTransitions()
    }, this.createTransitionAndActivity = function (e) {
        var t = {
            x: e.control.getX() + e.rectangle.attrs.width + 100,
            y: e.control.getY()
        },
            i = this.CreateNewActivity(t);
        this.graph.GetComponentByType("WorkflowDesignerTransitionManager").CreateNewTransition(e, i), this.graph.redrawAll()
    }, this.createTransition = function (e) {
        return this.graph.GetComponentByType("WorkflowDesignerTransitionManager").CreateNewTransition(e)
    }, this.Clone = function (e) {
        var t = JSON.parse(JSON.stringify(e.item));
        t.DesignerSettings.Y += 160, t.Name = this.CopySelectedGenUniqueValue(t.Name, this.graph.data.Activities, "Name"), this.graph.data.Activities.push(t), this.graph.Draw(this.graph.data), this.SelectByItem(t)
    }, this.CopySelectedGenUniqueValue = function (e, t, i) {
        for (var n = e, a = 1; !0; a++) {
            for (var o = !1, r = 0; r < t.length; r++)
                if (t[r][i] == n) {
                    o = !0;
                    break
                }
            if (!o) break;
            n = e + "_" + a
        }
        return n
    }
}

function WorkflowDesignerBackground() {
    this.type = "WorkflowDesignerBackground", this.init = function (e) {
        var t = this;
        this.graph = e, this.BackgroundLayer = new Konva.Layer, this.graph.Stage.add(this.BackgroundLayer), this.BackgroundLayer.setZIndex(0), this.SelectionLayer = new Konva.Layer, this.graph.Stage.add(this.SelectionLayer), this.SelectionLayer.setZIndex(1), WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.grid.png", function (e) {
            t.RectBG.setFillPatternImage(e), t.BackgroundLayer.batchDraw()
        }), this.RectBG = new Konva.Rect({
            x: 0,
            y: 0,
            width: 5e3,
            height: 5e3,
            draggable: !1,
            dragBoundFunc: function (e) {
                var i = t.graph.Settings.DefaultMoveStep * t.BackgroundLayer.getScaleX(),
                    n = t.graph.Settings.DefaultMoveStep * t.BackgroundLayer.getScaleY(),
                    a = {
                        x: Math.round(e.x / i) * i,
                        y: Math.round(e.y / n) * n
                    },
                    o = t.BackgroundLayer.getScaleX(),
                    r = t.BackgroundLayer.getScaleY(),
                    s = t.graph.Stage.width() / o,
                    l = t.graph.Stage.height() / r;
                return t.RectBG.width() + e.x / o - s < 0 && t.RectBG.width(t.RectBG.width() + s), t.RectBG.height() + e.y / r - l < 0 && t.RectBG.height(t.RectBG.height() + l), t.graph.GraphLayerSetOffset(-a.x / o, -a.y / r), a
            },
            designerparam: "background"
        }), this.BackgroundLayer.add(this.RectBG), this.BackgroundLayer.batchDraw(), this.graph.Stage.on("mousedown.background", function (e) {
            "background" === e.target.attrs.designerparam && (1 != t._movemodeenabled ? t._mousedownpos = t.graph.CorrectPossition({
                x: e.evt.offsetX,
                y: e.evt.offsetY
            }, t.SelectionLayer) : t.graph.DeselectAll())
        }), this.graph.Stage.on("mousemove.background", function (e) {
            if (1 != t._movemodeenabled && void 0 != t._mousedownpos) {
                var i = t.graph.CorrectPossition({
                    x: e.evt.offsetX,
                    y: e.evt.offsetY
                }, t.SelectionLayer);
                t.DrawSelectionRect(i)
            }
        }), this.graph.Stage.on("mouseup.background", function (e) {
            if (!t._movemodeenabled && void 0 != t._mousedownpos) {
                var i = t.getSelectionRectPos();
                void 0 == i ? e.evt.ctrlKey || t.graph.DeselectAll() : (Math.abs(i.xl - i.xr) > 10 || Math.abs(i.yl - i.yr) > 10) && (t.graph.DeselectAll(), t.graph.ComponentsExecute("SelectByPosition", i), t.graph.onSelectionChanged())
            }
            t._mousedownpos = void 0, t.DeleteSelectionRect()
        })
    }, this.setMoveModeEnabled = function (e) {
        this._movemodeenabled = Boolean(e), this.RectBG.setDraggable(this._movemodeenabled), this.graph.setParam("movemodeenabled", this._movemodeenabled)
    }, this.updatePosition = function (e) {
        var t = this.RectBG.getPosition(),
            i = {
                x: -t.x - e.x,
                y: -t.y - e.y
            };
        this.RectBG.setPosition({
            x: -i.x,
            y: -i.y
        }), this.graph.ComponentsExecute("LayerSetOffset", {
            x: i.x,
            y: i.y
        })
    }, this.setPosition = function (e) {
        this.RectBG.setPosition({
            x: -e.x,
            y: -e.y
        }), this.graph.ComponentsExecute("LayerSetOffset", {
            x: e.x,
            y: e.y
        })
    }, this.LayerScale = function (e) {
        var t = (e.scale, e.delta);
        this.BackgroundLayer.setScale({
            x: this.BackgroundLayer.getScale().x + t,
            y: this.BackgroundLayer.getScale().y + t
        })
    }, this.LayerScaleNorm = function () {
        this.BackgroundLayer.setScale({
            x: 1,
            y: 1
        }), this.SelectionLayer.setScale({
            x: 1,
            y: 1
        }), this.RectBG.setPosition({
            x: 0,
            y: 0
        })
    }, this.DrawSelectionRect = function (e) {
        void 0 == this.RectSelection ? (this.RectSelection = new Konva.Rect({
            x: this._mousedownpos.x,
            y: this._mousedownpos.y,
            width: e.x - this._mousedownpos.x,
            height: e.y - this._mousedownpos.y,
            draggable: !1,
            fill: "#66CCFF",
            opacity: .2
        }), this.SelectionLayer.add(this.RectSelection)) : (this.RectSelection.setWidth(e.x - this._mousedownpos.x), this.RectSelection.setHeight(e.y - this._mousedownpos.y)), this.SelectionLayer.batchDraw()
    }, this.DeleteSelectionRect = function (e) {
        this.RectSelection && (this.RectSelection.destroy(), this.RectSelection = void 0, this.SelectionLayer.batchDraw())
    }, this.getSelectionRectPos = function () {
        if (void 0 != this.RectSelection) {
            var e = this.RectSelection.getAbsolutePosition(),
                t = e.x,
                i = e.y,
                n = t + this.RectSelection.getWidth() * this.SelectionLayer.getScaleX(),
                a = i + this.RectSelection.getHeight() * this.SelectionLayer.getScaleX();
            return {
                xl: Math.min(t, n),
                yl: Math.min(i, a),
                xr: Math.max(t, n),
                yr: Math.max(i, a)
            }
        }
    }
}

function WorkflowDesignerTooltip(e, t, i, n, a, o) {
    var r = function (e, t) {
        if (0 == t.getScaleX() || 0 == t.getScaleY()) return {
            x: t.getOffsetX(),
            y: 0
        };
        var i = void 0 == a ? 0 : a;
        return {
            x: e.x / t.getScaleX() + t.getOffsetX() + i,
            y: e.y / t.getScaleY() + t.getOffsetY()
        }
    };
    t.on("mouseover", function () {
        if (void 0 != t.ToolTip) {
            var a = r(t.getAbsolutePosition(), e);
            t.ToolTip.position({
                x: a.x + t.getWidth() / 2,
                y: a.y + n,
                opacity: 1
            }), t.ToolTip.show()
        } else {
            var a = r(t.getAbsolutePosition(), e),
                s = new Konva.Label({
                    x: a.x + t.getWidth() / 2,
                    y: a.y + n,
                    opacity: 1
                });
            s.add(new Konva.Tag({
                fill: "#3D4D59",
                pointerDirection: void 0 == o ? "up" : o,
                pointerWidth: 13,
                pointerHeight: 7,
                lineJoin: "round",
                shadowColor: "#3D4D59",
                shadowBlur: 10,
                shadowOffset: 10,
                shadowOpacity: 0,
                cornerRadius: 5
            })), s.add(new Konva.Text({
                text: i,
                fontFamily: "Arial",
                fontSize: 12,
                padding: 5,
                fill: "white"
            })), e.add(s), t.ToolTip = s
        }
        e.batchDraw()
    }), t.on("mouseleave", function () {
        void 0 != t.ToolTip && (t.ToolTip.hide(), e.batchDraw())
    })
}

function WorkflowDesignerBar(e, t, i, n) {
    var a = "v" === n,
        o = new Konva.Group({
            x: i.x,
            y: i.y
        }),
        r = new Konva.Rect({
            x: 0,
            y: 0,
            width: a ? 30 : 30 * t.length,
            height: a ? 30 * t.length : 30,
            fill: WorkflowDesignerConstants.BarColor,
            cornerRadius: 5
        });
    o.add(r);
    var s = 0;
    return t.forEach(function (t) {
        if (t.offset = s, t.separator) {
            s += 10;
            var i = a ? [5, t.offset + 5, 25, t.offset + 5] : [t.offset + 5, 5, t.offset + 5, 25];
            t.cObject = new Konva.Line({
                points: i,
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            }), o.add(t.cObject)
        } else s += 30, WorkflowDesignerCommon.loadImage(t.img, function (i) {
            if (!e.destroyed) {
                var n = a ? {
                    x: 5,
                    y: t.offset + 5
                } : {
                        x: 5 + t.offset,
                        y: 5
                    };
                t.offset, t.offset, t.group = new Konva.Group({
                    x: n.x - 5,
                    y: n.y - 5,
                    width: 30,
                    height: 30
                }), t.bg = new Konva.Rect({
                    x: 0,
                    y: 0,
                    width: 30,
                    height: 30,
                    cornerRadius: 5
                }), 1 == t.active && t.bg.setFill(WorkflowDesignerConstants.ButtonActive), t.group.add(t.bg), t.cImageToolbar = new Konva.Image({
                    x: 5,
                    y: 5,
                    image: i,
                    width: 20,
                    height: 20,
                    strokeWidth: 0
                }), t.group.add(t.cImageToolbar);
                var r = function () {
                    void 0 != t.cImageToolbar.ToolTip && t.cImageToolbar.ToolTip.hide(), void 0 != t.click && t.click()
                };
                t.group.on("click", r), t.group.on("touchend", r), t.group.on("mouseover", function () {
                    t.bg.setFill(WorkflowDesignerConstants.ButtonActive), e.batchDraw()
                }), t.group.on("mouseleave", function () {
                    void 0 != t.active && 0 != t.active || (t.bg.setFill(""), e.batchDraw())
                }), t.group.add(t.cImageToolbar), o.add(t.group), void 0 != t.title && "" != t.title && WorkflowDesignerTooltip(e, t.cImageToolbar, t.title, 30), e.batchDraw()
            }
        })
    }), 1 == a ? r.setHeight(s) : r.setWidth(s), o
}

function WorkflowDesignerToolbar() {
    this.type = "WorkflowDesignerToolbar", this.graph = void 0;
    var e = this;
    this.init = function (t) {
        this.graph = t, this.Layer = new Konva.Layer, this.graph.Stage.add(this.Layer), this.Layer.setZIndex(10), this.InitItems(), this.MainToolbarDraw(20, 20), this.SideToolbarDraw(e.graph.Settings.graphwidth - 70, 90), this.graph.Settings.hideInfoBlock || this.CreateInfoBlock();
        var i = this.GetWorkflowDesignerBackground();
        void 0 != i && i.RectBG.setDraggable(!1), this.graph.getParam("movemodeenabled") && e.ToolbarMovePress(), this.graph.getParam("exinfo") && e.ToolbarExInfoPress()
    }, this.MainToolbarDraw = function (e, t) {
        var i = 0;
        for (var n in this.Items) Array.isArray(this.Items[n]) && this.Items[n].length > 0 && (i = this.ToolbarDraw(this.Items[n], e + i, t), i += 10)
    }, this.SideToolbarDraw = function (t, i) {
        var n = this.SideItems,
            a = new Konva.Group({
                x: t,
                y: i
            }),
            o = new Konva.Rect({
                x: 0,
                y: 0,
                width: 50,
                fill: "#FFFFFF",
                shadowEnabled: !0,
                shadowBlur: 10,
                shadowOpacity: .3,
                cornerRadius: 4
            });
        a.add(o);
        var r = 0;
        n.forEach(function (t) {
            t.offset = r, 1 == t.separator ? (r += 1, t.cObject = new Konva.Line({
                points: [10, t.offset + 3, 40, t.offset + 3],
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            }), a.add(t.cObject)) : (r += 45, e.loadImageHandler(void 0, {
                item: t,
                x: 0,
                y: t.offset,
                container: a,
                tooltipX: 25,
                tooltipY: -25,
                direction: "right"
            }), WorkflowDesignerCommon.loadImage(t.img, function (e, t) {
                t.container.image(e), this.Layer.destroyed || this.Layer.batchDraw()
            }.bind(e), {
                    container: t.cImageToolbar
                }))
        }), a.add(new Konva.Line({
            points: [10, r + 3, 40, r + 3],
            stroke: WorkflowDesignerConstants.BarSeparatorColor,
            strokeWidth: 2
        })), this.scaleText = new Konva.Text({
            text: "100%",
            fontFamily: "Arial",
            fontStyle: "Bold",
            fontSize: 12,
            padding: 5,
            fill: "black",
            x: 4,
            y: r + 16,
            align: "center",
            width: 41
        }), a.add(this.scaleText), r += 40, o.height(r + 5), this.Layer.add(a), this.SideToolbar = a
    }, this.ToolbarDraw = function (t, i, n) {
        var a = new Konva.Group({
            x: i,
            y: n
        }),
            o = new Konva.Rect({
                x: 0,
                y: 0,
                height: 50,
                fill: "#FFFFFF",
                shadowEnabled: !0,
                shadowBlur: 10,
                shadowOpacity: .3,
                cornerRadius: 4
            });
        a.add(o);
        var r = 0;
        return t.forEach(function (t) {
            t.offset = r, 1 == t.separator ? (r += 1, t.cObject = new Konva.Line({
                points: [t.offset + 3, 10, t.offset + 3, 40],
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            }), a.add(t.cObject)) : (r += 45, e.loadImageHandler(void 0, {
                item: t,
                x: t.offset,
                y: 0,
                container: a
            }), WorkflowDesignerCommon.loadImage(t.img, function (e, t) {
                t.container.image(e), this.Layer.destroyed || this.Layer.batchDraw()
            }.bind(e), {
                    container: t.cImageToolbar
                }))
        }), o.width(r + 5), this.Layer.add(a), i + r
    }, this.loadImageHandler = function (t, i) {
        var n = i.item;
        n.group = new Konva.Group({
            x: i.x,
            y: i.y,
            width: 40,
            height: 40
        }), n.bg = new Konva.Rect({
            x: 5,
            y: 5,
            width: 40,
            height: 40,
            cornerRadius: 4
        }), n.group.add(n.bg), 1 == n.active && n.bg.setFill(WorkflowDesignerConstants.ButtonActive), n.cImageToolbar = new Konva.Image({
            x: 15,
            y: 15,
            image: t,
            width: 20,
            height: 20,
            strokeWidth: 0
        }), 1 == n.disabled && n.cImageToolbar.opacity(.3), n.group.add(n.cImageToolbar), n.group.on("click", function () {
            n.disabled !== !0 && void 0 != n.click && n.click(n)
        }), n.group.on("touchend", function () {
            n.disabled !== !0 && void 0 != n.click && n.click(n)
        }), n.group.on("mouseover", function () {
            1 != n.disabled && (n.bg.setFill(WorkflowDesignerConstants.ButtonActive), e.Layer.batchDraw())
        }), n.group.on("mouseleave", function () {
            void 0 != n.active && 0 != n.active || (n.bg.setFill(""), e.Layer.batchDraw())
        }), i.container.add(n.group), WorkflowDesignerTooltip(this.Layer, n.group, n.title, void 0 == i.tooltipX ? 55 : i.tooltipX, void 0 == i.tooltipY ? 5 : i.tooltipY, i.direction), this.Layer.batchDraw()
    }, this.draw = function () {
        this.GraphRedrawAll()
    }, this.GraphRedrawAll = function () {
        this.UpdateInfoBlock(), this.Layer.batchDraw()
    }, this.changeSize = function (e, t) {
        void 0 != this.info && this.info.position({
            x: e - 320,
            y: t - 70
        }), void 0 != this.SideToolbar && this.SideToolbar.position({
            x: e - 70,
            y: 90
        })
    }, this.CreateInfoBlock = function () {
        var e = this.graph.Settings.imagefolder,
            t = e + "wfe.add.png",
            i = e + "wfe.transitons2.png",
            n = e + "wfe.commands.png",
            a = {
                x: 0,
                y: 0
            };
        this.info = new Konva.Group(a);
        var o = new Konva.Rect({
            x: 0,
            y: 0,
            height: 50,
            width: 300,
            fill: "#FFFFFF",
            shadowEnabled: !0,
            shadowBlur: 10,
            shadowOpacity: .3,
            cornerRadius: 4
        });
        this.info.add(o);
        var r = 5;
        this.infoText1 = new Konva.Text({
            fontFamily: "Arial",
            fontStyle: "Bold",
            fontSize: 12,
            padding: 5,
            fill: "black",
            x: r,
            y: 16,
            align: "center",
            width: 60
        }), this.info.add(this.infoText1), r += this.infoText1.width() + 5, WorkflowDesignerCommon.loadImage(t, function (e, t) {
            t.container.add(new Konva.Image({
                x: t.x,
                y: t.y,
                image: e,
                width: 20,
                height: 20,
                strokeWidth: 0
            }))
        }, {
                container: this.info,
                x: r,
                y: 15
            }), r += 30, this.info.add(new Konva.Line({
                points: [r, 10, r, 40],
                stroke: WorkflowDesignerConstants.BarSeparatorColor,
                strokeWidth: 2
            })), r += 5, this.infoText2 = new Konva.Text({
                fontFamily: "Arial",
                fontStyle: "Bold",
                fontSize: 12,
                padding: 5,
                fill: "black",
                x: r,
                y: 16,
                align: "center",
                width: 60
            }), this.info.add(this.infoText2), r += this.infoText2.width() + 5, WorkflowDesignerCommon.loadImage(i, function (e, t) {
                t.container.add(new Konva.Image({
                    x: t.x,
                    y: t.y,
                    image: e,
                    width: 20,
                    height: 20,
                    strokeWidth: 0
                }))
            }, {
                    container: this.info,
                    x: r,
                    y: 15
                }), r += 30, this.info.add(new Konva.Line({
                    points: [r, 10, r, 40],
                    stroke: WorkflowDesignerConstants.BarSeparatorColor,
                    strokeWidth: 2
                })), r += 5, this.infoText3 = new Konva.Text({
                    fontFamily: "Arial",
                    fontStyle: "Bold",
                    fontSize: 12,
                    padding: 5,
                    fill: "black",
                    x: r,
                    y: 16,
                    align: "center",
                    width: 60
                }), this.info.add(this.infoText3), r += this.infoText3.width() + 5, WorkflowDesignerCommon.loadImage(n, function (e, t) {
                    t.container.add(new Konva.Image({
                        x: t.x,
                        y: t.y,
                        image: e,
                        width: 20,
                        height: 20,
                        strokeWidth: 0
                    }))
                }, {
                        container: this.info,
                        x: r,
                        y: 15
                    }), r += 30, o.width(r), this.UpdateInfoBlock(), a = {
                        x: this.graph.Settings.graphwidth - 320,
                        y: this.graph.Settings.graphheight - 70
                    }, this.info.position(a), this.Layer.add(this.info)
    }, this.UpdateInfoBlock = function () {
        var e = this.GetInfoBlockTextValue();
        if (void 0 != this.infoText1) {
            var t = String(e.activity),
                i = "black";
            void 0 != e.activityLimit && (t += "/" + e.activityLimit, e.activityLimit < e.activity && (i = "#C0392B")), this.infoText1.setText(t), this.infoText1.setFill(i)
        }
        if (void 0 != this.infoText2) {
            var n = String(e.transition),
                i = "black";
            void 0 != e.transitionLimit && (n += "/" + e.transitionLimit, e.transitionLimit < e.transition && (i = "#C0392B")), this.infoText2.setText(n), this.infoText2.setFill(i)
        }
        if (void 0 != this.infoText3) {
            var a = String(e.command),
                i = "black";
            void 0 != e.commandLimit && (a += "/" + e.commandLimit, e.commandLimit < e.command && (i = "#C0392B")), this.infoText3.setText(a), this.infoText3.setFill(i)
        }
    }, this.GetInfoBlockTextValue = function () {
        var e = {
            activity: 0,
            transition: 0,
            command: 0,
            activityLimit: void 0,
            transitionLimit: void 0,
            commandLimit: void 0
        };
        if (void 0 != this.graph.data && (e.activity = this.graph.data.Activities.length, e.transition = this.graph.data.Transitions.length, e.command = this.graph.data.Commands.length, void 0 != this.graph.data.AdditionalParams)) {
            var t = this.graph.data.AdditionalParams;
            void 0 != t.MaxNumberOfActivities && t.MaxNumberOfActivities != -1 && (e.activityLimit = t.MaxNumberOfActivities), void 0 != t.MaxNumberOfTransitions && t.MaxNumberOfTransitions != -1 && (e.transitionLimit = t.MaxNumberOfTransitions), void 0 != t.MaxNumberOfCommands && t.MaxNumberOfCommands != -1 && (e.commandLimit = t.MaxNumberOfCommands)
        }
        return e
    }, this.ToolbarMovePress = function () {
        var e = this.GetWorkflowDesignerBackground();
        e.setMoveModeEnabled(!e._movemodeenabled);
        var t = this.GetItemByCode("move");
        e._movemodeenabled ? (t.active = !0, void 0 != t.bg && t.bg.setFill(WorkflowDesignerConstants.ButtonActive)) : (t.active = void 0, void 0 != t.bg && t.bg.setFill("")), this.Layer.batchDraw()
    }, this.ToolbarExInfoPress = function () {
        var e = this.GetItemByCode("exinfo");
        this.exinfo ? (e.active = void 0, void 0 != e.bg && e.bg.setFill(""), this.exinfo = !1, this.graph.setParam("exinfo", !1)) : (e.active = !0, void 0 != e.bg && e.bg.setFill(WorkflowDesignerConstants.ButtonActive), this.exinfo = !0, this.graph.setParam("exinfo", !0)), void 0 != this.graph.Draw && this.graph.Draw(this.graph.data)
    }, this.ToolbarInlinePress = function () {
        this.graph.data.CanBeInlined ? this.graph.setInlinedFlag(!1) : this.graph.setInlinedFlag(!0)
    }, this.onChangeScheme = function () {
        var t = this.GetItemByCode("inline");
        if (void 0 != t && void 0 != t.cImageToolbar) {
            var i = this.graph.data.CanBeInlined ? t.img2 : t.img;
            WorkflowDesignerCommon.loadImage(i, function (e, t) {
                t.container.image(e), this.Layer.destroyed || this.Layer.batchDraw()
            }.bind(e), {
                    container: t.cImageToolbar
                })
        }
    }, this.GetWorkflowDesignerBackground = function () {
        return this.graph.GetComponentByType("WorkflowDesignerBackground")
    }, this.CreateActivity = function () {
        this.graph.GetComponentByType("WorkflowDesignerActivityManager").CreateNewActivity(), this.graph.redrawAll(), this.graph.StoreGraphData()
    }, this.CreateInline = function () {
        this.graph.GetComponentByType("WorkflowDesignerActivityManager").CreateNewInline(), this.graph.redrawAll(), this.graph.StoreGraphData()
    }, this.AutoArrangement = function () {
        if (0 != e.graph.data.Activities.length) {
            var t = new Array,
                i = new Array;
            if (e.graph.data.Activities.forEach(function (n) {
                (void 0 == n.DesignerSettings || n.DesignerSettings.Group == e.graph.Settings.group || void 0 != n.DesignerSettings.InlineElementSettings && n.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group) && (t.push(n), n.IsInitial && i.push(n))
            }), 0 != t.length) {
                t.forEach(function (t) {
                    if (!t.IsInitial) {
                        for (var n = !0, a = 0; a < e.graph.data.Transitions.length; a++) {
                            var o = e.graph.data.Transitions[a];
                            if ("Direct" == o.Classifier && o.To == t) {
                                n = !1;
                                break
                            }
                        }
                        n && i.push(t)
                    }
                }), 0 == i.length && i.push(t[0]);
                var n = {
                    x: 80,
                    y: 120
                },
                    a = {
                        x: 300,
                        y: 140
                    },
                    o = Array(),
                    r = function (t, i, n) {
                        var s = {
                            x: i.x,
                            y: i.y
                        };
                        n || (s.x += a.x);
                        for (var l = new Array, d = 0; d < t.length; d++) {
                            var c = t[d];
                            void 0 == c.DesignerSettings && (c.DesignerSettings = {}), !n && $.inArray(c, o) >= 0 || (c.DesignerSettings.Group == e.graph.Settings.group ? c.DesignerSettings.X = s.x : void 0 != c.DesignerSettings.InlineElementSettings && c.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group && (c.DesignerSettings.InlineElementSettings.X = s.x), o.push(c), l.push(c))
                        }
                        for (var d = 0; d < l.length; d++) {
                            var c = l[d];
                            d > 0 && (s.y += a.y);
                            var h = new Array;
                            e.graph.data.Transitions.forEach(function (e) {
                                "Direct" == e.Classifier && e.From == c && h.push(e.To)
                            }), c.DesignerSettings.Group == e.graph.Settings.group ? c.DesignerSettings.Y = s.y : void 0 != c.DesignerSettings.InlineElementSettings && c.DesignerSettings.InlineElementSettings.Group == e.graph.Settings.group && (c.DesignerSettings.InlineElementSettings.Y = s.y);
                            var u = r(h, {
                                x: s.x,
                                y: s.y
                            });
                            s.y = u.y
                        }
                        return {
                            x: s.x,
                            y: s.y
                        }
                    };
                r(i, n, !0), e.graph.data.Transitions.forEach(function (t) {
                    void 0 == t.DesignerSettings && (t.DesignerSettings = {}), void 0 != t.From.DesignerSettings && void 0 != t.To.DesignerSettings && t.From.DesignerSettings.Group != e.graph.Settings.group && t.To.DesignerSettings.Group != e.graph.Settings.group || (t.DesignerSettings.X = void 0, t.DesignerSettings.Y = void 0)
                }), e.graph.Draw(e.graph.data), this.graph.StoreGraphData()
            }
        }
    }, this.CopySelectedGenUniqueValue = function (e, t, i) {
        for (var n = e, a = 1; !0; a++) {
            for (var o = !1, r = 0; r < t.length; r++)
                if (t[r][i] == n) {
                    o = !0;
                    break
                }
            if (!o) break;
            n = e + "_" + a
        }
        return n
    }, this.CopySelected = function () {
        var t = this.graph.GetComponentByType("WorkflowDesignerActivityManager"),
            i = this.graph.GetComponentByType("WorkflowDesignerTransitionManager"),
            n = t.GetSelected(),
            a = i.GetSelected();
        if (0 != n.length || 0 != a.length) {
            var o = [];
            n.forEach(function (t) {
                if (!t.group) {
                    var i = JSON.parse(JSON.stringify(t.item));
                    i.DesignerSettings.Y += 160, i.Name = e.CopySelectedGenUniqueValue(i.Name, e.graph.data.Activities, "Name"), o.push({
                        oldItem: t.item,
                        newItem: i
                    }), e.graph.data.Activities.push(i)
                }
            });
            var r = [];
            a.forEach(function (t) {
                for (var i = t.item.From, n = t.item.To, a = 0; a < o.length; a++) i == o[a].oldItem && (i = o[a].newItem), n == o[a].oldItem && (n = o[a].newItem);
                var s = JSON.parse(JSON.stringify(t.item));
                s.Name = e.CopySelectedGenUniqueValue(s.Name, e.graph.data.Transitions, "Name"), s.From = i, s.To = n, r.push({
                    oldItem: t.item,
                    newItem: s
                }), e.graph.data.Transitions.push(s)
            }), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), o.forEach(function (e) {
                t.SelectByItem(e.newItem)
            }), r.forEach(function (e) {
                i.SelectByItem(e.newItem)
            }), this.graph.StoreGraphData(), this.graph.onSelectionChanged(!0)
        }
    }, this.EditLocalization = function () {
        var e = this,
            t = WorkflowDesignerConstants.LocalizationFormLabel,
            i = {
                type: "table",
                title: t.Title,
                width: "800px",
                data: this.graph.data.Localization,
                datadefault: {
                    Culture: WorkflowDesignerConstants.DefaultCulture,
                    Type: "State"
                },
                elements: [{
                    name: t.ObjectName,
                    field: "ObjectName",
                    type: "input"
                }, {
                    name: t.Type,
                    field: "Type",
                    type: "select",
                    displayfield: "Name",
                    valuefield: "Value",
                    datasource: [{
                        Name: t.Types[0],
                        Value: "Command"
                    }, {
                        Name: t.Types[1],
                        Value: "State"
                    }, {
                        Name: t.Types[2],
                        Value: "Parameter"
                    }]
                }, {
                    name: t.IsDefault,
                    field: "IsDefault",
                    type: "checkbox"
                }, {
                    name: t.Culture,
                    field: "Culture",
                    type: "input"
                }, {
                    name: t.Value,
                    field: "Value",
                    type: "input"
                }],
                readonly: this.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Localization, t, i), e.graph.StoreGraphData()
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.localization) return void this.graph.Settings.forms.localization(i);
        var n = new WorkflowDesignerForm(i),
            a = function (e, t) {
                return !(!n.CheckRequired(e, ["ObjectName", "Type", "Culture", "Value"], WorkflowDesignerConstants.FieldIsRequired) || !n.CheckUnique(e, ["ObjectName", "Type", "Culture"], WorkflowDesignerConstants.FieldMustBeUnique)) && (n.ClearTempField(e), n.parameters.saveFunc(e), !0)
            };
        n.showModal(a)
    }, this.EditParameters = function () {
        var e = WorkflowDesignerConstants.ParameterFormLabel,
            t = this,
            i = function (e, i, n) {
                for (var a = void 0, o = e.getEditData(e.parameters), r = 0; r < o.length; r++) {
                    var s = o[r];
                    if (s.control_InitialValue.id === i.id) {
                        a = s.Type;
                        break
                    }
                }
                void 0 != a && t.graph.designer.getemptytype(encodeURIComponent(a), n)
            },
            n = {
                type: "table",
                title: e.Title,
                data: this.graph.data.Parameters,
                datadefault: {
                    Purpose: "Persistence"
                },
                keyproperty: "Name",
                elements: [{
                    name: e.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: e.Type,
                    field: "Type",
                    type: "input",
                    datasource: this.graph.getTypeNames(),
                    width: "35%"
                }, {
                    name: e.Purpose,
                    field: "Purpose",
                    type: "select",
                    displayfield: "Name",
                    datasource: [{
                        Name: "Temporary"
                    }, {
                        Name: "Persistence"
                    }, {
                        Name: "System"
                    }]
                }, {
                    name: e.InitialValue,
                    field: "InitialValue",
                    type: "json",
                    width: "25%",
                    getemptytype: i
                }],
                top: $('<div style="float: right; margin-bottom: 15px;"></div>'),
                beforerowadded: function (e) {
                    void 0 != e.Type && (e.Type = decodeURIComponent(e.Type))
                },
                onrowadded: function (e) {
                    var t = e.find("[name=Purpose]"),
                        i = t[0];
                    t.change(function () {
                        r(e)
                    }), void 0 != i && "System" !== i.value && e.find('[name=Purpose] option[value="System"]').remove(), r(e)
                },
                graph: t.graph,
                readonly: this.graph.Settings.readonly,
                saveFunc: function (e) {
                    t.SyncTable(t.graph.data.Parameters, e, n);
                    for (var i = 0; i < t.graph.data.Parameters.length; i++) {
                        var a = t.graph.data.Parameters[i].Type;
                        t.graph.data.Parameters[i].Type = encodeURIComponent(a)
                    }
                    t.graph.Draw(t.graph.data), t.graph.StoreGraphData()
                },
                cancelFunc: function (e) {
                    for (var i = 0; i < t.graph.data.Parameters.length; i++) {
                        var n = t.graph.data.Parameters[i].Type;
                        t.graph.data.Parameters[i].Type = encodeURIComponent(n)
                    }
                }
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.parameters) return void this.graph.Settings.forms.parameters(n);
        var a = function () {
            for (var e = $(c.window.find(".WorkflowDesignerTable"))[0], t = 0; t < e.rows.length; t++) {
                var i = $(e.rows[t]),
                    n = i.find("[name=Purpose]")[0];
                void 0 != n && "System" === n.value && i.hide()
            }
        },
            o = function () {
                for (var e = $(c.window.find(".WorkflowDesignerTable"))[0], t = 0; t < e.rows.length; t++) {
                    var i = $(e.rows[t]),
                        n = i.find("[name=Purpose]")[0];
                    void 0 != n && "System" === n.value && i.show()
                }
            },
            r = function (e) {
                var t = e.find("[name=Purpose]")[0];
                void 0 != t && "System" === t.value ? (e.find(":input").attr("readonly", !0), e.find("[name=Purpose]").attr("disabled", !0), e.find("[name=InitialValue]").val(""), e.find(".btnDelete").remove()) : void 0 != t && "Temporary" === t.value ? (e.find("[name=InitialValue]").attr("readonly", !0), e.find("[name=InitialValue]").val("")) : void 0 != t && "Persistence" === t.value && e.find("[name=InitialValue]").attr("readonly", !1)
            },
            s = function () {
                for (var e = $(c.window.find(".WorkflowDesignerTable"))[0], t = 0; t < e.rows.length; t++) {
                    r($(e.rows[t]))
                }
            },
            l = function (e, t) {
                return !(!c.CheckRequired(e, ["Name", "Type", "Purpose", "Parameter"], WorkflowDesignerConstants.FieldIsRequired) || !c.CheckUnique(e, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (c.ClearTempField(e), c.parameters.saveFunc(e), !0)
            },
            d = function (e, t) {
                c.parameters.cancelFunc(e)
            },
            c = new WorkflowDesignerForm(n),
            h = $('<div class="ui slider checkbox"></div>'),
            u = $('<input type="checkbox" />');
        u.click(function (e, t) {
            u[0].checked ? o() : a(), WorkflowDesignerCommon.modal(c.window, "refresh")
        }), h.append(u), h.append("<label>" + WorkflowDesignerConstants.ParameterFormLabel.ShowSystemParameters + "</label>"), n.top.append(h), c.showModal(l, !1, d), a(), s(), WorkflowDesignerCommon.modal(c.window, "refresh")
    }, this.getGlobalCodeActionsForDelete = function (e, t) {
        var i = [];
        return e.forEach(function (n) {
            if (n.IsGlobal) {
                for (var a = !1, o = 0; o < e.length; o++)
                    if (n.Name == e[o].Name && n.IsGlobal != e[o].IsGlobal) {
                        a = !0;
                        break
                    }
                for (var r = !1, o = 0; o < t.length; o++)
                    if (1 == a) {
                        if (n.Name == t[o].Name && t[o].IsGlobal) {
                            r = !0;
                            break
                        }
                    } else if (n.Name == t[o].Name) {
                        r = !0;
                        break
                    }
                0 == r && i.push(n.Name)
            }
        }), i
    }, this.EditProcessInfo = function () {
        function e(e) {
            return $.extend({
                type: "table",
                elements: [{
                    name: o.ParametersNameLabel,
                    field: "Name",
                    type: "input"
                }, {
                    name: o.ParametersValueLabel,
                    field: "Value",
                    type: "json"
                }]
            }, e)
        }

        function t(e, t, i) {
            $.each(i, function (i, n) {
                "System" === n.Purpose ? e.push(n) : t.push(n)
            })
        }

        function i() {
            return r ? {
                type: "accordion",
                data: s.systemParameters,
                elements: [e({
                    name: o.SystemParametersTabName
                })]
            } : e({
                data: s.systemParameters,
                name: o.SystemParametersTabName
            })
        }

        function n() {
            return r ? {
                type: "accordion",
                name: o.ProcessParametersTabName,
                data: s.processParameters,
                tabKey: "ProcessParameters",
                elements: [e(null)]
            } : e({
                data: s.processParameters,
                name: o.ProcessParametersTabName,
                tabKey: "ProcessParameters"
            })
        }

        function a(e, t, i, n) {
            function a(e, t) {
                return $.extend({
                    type: "table",
                    elements: e
                }, t)
            }
            if (r) {
                var s = {};
                return s[o.RootProcess] = l.graph.data.AdditionalParams[e], $.each(l.graph.data.AdditionalParams.SubprocessInfo, function (t, i) {
                    s[t] = i[e]
                }), {
                        type: "accordion",
                        name: t,
                        data: s,
                        tabKey: i,
                        elements: [a(n, null)]
                    }
            }
            return a(n, {
                data: l.graph.data.AdditionalParams[e],
                name: t,
                tabKey: i
            })
        }
        var o = WorkflowDesignerConstants.ProcessInfoFormLabel,
            r = this.graph.data.AdditionalParams.SubprocessCurrentActivities.length,
            s = {
                systemParameters: {},
                processParameters: {}
            };
        r ? (s.systemParameters[o.RootProcess] = new Array, s.processParameters[o.RootProcess] = new Array, t(s.systemParameters[o.RootProcess], s.processParameters[o.RootProcess], this.graph.data.AdditionalParams.ProcessParameters), $.each(this.graph.data.AdditionalParams.SubprocessInfo, function (e, i) {
            s.systemParameters[e] = new Array, s.processParameters[e] = new Array, t(s.systemParameters[e], s.processParameters[e], i.ProcessParameters)
        })) : (s.systemParameters = new Array, s.processParameters = new Array, t(s.systemParameters, s.processParameters, this.graph.data.AdditionalParams.ProcessParameters));
        var l = this,
            d = {
                type: "tabs",
                title: o.Title,
                width: "95%",
                readonly: !0,
                graph: l.graph,
                elements: [{
                    name: o.SystemParametersTabName,
                    type: "form",
                    tabKey: "SystemParameters",
                    data: this.graph.data.AdditionalParams,
                    elements: [{
                        name: o.IsObsolete,
                        field: "IsObsolete",
                        type: "checkbox"
                    }, {
                        name: o.DefiningParameters,
                        field: "DefiningParameters",
                        type: "textarea"
                    }, i()]
                }, n(), a("ProcessHistory", o.HistoryTabName, "History", [{
                    name: o.HistoryTabFromLabel,
                    field: "FromActivityName",
                    type: "input"
                }, {
                    name: o.HistoryTabFromStateLabel,
                    field: "FromStateName",
                    type: "input"
                }, {
                    name: o.HistoryTabToLabel,
                    field: "ToActivityName",
                    type: "input"
                }, {
                    name: o.HistoryTabToStateLabel,
                    field: "ToStateName",
                    type: "input"
                }, {
                    name: o.HistoryTabExecutorIdLabel,
                    field: "ExecutorIdentityId",
                    type: "input"
                }, {
                    name: o.HistoryTabActorIdLabel,
                    field: "ActorIdentityId",
                    type: "input"
                }, {
                    name: o.HistoryTabTimeLabel,
                    field: "TransitionTime",
                    type: "input"
                }, {
                    name: o.HistoryTabTriggerNameLabel,
                    field: "TriggerName",
                    type: "input"
                }, {
                    name: o.HistoryTabTransitionClassifierNameLabel,
                    field: "TransitionClassifier",
                    type: "transitionclassifier"
                }]), a("ProcessTimers", o.TimersTabName, "Timers", [{
                    name: o.TimersTabNameLabel,
                    field: "Name",
                    type: "input"
                }, {
                    name: o.TimersTabValueLabel,
                    field: "NextExecutionDateTime",
                    type: "input"
                }])]
            };
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.processinfo) return void this.graph.Settings.forms.processinfo(d);
        var c = new WorkflowDesignerForm(d),
            h = function (e, t) {
                return !0
            };
        c.showModal(h)
    }, this.Items = {
        First: [],
        Second: [],
        Third: []
    }, this.SideItems = [], this.InitItems = function () {
        var t = this.graph.Settings.imagefolder;
        this.graph.Settings.readonly || (this.Items.First.push({
            code: "undo",
            title: WorkflowDesignerConstants.ToolbarLabel.Undo,
            img: t + "wfe.undo.png",
            click: function () {
                e.graph.Undo()
            }
        }), this.Items.First.push({
            code: "redo",
            title: WorkflowDesignerConstants.ToolbarLabel.Redo,
            img: t + "wfe.redo.png",
            click: function () {
                e.graph.Redo()
            }
        }), this.Items.First.push({
            separator: !0
        }), this.Items.First.push({
            title: WorkflowDesignerConstants.ToolbarLabel.CreateActivity,
            img: t + "wfe.add.png",
            click: function () {
                e.CreateActivity()
            }
        }), this.Items.First.push({
            title: WorkflowDesignerConstants.ToolbarLabel.CreateInline,
            img: t + "wfe.inline.png",
            click: function () {
                e.CreateInline()
            }
        }), this.Items.First.push({
            code: "copy",
            disabled: !0,
            title: WorkflowDesignerConstants.ToolbarLabel.CopySelected,
            img: t + "wfe.copy.png",
            click: function () {
                e.CopySelected()
            }
        }), this.Items.First.push({
            code: "delete",
            disabled: !0,
            title: WorkflowDesignerConstants.ToolbarLabel.Delete,
            img: t + "wfe.remove.png",
            click: function () {
                e.graph.DeleteSelected()
            }
        })), this.graph.Settings.hideElementsToolbar || this.graph.Settings.notshowwindows || (this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Actors,
            img: t + "wfe.actors.png",
            click: function () {
                WorkflowDesignerWindows.EditActors(e)
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Commands,
            img: t + "wfe.commands.png",
            click: function () {
                WorkflowDesignerWindows.EditCommands(e)
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Timers,
            img: t + "wfe.timers.png",
            click: function () {
                WorkflowDesignerWindows.EditTimer(e)
            }
        }), this.graph.Settings.disableCodeActions !== !0 && this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.CodeActions,
            img: t + "wfe.codeactions.png",
            click: function () {
                WorkflowDesignerWindows.EditCodeActions(e)
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Parameters,
            img: t + "wfe.parameters.png",
            click: function () {
                e.EditParameters()
            }
        }), this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Localization,
            img: t + "wfe.localization.png",
            click: function () {
                e.EditLocalization()
            }
        }), this.graph.designer && this.graph.designer.data && this.graph.designer.data.AdditionalParams && this.graph.designer.data.AdditionalParams.ProcessParameters && this.Items.Second.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ProcessInfo,
            img: t + "wfe.context.png",
            click: function () {
                e.EditProcessInfo()
            }
        })), this.graph.Settings.readonly || this.Items.Second.push({
            code: "inline",
            title: WorkflowDesignerConstants.ToolbarLabel.Inline,
            img: t + "wfe.inline.off.png",
            img2: t + "wfe.inline.on.png",
            click: function () {
                e.ToolbarInlinePress()
            }
        }), void 0 != this.graph.Settings.apiurl && this.Items.Third.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Refresh,
            img: t + "wfe.refresh.png",
            click: function () {
                e.graph.Refresh()
            }
        }), this.graph.Settings.disableobjectmovements || this.Items.Third.push({
            title: WorkflowDesignerConstants.ToolbarLabel.AutoArrangement,
            img: t + "wfe.autoarrangment.png",
            click: function () {
                e.AutoArrangement()
            }
        }), this.Items.Third.length > 0 && this.Items.Third.push({
            separator: !0
        }), this.Items.Third.push({
            code: "exinfo",
            title: WorkflowDesignerConstants.ToolbarLabel.Info,
            img: t + "wfe.information.png",
            click: function () {
                e.ToolbarExInfoPress()
            }
        }), this.graph.Settings.hideLegend || this.Items.Third.push({
            title: WorkflowDesignerConstants.ToolbarLabel.Legend,
            img: t + "wfe.help.png",
            click: function () {
                e.ShowLegend()
            }
        }), this.SideItems = [{
            code: "move",
            title: WorkflowDesignerConstants.ToolbarLabel.Move,
            img: t + "wfe.move.png",
            click: function () {
                e.ToolbarMovePress()
            }
        }, {
            separator: !0
        }], void 0 == this.graph.Settings.group && this.SideItems.push({
            code: "fullscreen",
            title: WorkflowDesignerConstants.ToolbarLabel.FullScreen,
            img: t + "wfe.fullscreen.png",
            click: function () {
                e.graph.onFullScreenClick()
            }
        }), this.SideItems.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ZoomPositionDefault,
            img: t + "wfe.defaultzoom.png",
            click: function () {
                e.graph.GraphLayerScaleNorm()
            }
        }), this.SideItems.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ZoomIn,
            img: t + "wfe.zoomin.png",
            click: function () {
                e.graph.GraphLayerScale(.1)
            }
        }), this.SideItems.push({
            title: WorkflowDesignerConstants.ToolbarLabel.ZoomOut,
            img: t + "wfe.zoomout.png",
            click: function () {
                e.graph.GraphLayerScale(-.1)
            }
        }), e.graph.Stage.getContent().addEventListener("wheel", function (t) {
            var i = e.GetWorkflowDesignerBackground(),
                n = i.BackgroundLayer.scaleX(),
                a = {
                    x: t.offsetX / n - i.RectBG.x(),
                    y: t.offsetY / n - i.RectBG.y()
                },
                o = t.deltaY > 0 ? -.1 : .1,
                r = n + o,
                s = {
                    x: a.x - a.x / r,
                    y: a.y - a.y / r
                },
                l = {
                    x: ((1 - n) * t.offsetX / n - i.RectBG.x()) / r,
                    y: ((1 - n) * t.offsetY / n - i.RectBG.y()) / r
                };
            s.x += l.x, s.y += l.y, e.graph.GraphLayerScale(o, s)
        })
    }, this.LayerScaleNorm = function (e) {
        this.updateScaleText(e)
    }, this.LayerScale = function (e) {
        var t = e.scale,
            i = e.delta;
        this.updateScaleText(t + i)
    }, this.updateScaleText = function (t) {
        void 0 != e.graph._bg && this.scaleText.text(Math.floor(100 * t) + "%")
    }, this.GetItemByCode = function (e) {
        for (var t in this.Items)
            for (var i = 0; i < this.Items[t].length; i++) {
                var n = this.Items[t][i];
                if (n.code == e) return n
            }
        for (var i = 0; i < this.SideItems.length; i++) {
            var n = this.SideItems[i];
            if (n.code == e) return n
        }
    }, this.SyncTable = function (e, t, i) {
        if (void 0 == i.keyproperty) {
            e.splice(0, e.length);
            for (var n = 0; n < t.length; n++) {
                var a = {};
                i.elements.forEach(function (e) {
                    a[e.field] = t[n][e.field]
                }), e.push(a)
            }
        } else {
            for (var n = e.length - 1; n >= 0; n--) {
                var o = $.grep(t, function (t) {
                    return e[n][i.keyproperty] == t.keyproperty
                });
                0 == o.length ? e.splice(n, 1) : i.elements.forEach(function (t) {
                    e[n][t.field] = o[0][t.field]
                })
            }
            for (var n = 0; n < t.length; n++) {
                var o = $.grep(e, function (e) {
                    return t[n][i.keyproperty] == e[i.keyproperty]
                });
                if (0 == o.length) {
                    var a = {};
                    i.elements.forEach(function (e) {
                        a[e.field] = t[n][e.field]
                    }), e.push(a)
                }
            }
        }
    }, this.ShowLegend = function () {
        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.legend) return void this.graph.Settings.forms.legend();
        var e = this.graph.Settings.imagefolder,
            t = $('<image src="' + e + 'wfe.legend.png" height="' + .7 * this.graph.Stage.getHeight() + '"/>'),
            i = $('<div class="ui modal"></div>').append($('<div class="content" style="text-align: center;"></div>').append(t));
        WorkflowDesignerCommon.modal(i, "show")
    }, this.setItemDisabled = function (e, t) {
        for (var i in this.Items)
            for (var n = 0; n < this.Items[i].length; n++) {
                var a = this.Items[i][n];
                if (a.code == e) {
                    a.disabled = t, void 0 != a.cImageToolbar && a.cImageToolbar.opacity(t ? .3 : 1);
                    break
                }
            }
        for (var n = 0; n < this.SideItems.length; n++)
            if (this.SideItems[n].code == e) {
                this.SideItems[n].disabled = t, void 0 != this.Items[n].cImageToolbar && this.Items[n].cImageToolbar.opacity(t ? .3 : 1);
                break
            }
    }, this.setItemActive = function (e, t) {
        for (var i in this.Items)
            for (var n = 0; n < this.Items[i].length; n++) {
                var a = this.Items[i][n];
                if (a.code == e) {
                    a.active = t, void 0 != a.bg && a.bg.setFill(t ? WorkflowDesignerConstants.ButtonActive : "");
                    break
                }
            }
        for (var n = 0; n < this.SideItems.length; n++)
            if (this.SideItems[n].code == e) {
                this.SideItems[n].active = t, void 0 != this.SideItems[n].bg && this.SideItems[n].bg.setFill(t ? WorkflowDesignerConstants.ButtonActive : "");
                break
            }
    }, this.destroy = function () {
        this.Layer.destroyed = !0, void 0 !== e && (void 0 !== e.Layer && null !== e.Layer && e.Layer.destroy(), e = void 0)
    }
}

function WorkflowDesignerKeyboard() {
    this.type = "WorkflowDesignerKeyboard", this.init = function (e) {
        this.graph = e, this.subscribe()
    }, this.destroy = function () {
        this.unsubscribe()
    }, this.subscribe = function () {
        var e = this.graph.container,
            t = document.getElementById(e);
        this.ev = !1;
        var i = this;
        t.onmouseover = function () {
            i.ev = !0
        }, t.onmouseout = function () {
            i.ev = !1
        }, this._keyProcessing = function (e) {
            i.keyProcessing(e)
        }, document.addEventListener("keydown", this._keyProcessing, !1)
    }, this.unsubscribe = function () {
        var e = this.graph.container,
            t = document.getElementById(e);
        void 0 != t && (t.onmouseover = void 0, t.onmouseout = void 0), document.removeEventListener("keydown", this._keyProcessing)
    }, this.keyProcessing = function (e) {
        if (this.ev !== !1) {
            const t = e.key;
            if ("Control" !== t) {
                var i = !1;
                return e.ctrlKey ? "a" == t ? this.graph.SelectAll() : "c" == t ? this.toolbarExec("CopySelected") : "e" != t || this.graph.Settings.readonly ? "i" == t ? this.toolbarExec("ToolbarExInfoPress") : "m" == t ? this.toolbarExec("ToolbarMovePress") : "y" != t || this.graph.Settings.readonly ? "z" != t || this.graph.Settings.readonly ? i = !0 : this.graph.Undo() : this.graph.Redo() : this.toolbarExec("CreateActivity") : e.altKey && "Enter" == t ? this.graph.onFullScreenClick() : "Delete" != t || this.graph.Settings.readonly ? "ArrowUp" == t ? this.objectsMove(0, -1) : "ArrowDown" == t ? this.objectsMove(0, 1) : "ArrowLeft" == t ? this.objectsMove(-1, 0) : "ArrowRight" == t ? this.objectsMove(1, 0) : i = !0 : this.graph.DeleteSelected(), 0 == i ? void e.preventDefault() : void 0
            }
        }
    }, this.objectsMove = function (e, t) {
        var i = this.graph.GetComponentByType("WorkflowDesignerActivityManager");
        if (void 0 != i) {
            var n = this.graph.Settings.DefaultMoveStep;
            0 == i.GetSelected().length ? this.graph.GraphUpdatePosition({
                x: e * n,
                y: t * n
            }) : (i.ObjectMove({
                changepos: {
                    x: e * n,
                    y: t * n
                }
            }), i.batchDraw())
        }
    }, this.toolbarExec = function (e) {
        var t = this.graph.GetComponentByType("WorkflowDesignerToolbar");
        void 0 != t && void 0 != t[e] && t[e]()
    }
}

function ParametersControl(e) {
    this.parentForm = e
}

function DefaultValueControl(e, t, i) {
    this.parentForm = e, this.prefix = i, this.parameter = t
}

function JsonControl(e, t, i) {
    this.parentForm = e, this.prefix = i, this.parameter = t
}

function InputControl(e) {
    this.parentForm = e
}

function CheckboxControl(e) {
    this.parentForm = e
}

function SelectControl(e) {
    this.parentForm = e
}
var WorkflowDesignerConstants = {
    ActivityColor: "#ECF0F1",
    ActivityTextColor: "#2D3436",
    ActivityInitialColor: "#27AE60",
    ActivityInitialTextColor: "#FFFFFF",
    ActivityFinalColor: "#2980B9",
    ActivityFinalTextColor: "#FFFFFF",
    ActivityShape: "#CECECE",
    SelectColor: "#F39C12",
    SelectTextColor: "#FFFFFF",
    SelectSubProcessColor: "#e3b015",
    SelectSubProcessTextColor: "#FFFFFF",
    ButtonActive: "#D4D8D9",
    BarColor: "#EDF1F2",
    BarSeparatorColor: "#D9DEE0",
    DeleteConfirm: "Are you sure you want to delete selected item(s)?",
    DeleteConfirmCurrent: "Are you sure you want to delete this item?",
    FieldIsRequired: "Field is required!",
    FieldMustBeUnique: "Field must be unique!",
    ButtonTextDelete: "Delete",
    ButtonTextCreate: "Add",
    ButtonTextSave: "Save",
    ButtonTextYes: "Yes",
    ButtonTextNo: "No",
    ButtonTextCancel: "Cancel",
    ButtonTextClose: "Close",
    ButtonTextUndo: "Undo",
    ButtonTextRedo: "Redo",
    SaveConfirm: "Save changes?",
    CloseWithoutSaving: "Close without saving?",
    TransitionAuto: "Condition",
    DialogConfirmText: "Question",
    None: "None",
    Warning: "Warning",
    InfoBlockLabel: {
        Activity: "Tasks: ",
        Transition: "Condition: ",
        Command: "Commands: "
    },
    ActivityNamePrefix: "Service_",
    ActivityFormLabel: {
        Title: "Service",
        TitleForInline: "Service Inline",
        Name: "Name",
        State: "Role",
        IsInitial: "Initial",
        IsFinal: "Final",
        IsForSetState: "For set process",
        IsAutoSchemeUpdate: "Auto scheme update",
        Implementation: "Create System Actions",
        PreExecutionImplementation: "PreExecution Implementation",
        ImpOrder: "Order",
        ImpAction: "Action",
        ImpActionParameter: "Action parameter",
        AlwaysConditionShouldBeSingle: "Always condition should be single",
        OtherwiseConditionShouldBeSingle: "Otherwise condition should be single",
        Annotations: "Annotations",
        AnnotationName: "Name",
        AnnotationValue: "Value",
        Scheme: "Inline scheme"
    },
    TransitionFormLabel: {
        Title: "Condition",
        Name: "Name",
        From: "From service",
        To: "To service",
        Classifier: "Classifier",
        Restrictions: "Authority",
        RestrictionsType: "Type",
        RestrictionsActor: "Role",
        Condition: "WorkOrder Attributes",
        ConditionType: "Name",
        ConditionAction: "Value",
        ResultOnPreExecution: "Result on PreExecution",
        Trigger: "Trigger",
        TriggerType: "Type",
        TriggerCommand: "Command",
        TriggerTimer: "Timer",
        ConditionActionParameter: "Action parameter",
        ConditionInversion: "Invert action result",
        ConditionsConcatenationType: "Conditions concatenation type",
        AllowConcatenationType: "Concat allow as",
        RestrictConcatenationType: "Concat restrict as",
        ConditionsListShouldNotBeEmpty: "Conditions list should not be empty",
        IsFork: "Is fork",
        MergeViaSetState: "Merge subprocess via set state",
        DisableParentStateControl: "Disable parent process control",
        ShowConcatParameters: "Show concatenation",
        HideConcatParameters: "Hide concatenation",
        Annotations: "Service Attributes",
        AnnotationName: "Name",
        AnnotationValue: "Value",
        InlinedFinalActivityName: "Inlined Final Activity Name"
    },
    LocalizationFormLabel: {
        Title: "Localization",
        ObjectName: "ObjectName",
        Type: "Type",
        IsDefault: "IsDefault",
        Culture: "Culture",
        Value: "Value",
        Types: ["Command", "State", "Parameter"]
    },
    TimerFormLabel: {
        Title: "Timers",
        Name: "Name",
        Type: "Type",
        Value: "Value",
        Types: ["Command", "State", "Parameter"],
        NotOverrideIfExists: "Do not override timer if exists"
    },
    ParameterFormLabel: {
        Title: "Parameters",
        Name: "Name",
        Type: "Type",
        Purpose: "Purpose",
        Value: "Value",
        InitialValue: "InitialValue",
        ShowSystemParameters: "Show system parameters"
    },
    ActorFormLabel: {
        Title: "Roles",
        Name: "Name",
        Rule: "Rule",
        Value: "Value"
    },
    CommandFormLabel: {
        Title: "Command",
        Name: "Name",
        InputParameters: "Input Parameters",
        InputParametersName: "Name",
        InputParametersIsRequired: "Required",
        InputParametersParameter: "Parameter",
        InputParametersDefaultValue: "Default"
    },
    ProcessInfoFormLabel: {
        Title: "Additional Parameters",
        IsObsolete: "IsObsolete",
        DefiningParameters: "Defining parameters",
        ProcessParameters: "Process parameters",
        SystemParametersTabName: "System Parameters",
        ProcessParametersTabName: "Process Parameters",
        HistoryTabName: "History",
        TimersTabName: "Timers",
        HistoryTabFromLabel: "From",
        HistoryTabFromStateLabel: "From State",
        HistoryTabToLabel: "To",
        HistoryTabToStateLabel: "To State",
        HistoryTabExecutorIdLabel: "Executor Id",
        HistoryTabActorIdLabel: "Actor Id",
        HistoryTabTimeLabel: "Time",
        HistoryTabTriggerNameLabel: "Trigger Name",
        HistoryTabTransitionClassifierNameLabel: "",
        ParametersNameLabel: "Name",
        ParametersValueLabel: "Value",
        TimersTabNameLabel: "Name",
        TimersTabValueLabel: "Value",
        RootProcess: "Root Process"
    },
    CodeActionsFormLabel: {
        Title: "Code actions",
        Name: "Name",
        ActionCode: "Action code",
        IsGlobal: "Is global",
        IsAsync: "Async",
        Type: "Type",
        GlobalDeleteMessage: "You've deleted the Global CodeAction.<br/><b>Other schemes won't be able to call this CodeAction!</b>",
        UnGlobalMessage: "You've changed the state of the global flag.<br/>There will be created a Local CodeAction based on this Global CodeAction after saving this scheme.",
        EditParameters: "Edit parameters",
        Parameters: "Parameters",
        Text: "Text",
        Number: "Number",
        Checkbox: "Checkbox",
        Dropdown: "Dropdown",
        DateTime: "Date/Time",
        Values: "Values",
        DropdownName: "Name",
        DropdownValue: "Value",
        DropdownShouldContainValues: "Dropdown should contain values",
        IsRequired: "Required",
        DefaultValue: "Default value",
        Json: "Json"
    },
    EditParametersFormlabel: {
        Title: "Edit parameter values",
        NumberRequired: "Should be a numeric value",
        DateShouldBeInISOFormat: "Date/Time parameter should be in ISO8601 format",
        SwitchToJson: "Switch to JSON editor",
        SwitchToConstructor: "Switch to parameter values editor",
        InvalidJson: "JSON object is invalid or does not match the model"
    },
    ToolbarLabel: {
        CreateActivity: "Create Service",
        CreateInline: "Create inline (template)",
        CopySelected: "Copy selected",
        Undo: "Undo",
        Redo: "Redo",
        Move: "Move",
        ZoomIn: "Zoom In",
        ZoomOut: "Zoom Out",
        ZoomPositionDefault: "Zoom default",
        FullScreen: "Full Screen",
        Refresh: "Refresh",
        AutoArrangement: "Auto arrangement",
        Actors: "Roles",
        Commands: "Commands",
        Parameters: "Parameters",
        Localization: "Localization",
        Timers: "Timers",
        AdditionalParameters: "Additional Parameters",
        CodeActions: "Code actions",
        Info: "Extended info",
        Delete: "Delete",
        Clone: "Clone",
        Settings: "Settings",
        CreateTransition: "Create a condition",
        CreateActivityTransition: "Create an Service and a condition",
        Legend: "Legend",
        ProcessInfo: "Process Info",
        Inline: "The scheme can be inlined"
    },
    ErrorActivityIsInitialCountText: "One element must be marked flag Initial",
    ErrorActivityIsFinalCountText: "This scheme is Inlined. One or more elements must be marked flag Final",
    ErrorReadOnlySaveText: "The Designer in ReadOnly mode, you can't save it.",
    ErrorInvalidObjectsSaveText: function (e) {
        return "Can't save the schema. Those objects are in invalid state: " + e
    },
    BrokenReferencesDialogText: "This schema contains references to Actions, Conditions or Rules that aren't defined by this schema or current action providers. Do you want to keep them?",
    FormMaxHeight: 700,
    EditCodeSettings: {
        Height: 600,
        Width: 1e3,
        CodeHeight: 390,
        MessageBoxHeight: 400,
        MessageBoxWidth: 600,
        SuccessBoxHeight: 150,
        SuccessBoxWidth: 300
    },
    EditCodeLabel: {
        Title: "Edit code",
        EditCodeButton: "Edit code",
        Usings: "Usings",
        Compile: "Compile",
        CompileSucceeded: "Compilation succeeded.",
        Success: "Success",
        Error: "Error",
        OK: "OK",
        ShowUsings: "Show usings",
        HideUsings: "Hide usings"
    },
    EditJSONSettings: {
        Height: 600,
        Width: 1e3,
        CodeHeight: 480
    },
    EditJSONLabel: {
        Title: "Edit value in JSON",
        CreateEmptyType: "Create",
        Format: "Format"
    },
    OverviewMap: {
        show: !0,
        width: 300,
        height: 150
    },
    UndoDepth: 200,
    DefaultCulture: "en-US"
},
    WorkflowDesignerCommon = {
        modal: function (e, t) {
            var i = void 0;
            void 0 != e.semanticmodal ? i = "semanticmodal" : void 0 != e.modal ? i = "modal" : console.error("SemanticUI is not defined!"), void 0 != i && (e[i](t), void 0 == t || void 0 == t.onApprove && void 0 == t.onDeny || void 0 != e.keyup && e.keyup(function (n) {
                if (13 === n.keyCode) {
                    if (null !== n.originalEvent && void 0 !== n.originalEvent && n.currentTarget !== n.originalEvent.target) return;
                    void 0 != t.onApprove && 0 != t.onApprove() && e[i]("hide")
                } else 27 === n.keyCode && (void 0 != t.onDeny ? 0 != t.onDeny() && e[i]("hide") : e[i]("hide"))
            }))
        },
        createArrowByAngle: function (e, t, i, n, a) {
            return void 0 == a && (a = "red"), new Konva.Wedge({
                x: e,
                y: t,
                radius: n,
                angle: 40,
                fill: a,
                rotation: 180 * i / Math.PI - 200
            })
        },
        updateArrowByAngle: function (e, t, i, n, a, o) {
            void 0 == o && (o = "red"), e.setPosition({
                x: t,
                y: i
            }), e.setRadius(a), e.setFill(o), e.setRotation(180 * n / Math.PI - 200)
        },
        createUUID: function () {
            for (var e = [], t = "0123456789abcdef", i = 0; i < 36; i++) e[i] = t.substr(Math.floor(16 * Math.random()), 1);
            return e[14] = "4", e[19] = t.substr(3 & e[19] | 8, 1), e[8] = e[13] = e[18] = e[23] = "-", e.join("")
        },
        DataCorrection: function (e) {
            void 0 == e.AdditionalParams && (e.AdditionalParams = {}), void 0 == e.AdditionalParams.Actions && (e.AdditionalParams.Actions = []), void 0 == e.AdditionalParams.Conditions && (e.AdditionalParams.Conditions = []), void 0 == e.AdditionalParams.Rules && (e.AdditionalParams.Rules = []);
            var t = function (e, t, i) {
                if (void 0 != e && void 0 != t) {
                    var n = $.grep(t, function (t) {
                        return e == t[i]
                    });
                    return n.length > 0 ? n[0] : void 0
                }
            };
            e.Transitions.forEach(function (i) {
                void 0 != i.From && (i.From = t(i.From.Name, e.Activities, "Name")), void 0 != i.To && (i.To = t(i.To.Name, e.Activities, "Name")), void 0 != i.Restrictions && i.Restrictions.forEach(function (i) {
                    i.Actor && (i.Actor = t(i.Actor.Name, e.Actors, "Name"))
                }), void 0 != i.Trigger && void 0 != i.Trigger.Command && (i.Trigger.Command = t(i.Trigger.Command.Name, e.Commands, "Name"), i.Trigger.Command || (i.Trigger.NameRef = null)), void 0 != i.Trigger && void 0 != i.Trigger.Timer && (i.Trigger.Timer = t(i.Trigger.Timer.Name, e.Timers, "Name"), i.Trigger.Timer || (i.Trigger.NameRef = null))
            }), e.Commands.forEach(function (i) {
                void 0 != i.InputParameters && i.InputParameters.forEach(function (i) {
                    i.Parameter = t(i.Parameter.Name, e.Parameters, "Name")
                })
            })
        },
        download: function (e, t, i) {
            if (e && t) {
                var n = new Array;
                t.forEach(function (e) {
                    var t = $('<input type="hidden"/>');
                    t.attr("name", e.name), t.attr("value", e.value), n.push(t)
                });
                var a = $('<form action="' + e + '" method="' + (i || "post") + '"></form>');
                a.append(n), a.appendTo("body").submit().remove()
            }
        },
        defineLocalStorage: function () {
            Object.defineProperty(window, "localStorage", new function () {
                var e = [],
                    t = {};
                Object.defineProperty(t, "getItem", {
                    value: function (e) {
                        return e ? this[e] : null
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "key", {
                    value: function (t) {
                        return e[t]
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "setItem", {
                    value: function (e, t) {
                        e && (document.cookie = escape(e) + "=" + escape(t) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/")
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "length", {
                    get: function () {
                        return e.length
                    },
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "removeItem", {
                    value: function (e) {
                        e && (document.cookie = escape(e) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/")
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), Object.defineProperty(t, "clear", {
                    value: function () {
                        if (e.length)
                            for (var t in e) document.cookie = escape(t) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/"
                    },
                    writable: !1,
                    configurable: !1,
                    enumerable: !1
                }), this.get = function () {
                    var i;
                    for (var n in t) i = e.indexOf(n), i === -1 ? t.setItem(n, t[n]) : e.splice(i, 1), delete t[n];
                    for (e; e.length > 0; e.splice(0, 1)) t.removeItem(e[0]);
                    for (var a, o, r = 0, s = document.cookie.split(/\s*;\s*/); r < s.length; r++) a = s[r].split(/\s*=\s*/), a.length > 1 && (t[o = unescape(a[0])] = unescape(a[1]), e.push(o));
                    return t
                }, this.configurable = !1, this.enumerable = !0
            })
        },
        imageCache: [],
        loadImage: function (e, t, i) {
            for (var n, a = 0; a < WorkflowDesignerCommon.imageCache.length; a++) {
                var o = WorkflowDesignerCommon.imageCache[a];
                if (o.src == e) {
                    n = o;
                    break
                }
            }
            return void 0 != n ? (void 0 != t && t(n, i), n) : (n = new Image, void 0 != t && (n.onload = function () {
                t(n, i)
            }), n.src = e, n)
        },
        getTextWidth: function (e, t) {
            var i = WorkflowDesignerCommon.TmpCanvas || (WorkflowDesignerCommon.TmpCanvas = document.createElement("canvas")),
                n = i.getContext("2d");
            return n.font = t, n.measureText(e).width
        },
        defineArrayIncludes: function () {
            Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", {
                value: function (e, t) {
                    function i(e, t) {
                        return e === t || "number" == typeof e && "number" == typeof t && isNaN(e) && isNaN(t)
                    }
                    if (null == this) throw new TypeError('"this" is null or not defined');
                    var n = Object(this),
                        a = n.length >>> 0;
                    if (0 === a) return !1;
                    for (var o = 0 | t, r = Math.max(o >= 0 ? o : a - Math.abs(o), 0); r < a;) {
                        if (i(n[r], e)) return !0;
                        r++
                    }
                    return !1
                }
            })
        }
    };
! function (e, t, i, n) {
    "use strict";
    t = void 0 !== t && t.Math == Math ? t : "undefined" != typeof self && self.Math == Math ? self : Function("return this")(), e.fn.modal = function (n) {
        var a, o = e(this),
            r = e(t),
            s = e(i),
            l = e("body"),
            d = o.selector || "",
            c = (new Date).getTime(),
            h = [],
            u = arguments[0],
            m = "string" == typeof u,
            g = [].slice.call(arguments, 1),
            f = t.requestAnimationFrame || t.mozRequestAnimationFrame || t.webkitRequestAnimationFrame || t.msRequestAnimationFrame || function (e) {
                setTimeout(e, 0)
            };
        return o.each(function () {
            var o, p, v, y, w, S, b, C, D, T = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.modal.settings, n) : e.extend({}, e.fn.modal.settings),
                k = T.selector,
                x = T.className,
                A = T.namespace,
                _ = T.error,
                I = "." + A,
                P = "module-" + A,
                N = e(this),
                W = e(T.context),
                F = N.find(k.close),
                M = this,
                L = N.data(P),
                O = !1;
            D = {
                initialize: function () {
                    D.verbose("Initializing dimmer", W), D.create.id(), D.create.dimmer(), D.refreshModals(), D.bind.events(), T.observeChanges && D.observeChanges(), D.instantiate()
                },
                instantiate: function () {
                    D.verbose("Storing instance of modal"), L = D, N.data(P, L)
                },
                create: {
                    dimmer: function () {
                        var t = {
                            debug: T.debug,
                            variation: !T.centered && "top aligned",
                            dimmerName: "modals"
                        },
                            i = e.extend(!0, t, T.dimmerSettings);
                        if (void 0 === e.fn.dimmer) return void D.error(_.dimmer);
                        D.debug("Creating dimmer"), y = W.dimmer(i), T.detachable ? (D.verbose("Modal is detachable, moving content into dimmer"), y.dimmer("add content", N)) : D.set.undetached(), w = y.dimmer("get dimmer")
                    },
                    id: function () {
                        b = (Math.random().toString(16) + "000000000").substr(2, 8), S = "." + b, D.verbose("Creating unique id for element", b)
                    }
                },
                destroy: function () {
                    D.verbose("Destroying previous modal"), N.removeData(P).off(I), r.off(S), w.off(S), F.off(I), W.dimmer("destroy")
                },
                observeChanges: function () {
                    "MutationObserver" in t && (C = new MutationObserver(function (e) {
                        D.debug("DOM tree modified, refreshing"), D.refresh()
                    }), C.observe(M, {
                        childList: !0,
                        subtree: !0
                    }), D.debug("Setting up mutation observer", C))
                },
                refresh: function () {
                    D.remove.scrolling(), D.cacheSizes(), D.can.useFlex() || D.set.modalOffset(), D.set.screenHeight(), D.set.type()
                },
                refreshModals: function () {
                    p = N.siblings(k.modal), o = p.add(N)
                },
                attachEvents: function (t, i) {
                    var n = e(t);
                    i = e.isFunction(D[i]) ? D[i] : D.toggle, n.length > 0 ? (D.debug("Attaching modal events to element", t, i), n.off(I).on("click" + I, i)) : D.error(_.notFound, t)
                },
                bind: {
                    events: function () {
                        D.verbose("Attaching events"), N.on("click" + I, k.close, D.event.close).on("click" + I, k.approve, D.event.approve).on("click" + I, k.deny, D.event.deny), r.on("resize" + S, D.event.resize)
                    },
                    scrollLock: function () {
                        y.get(0).addEventListener("touchmove", D.event.preventScroll, {
                            passive: !1
                        })
                    }
                },
                unbind: {
                    scrollLock: function () {
                        y.get(0).removeEventListener("touchmove", D.event.preventScroll, {
                            passive: !1
                        })
                    }
                },
                get: {
                    id: function () {
                        return (Math.random().toString(16) + "000000000").substr(2, 8)
                    }
                },
                event: {
                    approve: function () {
                        if (O || T.onApprove.call(M, e(this)) === !1) return void D.verbose("Approve callback returned false cancelling hide");
                        O = !0, D.hide(function () {
                            O = !1
                        })
                    },
                    preventScroll: function (e) {
                        e.preventDefault()
                    },
                    deny: function () {
                        if (O || T.onDeny.call(M, e(this)) === !1) return void D.verbose("Deny callback returned false cancelling hide");
                        O = !0, D.hide(function () {
                            O = !1
                        })
                    },
                    close: function () {
                        D.hide()
                    },
                    click: function (t) {
                        if (!T.closable) return void D.verbose("Dimmer clicked but closable setting is disabled");
                        var n = e(t.target),
                            a = n.closest(k.modal).length > 0,
                            o = e.contains(i.documentElement, t.target);
                        !a && o && D.is.active() && (D.debug("Dimmer clicked, hiding all modals"), D.remove.clickaway(), T.allowMultiple ? D.hide() : D.hideAll())
                    },
                    debounce: function (e, t) {
                        clearTimeout(D.timer), D.timer = setTimeout(e, t)
                    },
                    keyboard: function (e) {
                        27 == e.which && (T.closable ? (D.debug("Escape key pressed hiding modal"), D.hide()) : D.debug("Escape key pressed, but closable is set to false"), e.preventDefault())
                    },
                    resize: function () {
                        y.dimmer("is active") && (D.is.animating() || D.is.active()) && f(D.refresh)
                    }
                },
                toggle: function () {
                    D.is.active() || D.is.animating() ? D.hide() : D.show()
                },
                show: function (t) {
                    t = e.isFunction(t) ? t : function () { }, D.refreshModals(), D.set.dimmerSettings(), D.set.dimmerStyles(), D.showModal(t)
                },
                hide: function (t) {
                    t = e.isFunction(t) ? t : function () { }, D.refreshModals(), D.hideModal(t)
                },
                showModal: function (t) {
                    t = e.isFunction(t) ? t : function () { }, D.is.animating() || !D.is.active() ? (D.showDimmer(), D.cacheSizes(), D.can.useFlex() ? D.remove.legacy() : (D.set.legacy(), D.set.modalOffset(), D.debug("Using non-flex legacy modal positioning.")), D.set.screenHeight(), D.set.type(), D.set.clickaway(), !T.allowMultiple && D.others.active() ? D.hideOthers(D.showModal) : (T.allowMultiple && T.detachable && N.detach().appendTo(w), T.onShow.call(M), T.transition && void 0 !== e.fn.transition && N.transition("is supported") ? (D.debug("Showing modal with css animations"), N.transition({
                        debug: T.debug,
                        animation: T.transition + " in",
                        queue: T.queue,
                        duration: T.duration,
                        useFailSafe: !0,
                        onComplete: function () {
                            T.onVisible.apply(M), T.keyboardShortcuts && D.add.keyboardShortcuts(), D.save.focus(), D.set.active(), T.autofocus && D.set.autofocus(), t()
                        }
                    })) : D.error(_.noTransition))) : D.debug("Modal is already visible")
                },
                hideModal: function (t, i) {
                    if (t = e.isFunction(t) ? t : function () { }, D.debug("Hiding modal"), T.onHide.call(M, e(this)) === !1) return void D.verbose("Hide callback returned false cancelling hide");
                    (D.is.animating() || D.is.active()) && (T.transition && void 0 !== e.fn.transition && N.transition("is supported") ? (D.remove.active(), N.transition({
                        debug: T.debug,
                        animation: T.transition + " out",
                        queue: T.queue,
                        duration: T.duration,
                        useFailSafe: !0,
                        onStart: function () {
                            D.others.active() || i || D.hideDimmer(), T.keyboardShortcuts && D.remove.keyboardShortcuts()
                        },
                        onComplete: function () {
                            T.onHidden.call(M), D.remove.dimmerStyles(), D.restore.focus(), t()
                        }
                    })) : D.error(_.noTransition))
                },
                showDimmer: function () {
                    y.dimmer("is animating") || !y.dimmer("is active") ? (D.debug("Showing dimmer"), y.dimmer("show")) : D.debug("Dimmer already visible")
                },
                hideDimmer: function () {
                    if (!y.dimmer("is animating") && !y.dimmer("is active")) return void D.debug("Dimmer is not visible cannot hide");
                    D.unbind.scrollLock(), y.dimmer("hide", function () {
                        D.remove.clickaway(), D.remove.screenHeight()
                    })
                },
                hideAll: function (t) {
                    var i = o.filter("." + x.active + ", ." + x.animating);
                    t = e.isFunction(t) ? t : function () { }, i.length > 0 && (D.debug("Hiding all visible modals"), D.hideDimmer(), i.modal("hide modal", t))
                },
                hideOthers: function (t) {
                    var i = p.filter("." + x.active + ", ." + x.animating);
                    t = e.isFunction(t) ? t : function () { }, i.length > 0 && (D.debug("Hiding other modals", p), i.modal("hide modal", t, !0))
                },
                others: {
                    active: function () {
                        return p.filter("." + x.active).length > 0
                    },
                    animating: function () {
                        return p.filter("." + x.animating).length > 0
                    }
                },
                add: {
                    keyboardShortcuts: function () {
                        D.verbose("Adding keyboard shortcuts"), s.on("keyup" + I, D.event.keyboard)
                    }
                },
                save: {
                    focus: function () {
                        e(i.activeElement).closest(N).length > 0 || (v = e(i.activeElement).blur())
                    }
                },
                restore: {
                    focus: function () {
                        v && v.length > 0 && v.focus()
                    }
                },
                remove: {
                    active: function () {
                        N.removeClass(x.active)
                    },
                    legacy: function () {
                        N.removeClass(x.legacy)
                    },
                    clickaway: function () {
                        w.off("click" + S)
                    },
                    dimmerStyles: function () {
                        w.removeClass(x.inverted), y.removeClass(x.blurring)
                    },
                    bodyStyle: function () {
                        "" === l.attr("style") && (D.verbose("Removing style attribute"), l.removeAttr("style"))
                    },
                    screenHeight: function () {
                        D.debug("Removing page height"), l.css("height", "")
                    },
                    keyboardShortcuts: function () {
                        D.verbose("Removing keyboard shortcuts"), s.off("keyup" + I)
                    },
                    scrolling: function () {
                        y.removeClass(x.scrolling), N.removeClass(x.scrolling)
                    }
                },
                cacheSizes: function () {
                    N.addClass(x.loading);
                    var n = N.prop("scrollHeight"),
                        a = N.outerWidth(),
                        o = N.outerHeight();
                    void 0 !== D.cache && 0 === o || (D.cache = {
                        pageHeight: e(i).outerHeight(),
                        width: a,
                        height: o + T.offset,
                        scrollHeight: n + T.offset,
                        contextHeight: "body" == T.context ? e(t).height() : y.height()
                    }, D.cache.topOffset = -(D.cache.height / 2)), N.removeClass(x.loading), D.debug("Caching modal and container sizes", D.cache)
                },
                can: {
                    useFlex: function () {
                        return "auto" == T.useFlex ? T.detachable && !D.is.ie() : T.useFlex
                    },
                    fit: function () {
                        var e = D.cache.contextHeight,
                            t = D.cache.contextHeight / 2,
                            i = D.cache.topOffset,
                            n = D.cache.scrollHeight,
                            a = D.cache.height,
                            o = T.padding,
                            r = t + i;
                        return n > a ? r + n + o < e : a + 2 * o < e
                    }
                },
                is: {
                    active: function () {
                        return N.hasClass(x.active)
                    },
                    ie: function () {
                        var e = !t.ActiveXObject && "ActiveXObject" in t,
                            i = "ActiveXObject" in t;
                        return e || i
                    },
                    animating: function () {
                        return N.transition("is supported") ? N.transition("is animating") : N.is(":visible")
                    },
                    scrolling: function () {
                        return y.hasClass(x.scrolling)
                    },
                    modernBrowser: function () {
                        return !(t.ActiveXObject || "ActiveXObject" in t)
                    }
                },
                set: {
                    autofocus: function () {
                        var e = N.find("[tabindex], :input").filter(":visible"),
                            t = e.filter("[autofocus]"),
                            i = t.length > 0 ? t.first() : e.first();
                        i.length > 0 && i.focus()
                    },
                    clickaway: function () {
                        w.on("click" + S, D.event.click)
                    },
                    dimmerSettings: function () {
                        if (void 0 === e.fn.dimmer) return void D.error(_.dimmer);
                        var t = {
                            debug: T.debug,
                            dimmerName: "modals",
                            closable: "auto",
                            useFlex: D.can.useFlex(),
                            variation: !T.centered && "top aligned",
                            duration: {
                                show: T.duration,
                                hide: T.duration
                            }
                        },
                            i = e.extend(!0, t, T.dimmerSettings);
                        T.inverted && (i.variation = void 0 !== i.variation ? i.variation + " inverted" : "inverted"), W.dimmer("setting", i)
                    },
                    dimmerStyles: function () {
                        T.inverted ? w.addClass(x.inverted) : w.removeClass(x.inverted), T.blurring ? y.addClass(x.blurring) : y.removeClass(x.blurring)
                    },
                    modalOffset: function () {
                        var e = D.cache.width,
                            t = D.cache.height;
                        N.css({
                            marginTop: T.centered && D.can.fit() ? -(t / 2) : 0,
                            marginLeft: -(e / 2)
                        }), D.verbose("Setting modal offset for legacy mode")
                    },
                    screenHeight: function () {
                        D.can.fit() ? l.css("height", "") : (D.debug("Modal is taller than page content, resizing page height"), l.css("height", D.cache.height + 2 * T.padding))
                    },
                    active: function () {
                        N.addClass(x.active)
                    },
                    scrolling: function () {
                        y.addClass(x.scrolling), N.addClass(x.scrolling), D.unbind.scrollLock()
                    },
                    legacy: function () {
                        N.addClass(x.legacy)
                    },
                    type: function () {
                        D.can.fit() ? (D.verbose("Modal fits on screen"), D.others.active() || D.others.animating() || (D.remove.scrolling(), D.bind.scrollLock())) : (D.verbose("Modal cannot fit on screen setting to scrolling"), D.set.scrolling())
                    },
                    undetached: function () {
                        y.addClass(x.undetached)
                    }
                },
                setting: function (t, i) {
                    if (D.debug("Changing setting", t, i), e.isPlainObject(t)) e.extend(!0, T, t);
                    else {
                        if (void 0 === i) return T[t];
                        e.isPlainObject(T[t]) ? e.extend(!0, T[t], i) : T[t] = i
                    }
                },
                internal: function (t, i) {
                    if (e.isPlainObject(t)) e.extend(!0, D, t);
                    else {
                        if (void 0 === i) return D[t];
                        D[t] = i
                    }
                },
                debug: function () {
                    !T.silent && T.debug && (T.performance ? D.performance.log(arguments) : (D.debug = Function.prototype.bind.call(console.info, console, T.name + ":"), D.debug.apply(console, arguments)))
                },
                verbose: function () {
                    !T.silent && T.verbose && T.debug && (T.performance ? D.performance.log(arguments) : (D.verbose = Function.prototype.bind.call(console.info, console, T.name + ":"), D.verbose.apply(console, arguments)))
                },
                error: function () {
                    T.silent || (D.error = Function.prototype.bind.call(console.error, console, T.name + ":"), D.error.apply(console, arguments))
                },
                performance: {
                    log: function (e) {
                        var t, i, n;
                        T.performance && (t = (new Date).getTime(), n = c || t, i = t - n, c = t, h.push({
                            Name: e[0],
                            Arguments: [].slice.call(e, 1) || "",
                            Element: M,
                            "Execution Time": i
                        })), clearTimeout(D.performance.timer), D.performance.timer = setTimeout(D.performance.display, 500)
                    },
                    display: function () {
                        var t = T.name + ":",
                            i = 0;
                        c = !1, clearTimeout(D.performance.timer), e.each(h, function (e, t) {
                            i += t["Execution Time"]
                        }), t += " " + i + "ms", d && (t += " '" + d + "'"), (void 0 !== console.group || void 0 !== console.table) && h.length > 0 && (console.groupCollapsed(t), console.table ? console.table(h) : e.each(h, function (e, t) {
                            console.log(t.Name + ": " + t["Execution Time"] + "ms")
                        }), console.groupEnd()), h = []
                    }
                },
                invoke: function (t, i, n) {
                    var o, r, s, l = L;
                    return i = i || g, n = M || n, "string" == typeof t && void 0 !== l && (t = t.split(/[\. ]/), o = t.length - 1, e.each(t, function (i, n) {
                        var a = i != o ? n + t[i + 1].charAt(0).toUpperCase() + t[i + 1].slice(1) : t;
                        if (e.isPlainObject(l[a]) && i != o) l = l[a];
                        else {
                            if (void 0 !== l[a]) return r = l[a], !1;
                            if (!e.isPlainObject(l[n]) || i == o) return void 0 !== l[n] && (r = l[n], !1);
                            l = l[n]
                        }
                    })), e.isFunction(r) ? s = r.apply(n, i) : void 0 !== r && (s = r), e.isArray(a) ? a.push(s) : void 0 !== a ? a = [a, s] : void 0 !== s && (a = s), r
                }
            }, m ? (void 0 === L && D.initialize(), D.invoke(u)) : (void 0 !== L && L.invoke("destroy"), D.initialize())
        }), void 0 !== a ? a : this
    }, e.fn.modal.settings = {
        name: "Modal",
        namespace: "modal",
        useFlex: "auto",
        offset: 0,
        silent: !1,
        debug: !1,
        verbose: !1,
        performance: !0,
        observeChanges: !1,
        allowMultiple: !1,
        detachable: !0,
        closable: !0,
        autofocus: !0,
        inverted: !1,
        blurring: !1,
        centered: !0,
        dimmerSettings: {
            closable: !1,
            useCSS: !0
        },
        keyboardShortcuts: !0,
        context: "body",
        queue: !1,
        duration: 500,
        transition: "scale",
        padding: 50,
        onShow: function () { },
        onVisible: function () { },
        onHide: function () {
            return !0
        },
        onHidden: function () { },
        onApprove: function () {
            return !0
        },
        onDeny: function () {
            return !0
        },
        selector: {
            close: "> .close",
            approve: ".actions .positive, .actions .approve, .actions .ok",
            deny: ".actions .negative, .actions .deny, .actions .cancel",
            modal: ".ui.modal"
        },
        error: {
            dimmer: "UI Dimmer, a required component is not included in this page",
            method: "The method you called is not defined.",
            notFound: "The element you specified could not be found"
        },
        className: {
            active: "active",
            animating: "animating",
            blurring: "blurring",
            inverted: "inverted",
            legacy: "legacy",
            loading: "loading",
            scrolling: "scrolling",
            undetached: "undetached"
        }
    }
}(jQuery, window, document),
    function () {
        function e(e) {
            t(e);
            var i = e.parent().next().next().children(),
                n = e.val(),
                a = i[0].rebuild(n);
            i.remove(), e.parent().next().next().append(a)
        }

        function t(e) {
            var t = e.parent().next().next().next().children();
            "Dropdown" === e.val() ? t.show() : t.hide()
        }

        function i(e, t) {
            return n(e, t, !0), !0
        }

        function n(e, t, i) {
            var n = e.parent().parent(),
                a = n.parent().prev(),
                o = t.getEditData({
                    type: "table",
                    control: n,
                    elements: t.parameters.elements[4].elements
                });
            i && o.splice(e[0].rowIndex - 1, 1);
            var r = a.children(),
                s = r.val();
            if ("" === s) {
                var l = !1;
                $.each(r[0].options, function (e, t) {
                    return 0 === e || ("" === t.value ? (l = !0, !1) : void 0)
                }), l || (s = void 0)
            }
            var d = r[0].rebuild("Dropdown", s, o);
            r.remove(), a.append(d)
        }
        ParametersControl.prototype.generate = function (a, o, r) {
            var s = this,
                l = $('<button class="ui button basic">' + WorkflowDesignerConstants.CodeActionsFormLabel.EditParameters + "</button>");
            return l[0].id = s.parentForm.generateid(a.field, r), l[0].name = s.parentForm.getElementCode(a), l[0].parameters = o, l.on("click", function () {
                var o = WorkflowDesignerConstants.CodeActionsFormLabel,
                    r = {
                        type: "table",
                        title: o.EditParameters,
                        width: "800px",
                        data: l[0].parameters,
                        keyproperty: "Name",
                        onrowadded: function (e) {
                            t(e.find("[name=Type]"))
                        },
                        elements: [{
                            name: o.Name,
                            field: "Name",
                            type: "input"
                        }, {
                            name: o.Type,
                            field: "Type",
                            type: "select",
                            displayfield: "Name",
                            valuefield: "Value",
                            onchange: e,
                            datasource: [{
                                Name: o.Text,
                                Value: "Text"
                            }, {
                                Name: o.Number,
                                Value: "Number"
                            }, {
                                Name: o.Checkbox,
                                Value: "Checkbox"
                            }, {
                                Name: o.Dropdown,
                                Value: "Dropdown"
                            }, {
                                Name: o.DateTime,
                                Value: "DateTime"
                            }, {
                                Name: o.Json,
                                Value: "Json"
                            }]
                        }, {
                            name: o.IsRequired,
                            field: "IsRequired",
                            type: "checkbox"
                        }, {
                            name: o.DefaultValue,
                            field: "DefaultValue",
                            type: "defaultvalue",
                            typeswitcher: "Type"
                        }, {
                            name: o.Values,
                            field: "DropdownValues",
                            type: "table",
                            onrowdelete: i,
                            onrowchanged: n,
                            elements: [{
                                name: o.DropdownName,
                                code: "DropdownValueName",
                                field: "Name",
                                type: "input"
                            }, {
                                name: o.DropdownValue,
                                code: "DropdownValueValue",
                                field: "Value",
                                type: "input"
                            }]
                        }],
                        readonly: a.graph.Settings.readonly,
                        onHidden: function () {
                            setTimeout(function () {
                                WorkflowDesignerCommon.modal(s.parentForm.window, "show")
                            }, 10)
                        }
                    },
                    d = new WorkflowDesignerForm(r),
                    c = function (e, t) {
                        var i = !0,
                            n = null;
                        return t.length > 1 ? (i &= e.CheckRequired(t, ["Name", "Type"], WorkflowDesignerConstants.FieldIsRequired), i &= e.CheckUnique(t, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) : i &= e.CheckRequired(t, ["Type"], WorkflowDesignerConstants.FieldIsRequired), i && $.each(t, function (t, a) {
                            if ("Dropdown" === a.Type) {
                                if (void 0 === a.DropdownValues || !a.DropdownValues.length) return i = !1, $(a.control_DropdownValues).after('<div class="error-message">' + o.DropdownShouldContainValues + "</div>"), !1;
                                if (!e.CheckUnique(a.DropdownValues, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique) || !e.CheckUnique(a.DropdownValues, ["Value"], WorkflowDesignerConstants.FieldMustBeUnique)) return i = !1, !1
                            }
                            if ("" !== a.DefaultValue && null !== a.DefaultValue && (n = Validation.checkType(a.Type, a.DefaultValue))) return d.ControlAddError(a.control_DefaultValue, n), i = !1, !1
                        }), i
                    },
                    h = function (e) {
                        return !!c(d, e) && (d.ClearTempField(e), l[0].parameters = e, !0)
                    };
                WorkflowDesignerCommon.modal(s.parentForm.window, "hide"), d.showModal(h), d.window.find("[name=Type]").each(function (e, i) {
                    t($(i))
                })
            }), l
        }
    }(), DefaultValueControl.prototype.generate = function (e, t) {
        return this.build(t.Type, e, t.DropdownValues)
    }, DefaultValueControl.prototype.build = function (e, t, i) {
        var n = this,
            a = null;
        switch (e) {
            case "Text":
            case "Number":
            case "DateTime":
                a = new InputControl(n.parentForm).generate(n.parameter, t, n.prefix);
                break;
            case "Checkbox":
                a = new CheckboxControl(n.parentForm).generate($.extend({
                    indeterminable: !0
                }, n.parameter), t, n.prefix);
                break;
            case "Dropdown":
                a = new SelectControl(n.parentForm).generate($.extend({
                    displayfield: "Name",
                    valuefield: "Value",
                    datasource: i
                }, n.parameter), t, n.prefix);
                break;
            case "Json":
                a = new JsonControl(n.parentForm, n.parameter, n.prefix).generateBasicControl(t);
                break;
            default:
                a = $("<div></div>")
        }
        return a[0].rebuild = function (e, t, i) {
            return n.build(e, t, i)
        }, a
    },
    function () {
        function e(e, a, o, r) {
            var s = !1,
                l = null,
                d = WorkflowDesignerConstants.EditParametersFormlabel,
                c = $('<div style="float: right; margin-bottom: 15px;"></div>'),
                h = $('<a href="#" class="btnAdd"></a>');
            h[0].innerHTML = d.SwitchToJson, h.on("click", function () {
                return s = !0, WorkflowDesignerCommon.modal(l.window, "hide"), !1
            }), c.append(h);
            var u = {
                type: "form",
                title: d.Title,
                width: "800px",
                readonly: e.parameter.graph.Settings.readonly,
                onHidden: function () {
                    setTimeout(function () {
                        if (s) {
                            s = !1;
                            var t = l.getEditData(l.parameters),
                                r = {};
                            $.each(o, function (e, n) {
                                paramValue = t[n.Name], r = i(n, paramValue, r)
                            }), $(".ace_editor").remove(), n(e, a, {
                                initialValue: JSON.stringify(r),
                                paramsInfo: o
                            })()
                        } else WorkflowDesignerCommon.modal(e.parentForm.window, "show")
                    }, 10)
                },
                bottom: c[0],
                elements: new Array
            };
            if (void 0 !== r) "" === o[0].Name ? (u.data = {}, u.data[""] = r) : u.data = r;
            else if ("" === o[0].Name) {
                if (u.data = {}, a[0].value) try {
                    u.data[""] = JSON.parse(a[0].value)
                } catch (e) {
                    "Text" !== o[0].Type && "Dropdown" !== o[0].Type && "DateTime" !== o[0].Type || (u.data[""] = a[0].value)
                }
            } else {
                if (a[0].value) try {
                    u.data = JSON.parse(a[0].value)
                } catch (e) { }
                u.data || (u.data = {}), $.each(o, function (e, t) {
                    var i = u.data[t.Name];
                    void 0 !== i && null !== i && "" !== i || (u.data[t.Name] = t.DefaultValue)
                })
            }
            $.each(o, function (e, t) {
                switch (t.Type) {
                    case "Text":
                    case "Number":
                    case "DateTime":
                        u.elements.push({
                            type: "input",
                            name: t.Name,
                            field: t.Name
                        });
                        break;
                    case "Checkbox":
                        u.elements.push({
                            type: "checkbox",
                            name: t.Name,
                            field: t.Name,
                            indeterminable: !0
                        });
                        break;
                    case "Dropdown":
                        u.elements.push({
                            type: "select",
                            name: t.Name,
                            displayfield: "Name",
                            valuefield: "Value",
                            datasource: t.DropdownValues,
                            field: t.Name
                        });
                        break;
                    case "Json":
                        u.elements.push({
                            type: "json",
                            name: t.Name,
                            field: t.Name
                        })
                }
            }), l = new WorkflowDesignerForm(u);
            var m = function (n) {
                var r = null,
                    s = !0,
                    l = {};
                return $.each(o, function (a, o) {
                    r = n[o.Name];
                    var d = t(r, o);
                    d ? (s = !1, e.parentForm.ControlAddError(n["control_" + o.Name], d)) : l = i(o, r, l)
                }), s && (1 !== o.length || "" !== o[0].Name || "Text" !== o[0].Type && "Dropdown" !== o[0].Type && "DateTime" !== o[0].Type ? a[0].value = JSON.stringify(l) : a[0].value = l), s
            };
            l.showModal(m)
        }

        function t(e, t) {
            return !t.IsRequired || void 0 !== e && null !== e && "" !== e ? Validation.checkType(t.Type, e) : WorkflowDesignerConstants.FieldIsRequired
        }

        function i(e, t, i) {
            if ("" === e.Name)
                if ("Text" !== e.Type && "" === t) i = null;
                else if ("Number" === e.Type) i = Number(t);
                else if ("Json" === e.Type) try {
                    i = JSON.parse(t)
                } catch (e) {
                    i = t
                } else i = t;
            else if ("Text" !== e.Type && "" === t) i[e.Name] = null;
            else if ("Number" === e.Type) i[e.Name] = Number(t);
            else if ("Json" === e.Type) try {
                i[e.Name] = JSON.parse(t)
            } catch (n) {
                i[e.Name] = t
            } else i[e.Name] = t;
            return i
        }

        function n(i, n, o) {
            var r = $('<div class="ui modal WorkflowDesignerDialogChild"><div class="header">' + WorkflowDesignerConstants.EditJSONLabel.Title + '</div><div id="' + n[0].id + '_editor" style="height:' + WorkflowDesignerConstants.EditJSONSettings.CodeHeight + 'px">' + n[0].value + "</div></div>");
            r[0].id = n[0].id + "_form";
            var s = !1,
                l = $('<div class="actions"></div>');
            if (void 0 !== o) {
                var d = $('<div style="display: inline-block"></div>'),
                    c = $('<a href="#" class="btnAdd"></a>');
                c[0].innerHTML = WorkflowDesignerConstants.EditParametersFormlabel.SwitchToConstructor, c.on("click", function () {
                    return s = !0, WorkflowDesignerCommon.modal(r, "hide"), !1
                }), d.append(c), l.append(d)
            }
            if (!n[0].readOnly) {
                var h = $('<div class="ui button">' + WorkflowDesignerConstants.EditJSONLabel.Format + "</div>");
                h.click(function () {
                    var e = ace.edit(n[0].id + "_editor"),
                        t = ace.edit(n[0].id + "_editor").getValue();
                    e.setValue(i.parentForm.toPrettyJSON(t)), e.clearSelection()
                }), l.append(h)
            }
            if (void 0 != i.parameter.getemptytype && !n[0].readOnly) {
                var u = $('<div class="ui button">' + WorkflowDesignerConstants.EditJSONLabel.CreateEmptyType + "</div>");
                u.click(function () {
                    var e = i.parameter;
                    void 0 != e.getemptytype && e.getemptytype(i.parentForm, n[0], function (e) {
                        if (void 0 != e && "" !== e) {
                            var t = ace.edit(n[0].id + "_editor");
                            t.setValue(i.parentForm.toPrettyJSON(e)), t.clearSelection()
                        }
                    })
                }), l.append(u)
            }
            return n[0].readOnly ? l.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (l.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), l.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), r.append(l),
                function () {
                    void 0 !== o && WorkflowDesignerCommon.modal(i.parentForm.window, "hide"), WorkflowDesignerCommon.modal(r, {
                        closable: !1,
                        allowMultiple: !0,
                        onApprove: function () {
                            var e = ace.edit(n[0].id + "_editor").getValue();
                            if (o) {
                                i.parentForm.ClearError();
                                var s = null;
                                try {
                                    s = JSON.parse(e)
                                } catch (e) {
                                    return a(r), !1
                                }
                                if ("" === o.paramsInfo[0].Name) {
                                    if (t(s, o.paramsInfo[0])) return a(r), !1
                                } else {
                                    var l = !1;
                                    if ($.each(o.paramsInfo, function (e, i) {
                                        if (t(s[i.Name], i)) return l = !0, !1
                                    }), l) return a(r), !1
                                }
                            }
                            n[0].value = i.parentForm.toCompactJSON(e)
                        },
                        onHidden: function () {
                            if (s) {
                                s = !1;
                                var t = ace.edit(n[0].id + "_editor").getValue(),
                                    a = null;
                                try {
                                    a = JSON.parse(t)
                                } catch (e) { }
                                e(i, n, o.paramsInfo, a)
                            } else setTimeout(function () {
                                WorkflowDesignerCommon.modal(i.parentForm.window, "show")
                            }, 10)
                        },
                        dimmerSettings: {
                            opacity: .2,
                            duration: {
                                show: 0,
                                hide: 0
                            }
                        },
                        transition: "fade"
                    }), WorkflowDesignerCommon.modal(r, "show");
                    var l = ace.edit(n[0].id + "_editor");
                    n[0].readOnly ? l.setOptions({
                        readOnly: !0
                    }) : l.setOptions({
                        readOnly: !1
                    }), l.getSession().setMode("ace/mode/json"), l.setValue(i.parentForm.toPrettyJSON(void 0 !== o ? o.initialValue : n[0].value)), l.clearSelection()
                }
        }

        function a(e) {
            $(".header", e).after('<div class="error-message" style="padding: 4px">' + WorkflowDesignerConstants.EditParametersFormlabel.InvalidJson + "</div>")
        }
        JsonControl.prototype.generateParameterControl = function (e, t) {
            var i = this,
                n = null;
            switch (i.parameter.parametertype) {
                case "Action":
                    n = t.ActionName;
                    break;
                case "Condition":
                    t.Action && (n = t.Action.ActionName);
                    break;
                case "RuleCheck":
                    n = t.Rule
            }
            return i.build(n, e)
        }, JsonControl.prototype.generateBasicControl = function (e) {
            var t = this,
                i = $('<input type="text"></input>');
            i[0].id = t.parentForm.generateid(t.parameter.field, t.prefix), i[0].name = t.parentForm.getElementCode(t.parameter), void 0 !== e && null !== e && ("object" == typeof e ? i[0].value = JSON.stringify(e) : i[0].value = e), t.parentForm.isReadOnly() && i.attr("readonly", !0);
            var a = $('<a class="btnCodeActions"></a>');
            a[0].id = i[0].id + "_button", a.on("click", n(t, i)), t.parentForm.addAutoComplete(t.parameter, i);
            var o = $('<div style="width:100%;"></div>').append($('<div style="width:16px; float:right; margin-right:7px;margin-top: 10px;"></div>').append(a)).append($('<div style="margin-right:30px"></div>').append(i));
            return o[0].rebuild = function (e, i) {
                return t.build(e, i)
            }, o
        }, JsonControl.prototype.build = function (t, i) {
            var n = this,
                a = null;
            if (t && (a = n.parameter.graph.getActionParameterDefinition(t, n.parameter.parametertype)), !(a && a.length || ("RuleCheck" === n.parameter.parametertype && (a = n.parameter.graph.getActionParameterDefinition(t, "RuleGet")), a && a.length))) return n.generateBasicControl(i);
            null !== i && "" !== i || "" !== a[0].Name || (i = a[0].DefaultValue);
            var o = $('<input type="text"></input>');
            o[0].id = n.parentForm.generateid(n.parameter.field, n.prefix), o[0].name = n.parentForm.getElementCode(n.parameter), void 0 !== i && (o[0].value = i), n.parentForm.isReadOnly() && o.attr("readonly", !0);
            var r = $('<a class="btnCodeActions"></a>');
            r[0].id = o[0].id + "_button", r.on("click", function () {
                e(n, o, a)
            });
            var s = $('<div style="width:100%;"></div>').append($('<div style="width:16px; float:right; margin-right:7px;margin-top: 10px;"></div>').append(r)).append($('<div style="margin-right:30px"></div>').append(o));
            return s[0].rebuild = function (e, t) {
                return n.build(e, t)
            }, s
        }
    }(), InputControl.prototype.generate = function (e, t, i) {
        var n = this,
            a = $('<input type="text"></input>');
        return a[0].id = n.parentForm.generateid(e.field, i), a[0].name = n.parentForm.getElementCode(e), void 0 !== t && (a[0].value = t), n.parentForm.isReadOnly() && a.attr("readonly", !0), n.parentForm.addAutoComplete(e, a), void 0 !== e.onchange && a.on("change", function () {
            e.onchange(a)
        }), a.data("initial-value", t), a
    }, CheckboxControl.prototype.generate = function (e, t, i) {
        var n = this,
            a = $('<input type="checkbox"></input>');
        return a[0].id = n.parentForm.generateid(e.field, i), a[0].checked = t, a[0].name = n.parentForm.getElementCode(e), n.parentForm.isReadOnly() && a.attr("disabled", "disabled"), a = $('<div class="ui checkbox"></div>').append(a).append("<label></label>"), !e.indeterminable || null !== t && void 0 !== t && "" !== t || a.checkbox("set indeterminate"), a
    }, SelectControl.prototype.generate = function (e, t, i) {
        var n = this,
            a = $('<select class="ui selection dropdown"></select>'),
            o = !1;
        return a[0].id = n.parentForm.generateid(e.field, i), a[0].name = n.parentForm.getElementCode(e), a.append($("<option></option>")), void 0 !== e.datasource && e.datasource.forEach(function (i) {
            var r = $("<option></option>");
            void 0 === e.displayfield ? (r[0].value = i, r[0].innerHTML = i) : (r[0].innerHTML = i[e.displayfield], void 0 !== e.valuefield ? r[0].value = i[e.valuefield] : r[0].value = i[e.displayfield]), o || (r[0].value == t ? (r[0].selected = "selected", o = !0) : void 0 !== t && null !== t && void 0 !== r[0].value && null !== r[0].value && r[0].value.toLowerCase() === t.toString().toLowerCase() && (r[0].selected = "selected", o = !0)), n.parentForm.isReadOnly() && a.attr("disabled", "disabled"), a.append(r)
        }), void 0 !== e.onchange && a.on("change", function () {
            e.onchange(a)
        }), a
    };
var Validation = {
    checkType: function (e, t) {
        var i = WorkflowDesignerConstants.EditParametersFormlabel;
        switch (e) {
            case "Number":
                if (isNaN(t) || t === !0 || t === !1) return i.NumberRequired;
                break;
            case "DateTime":
                if ("" !== t && null !== t && void 0 !== t && !moment(t, moment.ISO_8601).isValid()) return i.DateShouldBeInISOFormat
        }
        return null
    }
},
    WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditCodeActions = function () {
    function e(e, t) {
        var i = [];
        return e.forEach(function (n) {
            if (n.IsGlobal) {
                for (var a = !1, o = 0; o < e.length; o++)
                    if (n.Name == e[o].Name && n.IsGlobal != e[o].IsGlobal) {
                        a = !0;
                        break
                    }
                for (var r = !1, o = 0; o < t.length; o++)
                    if (a) {
                        if (n.Name == t[o].Name && t[o].IsGlobal) {
                            r = !0;
                            break
                        }
                    } else if (n.Name == t[o].Name) {
                        r = !0;
                        break
                    }
                r && i.push(n.Name)
            }
        }), i
    }

    function t(e, t) {
        var i = 0,
            n = 0;
        $.each(t, function (t, a) {
            switch (a.type) {
                case "Action":
                    for (i = 0; i < e.Activities.length; i += 1) {
                        var o = e.Activities[i];
                        if ("Inline" !== o.ActivityType) {
                            if (o.Implementation)
                                for (n = 0; n < o.Implementation.length; n += 1) o.Implementation[n].ActionName === a.initial && (o.Implementation[n].ActionName = a.current);
                            if (o.Implementation)
                                for (n = 0; n < o.PreExecutionImplementation.length; n += 1) o.PreExecutionImplementation[n].ActionName === a.initial && (o.PreExecutionImplementation[n].ActionName = a.current)
                        }
                    }
                    break;
                case "Condition":
                    for (i = 0; i < e.Transitions.length; i += 1) {
                        var r = e.Transitions[i];
                        for (n = 0; n < r.Conditions.length; n += 1) {
                            var s = r.Conditions[n];
                            "Action" === s.Type && s.Action.ActionName === a.initial && (s.Action.ActionName = a.current)
                        }
                    }
                    break;
                case "RuleGet":
                case "RuleCheck":
                    for (i = 0; i < e.Actors.length; i += 1) e.Actors[i].Rule === a.initial && (e.Actors[i].Rule = a.current)
            }
        })
    }
    return function (i) {
        var n = WorkflowDesignerConstants.CodeActionsFormLabel,
            a = {
                type: "table",
                title: n.Title,
                data: i.graph.data.CodeActions,
                datadefault: {},
                elements: [{
                    name: n.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: n.Type,
                    field: "Type",
                    type: "select",
                    displayfield: "Name",
                    datasource: [{
                        Name: "Action"
                    }, {
                        Name: "Condition"
                    }, {
                        Name: "RuleGet"
                    }, {
                        Name: "RuleCheck"
                    }]
                }, {
                    name: n.IsGlobal,
                    field: "IsGlobal",
                    type: "checkbox"
                }, {
                    name: n.IsAsync,
                    field: "IsAsync",
                    type: "checkbox"
                }, {
                    name: n.ActionCode,
                    field: "ActionCode",
                    type: "code"
                }, {
                    name: n.Parameters,
                    field: "ParameterDefinitions",
                    type: "parameters",
                    graph: i.graph
                }],
                graph: i.graph,
                readonly: i.graph.Settings.readonly,
                onrowadded: function (e, t) {
                    e.find("[name=Type]").change(function () {
                        r(e)
                    }), r(e), e.find("[name=IsGlobal]").change(function () {
                        this.checked || t.InfoDialog(WorkflowDesignerConstants.Warning, WorkflowDesignerConstants.CodeActionsFormLabel.UnGlobalMessage, "mini")
                    })
                },
                onrowdelete: function (e, t) {
                    return e.find("[name=IsGlobal]")[0].checked && t.InfoDialog(WorkflowDesignerConstants.Warning, WorkflowDesignerConstants.CodeActionsFormLabel.GlobalDeleteMessage, "mini"), !0
                },
                saveFunc: function (e, n) {
                    i.SyncTable(i.graph.data.CodeActions, e, a);
                    for (var o = 0; o < i.graph.data.CodeActions.length; o++) {
                        var r = i.graph.data.CodeActions[o].ActionCode,
                            s = i.graph.data.CodeActions[o].ParameterDefinitions;
                        if (i.graph.data.CodeActions[o].ActionCode = encodeURIComponent(r.code), i.graph.data.CodeActions[o].Usings = encodeURIComponent(r.usings), void 0 !== s && null !== s) {
                            var l = {};
                            i.graph.data.CodeActions[o].ParameterDefinitions = new Array, $.each(s, function (e, t) {
                                l = {
                                    Name: t.Name,
                                    Type: t.Type,
                                    IsRequired: t.IsRequired,
                                    DefaultValue: t.DefaultValue
                                }, "Dropdown" === l.Type && (l.DropdownValues = new Array, $.each(t.DropdownValues, function (e, t) {
                                    l.DropdownValues.push({
                                        Name: t.Name,
                                        Value: t.Value
                                    })
                                })), i.graph.data.CodeActions[o].ParameterDefinitions.push(l)
                            })
                        }
                    }
                    n.length && t(i.graph.data, n), WorkflowDesignerCommon.DataCorrection(i.graph.data), i.graph.Draw(i.graph.data), i.graph.StoreGraphData()
                }
            };
        if (void 0 != i.graph.Settings.forms && void 0 != i.graph.Settings.forms.codeactions) return void i.graph.Settings.forms.codeactions(a);
        var o = new WorkflowDesignerForm(a),
            r = function (e) {
                var t = e.find("[name=Type]")[0],
                    i = e.find("[name=IsAsync]");
                void 0 === t || "RuleGet" !== t.value && "RuleCheck" !== t.value ? i.attr("disabled", !1) : (i.attr("disabled", !0), i.attr("checked", !1))
            },
            s = function (t, n) {
                for (var a = 0; a < t.length; a++) {
                    var r = t[a];
                    void 0 === r.ActionCode || void 0 !== r.ActionCode.code && r.ActionCode.code || ("Action" === r.Type ? r.ActionCode.code = "return;" : "Condition" === r.Type ? r.ActionCode.code = "return false;" : "RuleGet" === r.Type ? r.ActionCode.code = "return new List<string>();" : "RuleCheck" === r.Type && (r.ActionCode.code = "return false;"))
                }
                if (o.CheckRequired(t, ["Name", "Type", "ActionCode.code"], WorkflowDesignerConstants.FieldIsRequired) && o.CheckUnique(t, ["Name", "Type", "IsGlobal"], WorkflowDesignerConstants.FieldMustBeUnique)) {
                    for (var s = new Array, a = 0; a < t.length; a++) {
                        var r = t[a],
                            l = $(r.control_Name).data("initial-value"),
                            d = r.Name;
                        l !== d && s.push({
                            initial: l,
                            current: d,
                            type: r.Type
                        })
                    }
                    o.ClearTempField(t);
                    var c = e(i.graph.data.CodeActions, t);
                    return c.length > 0 && i.graph.designer.deleteGlobalCodeAction(c, function (e) {
                        return e.isError && o.InfoDialog(WorkflowDesignerConstants.EditCodeLabel.Error, e.errorMessage), !1
                    }), o.parameters.saveFunc(t, s), !0
                }
                return !1
            };
        o.showModal(s)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditTimer = function () {
    return function (e) {
        var t = WorkflowDesignerConstants.TimerFormLabel,
            i = {
                type: "table",
                title: t.Title,
                width: "800px",
                data: e.graph.data.Timers,
                keyproperty: "Name",
                elements: [{
                    name: t.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: t.Type,
                    field: "Type",
                    type: "select",
                    datasource: e.graph.data.AdditionalParams.TimerTypes
                }, {
                    name: t.Value,
                    field: "Value",
                    type: "input"
                }, {
                    name: t.NotOverrideIfExists,
                    field: "NotOverrideIfExists",
                    type: "checkbox"
                }],
                readonly: e.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Timers, t, i), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), e.graph.StoreGraphData()
                }
            };
        if (void 0 != e.graph.Settings.forms && void 0 != e.graph.Settings.forms.timers) return void e.graph.Settings.forms.timers(i);
        var n = new WorkflowDesignerForm(i),
            a = function (t, i) {
                return !(!n.CheckRequired(t, ["Name", "Type", "Value"], WorkflowDesignerConstants.FieldIsRequired) || !n.CheckUnique(t, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (n.ClearTempField(t), void 0 == e.graph.data.Timers && (e.graph.data.Timers = []), n.parameters.saveFunc(t), !0)
            };
        n.showModal(a)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditActors = function () {
    return function (e) {
        var t = WorkflowDesignerConstants.ActorFormLabel,
            i = {
                type: "table",
                title: t.Title,
                width: "800px",
                data: e.graph.data.Actors,
                keyproperty: "Name",
                elements: [{
                    name: t.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: t.Rule,
                    field: "Rule",
                    type: "select",
                    datasource: e.graph.getActorNames(),
                    onchange: function (e) {
                        var t = $(e),
                            i = t.closest("tr").find("[name=actoractionparam]").closest("td"),
                            n = i.children(),
                            a = n[0].rebuild($(e).val(), n.find("input").val());
                        n.remove(), i.append(a)
                    }
                }, {
                    name: t.Value,
                    field: "Value",
                    type: "jsonparameter",
                    code: "actoractionparam",
                    graph: e.graph,
                    parametertype: "RuleCheck",
                    openautocompleteonclick: !0,
                    datasource: function (t, i) {
                        var n = $(this).closest("tr"),
                            a = n.find("[name=Rule]")[0].value;
                        i(e.graph.getAutoCompleteSuggestions("ruleparameter", a, t))
                    }
                }],
                graph: e.graph,
                readonly: e.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Actors, t, i), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), e.graph.StoreGraphData()
                }
            };
        if (void 0 != e.graph.Settings.forms && void 0 != e.graph.Settings.forms.actors) return void e.graph.Settings.forms.actors(i);
        var n = new WorkflowDesignerForm(i),
            a = function (e, t) {
                return !(!n.CheckRequired(e, ["Name", "Rule"], WorkflowDesignerConstants.FieldIsRequired) || !n.CheckUnique(e, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (n.ClearTempField(e), n.parameters.saveFunc(e), !0)
            };
        n.showModal(a)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.EditCommands = function () {
    return function (e) {
        var t = WorkflowDesignerConstants.CommandFormLabel,
            i = function (t, i, n) {
                for (var a = void 0, o = void 0, r = t.getEditData(t.parameters), s = 0; s < r.length; s++) {
                    var l = r[s];
                    if (void 0 != l.InputParameters)
                        for (var d = 0; d < l.InputParameters.length; d++)
                            if (l.InputParameters[d].control_DefaultValue.id === i.id) {
                                o = l.InputParameters[d].Parameter.Name;
                                break
                            }
                }
                if (void 0 != o)
                    for (var c = e.graph.data.Parameters, s = 0; s < c.length; s++)
                        if (c[s].Name === o) {
                            a = c[s].Type;
                            break
                        }
                void 0 != a && e.graph.graph.getemptytype(a, n)
            },
            n = {
                type: "table",
                title: t.Title,
                width: "900px",
                data: e.graph.data.Commands,
                datadefault: {},
                keyproperty: "Name",
                elements: [{
                    name: t.Name,
                    field: "Name",
                    type: "input"
                }, {
                    name: t.InputParameters,
                    field: "InputParameters",
                    type: "table",
                    elements: [{
                        name: t.InputParametersName,
                        code: "ipname",
                        field: "Name",
                        type: "input",
                        width: "30%"
                    }, {
                        name: t.InputParametersParameter,
                        code: "ipparameter",
                        field: "Parameter.Name",
                        type: "select",
                        displayfield: "Name",
                        datasource: e.graph.getNonSystemParameters()
                    }, {
                        name: t.InputParametersIsRequired,
                        code: "iisrequired",
                        field: "IsRequired",
                        type: "checkbox"
                    }, {
                        name: t.InputParametersDefaultValue,
                        code: "idefaultvalue",
                        field: "DefaultValue",
                        type: "json",
                        width: "40%",
                        getemptytype: i
                    }]
                }],
                graph: e.graph,
                readonly: e.graph.Settings.readonly,
                saveFunc: function (t) {
                    e.SyncTable(e.graph.data.Commands, t, n), WorkflowDesignerCommon.DataCorrection(e.graph.data), e.graph.Draw(e.graph.data), e.graph.StoreGraphData()
                }
            };
        if (void 0 != e.graph.Settings.forms && void 0 != e.graph.Settings.forms.commands) return void e.graph.Settings.forms.commands(n);
        var a = new WorkflowDesignerForm(n),
            o = function (e, t) {
                var i = !0;
                return i &= e.CheckRequired(t, ["Name"], WorkflowDesignerConstants.FieldIsRequired), i &= e.CheckUnique(t, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique), t.forEach(function (t) {
                    e.CheckRequired(t.InputParameters, ["Name", "Parameter.Name"], WorkflowDesignerConstants.FieldIsRequired) || (i = !1)
                }), i
            },
            r = function (e) {
                return !!o(a, e) && (a.ClearTempField(e), a.parameters.saveFunc(e), !0)
            };
        a.showModal(r)
    }
}();
var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
WorkflowDesignerWindows.ConfirmDialog = function () {
    return function (e, t, i, n, a) {
        var o = $('<div tabindex="0" class="ui mini modal WorkflowDesignerConfirmDialog"></div>');
        o.append($('<div class="header">' + WorkflowDesignerConstants.DialogConfirmText + "</div>")), o.append($('<div class="content scrolling"><p>' + e + "</p></div>"));
        var r = $('<div class="actions"></div>').append('<div tabindex="1" class="ui primary ok button">' + t + "</div>").append('<div class="ui secondary  cancel button">' + n + "</div>");
        o.append(r), WorkflowDesignerCommon.modal(o, {
            onApprove: function () {
                i()
            },
            onDeny: function () {
                a()
            },
            allowMultiple: !0,
            dimmerSettings: {
                opacity: .2,
                duration: {
                    show: 0,
                    hide: 0
                }
            },
            transition: "fade"
        }), WorkflowDesignerCommon.modal(o, "show")
    }
}(),
    function (e, t) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : e.moment = t()
    }(this, function () {
        "use strict";

        function e() {
            return Qe.apply(null, arguments)
        }

        function t(e) {
            return e instanceof Array || "[object Array]" === Object.prototype.toString.call(e)
        }

        function i(e) {
            return null != e && "[object Object]" === Object.prototype.toString.call(e)
        }

        function n(e) {
            return void 0 === e
        }

        function a(e) {
            return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e)
        }

        function o(e) {
            return e instanceof Date || "[object Date]" === Object.prototype.toString.call(e)
        }

        function r(e, t) {
            var i, n = [];
            for (i = 0; i < e.length; ++i) n.push(t(e[i], i));
            return n
        }

        function s(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
        }

        function l(e, t) {
            for (var i in t) s(t, i) && (e[i] = t[i]);
            return s(t, "toString") && (e.toString = t.toString), s(t, "valueOf") && (e.valueOf = t.valueOf), e
        }

        function d(e, t, i, n) {
            return pe(e, t, i, n, !0).utc()
        }

        function c(e) {
            return null == e._pf && (e._pf = {
                empty: !1,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: !1,
                invalidMonth: null,
                invalidFormat: !1,
                userInvalidated: !1,
                iso: !1,
                parsedDateParts: [],
                meridiem: null,
                rfc2822: !1,
                weekdayMismatch: !1
            }), e._pf
        }

        function h(e) {
            if (null == e._isValid) {
                var t = c(e),
                    i = et.call(t.parsedDateParts, function (e) {
                        return null != e
                    }),
                    n = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && i);
                if (e._strict && (n = n && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), null != Object.isFrozen && Object.isFrozen(e)) return n;
                e._isValid = n
            }
            return e._isValid
        }

        function u(e) {
            var t = d(NaN);
            return null != e ? l(c(t), e) : c(t).userInvalidated = !0, t
        }

        function m(e, t) {
            var i, a, o;
            if (n(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), n(t._i) || (e._i = t._i), n(t._f) || (e._f = t._f), n(t._l) || (e._l = t._l), n(t._strict) || (e._strict = t._strict), n(t._tzm) || (e._tzm = t._tzm), n(t._isUTC) || (e._isUTC = t._isUTC), n(t._offset) || (e._offset = t._offset), n(t._pf) || (e._pf = c(t)), n(t._locale) || (e._locale = t._locale), 0 < it.length)
                for (i = 0; i < it.length; i++) n(o = t[a = it[i]]) || (e[a] = o);
            return e
        }

        function g(t) {
            m(this, t), this._d = new Date(null != t._d ? t._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), !1 === nt && (nt = !0, e.updateOffset(this), nt = !1)
        }

        function f(e) {
            return e instanceof g || null != e && null != e._isAMomentObject
        }

        function p(e) {
            return e < 0 ? Math.ceil(e) || 0 : Math.floor(e)
        }

        function v(e) {
            var t = +e,
                i = 0;
            return 0 !== t && isFinite(t) && (i = p(t)), i
        }

        function y(e, t, i) {
            var n, a = Math.min(e.length, t.length),
                o = Math.abs(e.length - t.length),
                r = 0;
            for (n = 0; n < a; n++)(i && e[n] !== t[n] || !i && v(e[n]) !== v(t[n])) && r++;
            return r + o
        }

        function w(t) {
            !1 === e.suppressDeprecationWarnings && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + t)
        }

        function S(t, i) {
            var n = !0;
            return l(function () {
                if (null != e.deprecationHandler && e.deprecationHandler(null, t), n) {
                    for (var a, o = [], r = 0; r < arguments.length; r++) {
                        if (a = "", "object" == typeof arguments[r]) {
                            for (var s in a += "\n[" + r + "] ", arguments[0]) a += s + ": " + arguments[0][s] + ", ";
                            a = a.slice(0, -2)
                        } else a = arguments[r];
                        o.push(a)
                    }
                    w(t + "\nArguments: " + Array.prototype.slice.call(o).join("") + "\n" + (new Error).stack), n = !1
                }
                return i.apply(this, arguments)
            }, i)
        }

        function b(t, i) {
            null != e.deprecationHandler && e.deprecationHandler(t, i), at[t] || (w(i), at[t] = !0)
        }

        function C(e) {
            return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e)
        }

        function D(e, t) {
            var n, a = l({}, e);
            for (n in t) s(t, n) && (i(e[n]) && i(t[n]) ? (a[n] = {}, l(a[n], e[n]), l(a[n], t[n])) : null != t[n] ? a[n] = t[n] : delete a[n]);
            for (n in e) s(e, n) && !s(t, n) && i(e[n]) && (a[n] = l({}, a[n]));
            return a
        }

        function T(e) {
            null != e && this.set(e)
        }

        function k(e, t) {
            var i = e.toLowerCase();
            ot[i] = ot[i + "s"] = ot[t] = e
        }

        function x(e) {
            return "string" == typeof e ? ot[e] || ot[e.toLowerCase()] : void 0
        }

        function A(e) {
            var t, i, n = {};
            for (i in e) s(e, i) && (t = x(i)) && (n[t] = e[i]);
            return n
        }

        function _(e, t) {
            rt[e] = t
        }

        function I(e, t, i) {
            var n = "" + Math.abs(e),
                a = t - n.length;
            return (0 <= e ? i ? "+" : "" : "-") + Math.pow(10, Math.max(0, a)).toString().substr(1) + n
        }

        function P(e, t, i, n) {
            var a = n;
            "string" == typeof n && (a = function () {
                return this[n]()
            }), e && (ct[e] = a), t && (ct[t[0]] = function () {
                return I(a.apply(this, arguments), t[1], t[2])
            }), i && (ct[i] = function () {
                return this.localeData().ordinal(a.apply(this, arguments), e)
            })
        }

        function N(e, t) {
            return e.isValid() ? (t = W(t, e.localeData()), dt[t] = dt[t] || function (e) {
                var t, i, n, a = e.match(st);
                for (t = 0, i = a.length; t < i; t++) ct[a[t]] ? a[t] = ct[a[t]] : a[t] = (n = a[t]).match(/\[[\s\S]/) ? n.replace(/^\[|\]$/g, "") : n.replace(/\\/g, "");
                return function (t) {
                    var n, o = "";
                    for (n = 0; n < i; n++) o += C(a[n]) ? a[n].call(t, e) : a[n];
                    return o
                }
            }(t), dt[t](e)) : e.localeData().invalidDate()
        }

        function W(e, t) {
            function i(e) {
                return t.longDateFormat(e) || e
            }
            var n = 5;
            for (lt.lastIndex = 0; 0 <= n && lt.test(e);) e = e.replace(lt, i), lt.lastIndex = 0, n -= 1;
            return e
        }

        function F(e, t, i) {
            Tt[e] = C(t) ? t : function (e, n) {
                return e && i ? i : t
            }
        }

        function M(e, t) {
            return s(Tt, e) ? Tt[e](t._strict, t._locale) : new RegExp(L(e.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (e, t, i, n, a) {
                return t || i || n || a
            })))
        }

        function L(e) {
            return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
        }

        function O(e, t) {
            var i, n = t;
            for ("string" == typeof e && (e = [e]), a(t) && (n = function (e, i) {
                i[t] = v(e)
            }), i = 0; i < e.length; i++) kt[e[i]] = n
        }

        function E(e, t) {
            O(e, function (e, i, n, a) {
                n._w = n._w || {}, t(e, n._w, n, a)
            })
        }

        function R(e) {
            return G(e) ? 366 : 365
        }

        function G(e) {
            return e % 4 == 0 && e % 100 != 0 || e % 400 == 0
        }

        function Y(t, i) {
            return function (n) {
                return null != n ? (V(this, t, n), e.updateOffset(this, i), this) : B(this, t)
            }
        }

        function B(e, t) {
            return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN
        }

        function V(e, t, i) {
            e.isValid() && !isNaN(i) && ("FullYear" === t && G(e.year()) && 1 === e.month() && 29 === e.date() ? e._d["set" + (e._isUTC ? "UTC" : "") + t](i, e.month(), $(i, e.month())) : e._d["set" + (e._isUTC ? "UTC" : "") + t](i))
        }

        function $(e, t) {
            if (isNaN(e) || isNaN(t)) return NaN;
            var i, n = (t % (i = 12) + i) % i;
            return e += (t - n) / 12, 1 === n ? G(e) ? 29 : 28 : 31 - n % 7 % 2
        }

        function H(e, t) {
            var i;
            if (!e.isValid()) return e;
            if ("string" == typeof t)
                if (/^\d+$/.test(t)) t = v(t);
                else if (!a(t = e.localeData().monthsParse(t))) return e;
            return i = Math.min(e.date(), $(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, i), e
        }

        function U(t) {
            return null != t ? (H(this, t), e.updateOffset(this, !0), this) : B(this, "Month")
        }

        function j() {
            function e(e, t) {
                return t.length - e.length
            }
            var t, i, n = [],
                a = [],
                o = [];
            for (t = 0; t < 12; t++) i = d([2e3, t]), n.push(this.monthsShort(i, "")), a.push(this.months(i, "")), o.push(this.months(i, "")), o.push(this.monthsShort(i, ""));
            for (n.sort(e), a.sort(e), o.sort(e), t = 0; t < 12; t++) n[t] = L(n[t]), a[t] = L(a[t]);
            for (t = 0; t < 24; t++) o[t] = L(o[t]);
            this._monthsRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + a.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + n.join("|") + ")", "i")
        }

        function q(e) {
            var t;
            if (e < 100 && 0 <= e) {
                var i = Array.prototype.slice.call(arguments);
                i[0] = e + 400, t = new Date(Date.UTC.apply(null, i)), isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e)
            } else t = new Date(Date.UTC.apply(null, arguments));
            return t
        }

        function J(e, t, i) {
            var n = 7 + t - i;
            return -((7 + q(e, 0, n).getUTCDay() - t) % 7) + n - 1
        }

        function K(e, t, i, n, a) {
            var o, r, s = 1 + 7 * (t - 1) + (7 + i - n) % 7 + J(e, n, a);
            return r = s <= 0 ? R(o = e - 1) + s : s > R(e) ? (o = e + 1, s - R(e)) : (o = e, s), {
                year: o,
                dayOfYear: r
            }
        }

        function z(e, t, i) {
            var n, a, o = J(e.year(), t, i),
                r = Math.floor((e.dayOfYear() - o - 1) / 7) + 1;
            return r < 1 ? n = r + X(a = e.year() - 1, t, i) : r > X(e.year(), t, i) ? (n = r - X(e.year(), t, i), a = e.year() + 1) : (a = e.year(), n = r), {
                week: n,
                year: a
            }
        }

        function X(e, t, i) {
            var n = J(e, t, i),
                a = J(e + 1, t, i);
            return (R(e) - n + a) / 7
        }

        function Z(e, t) {
            return e.slice(t, 7).concat(e.slice(0, t))
        }

        function Q() {
            function e(e, t) {
                return t.length - e.length
            }
            var t, i, n, a, o, r = [],
                s = [],
                l = [],
                c = [];
            for (t = 0; t < 7; t++) i = d([2e3, 1]).day(t), n = this.weekdaysMin(i, ""), a = this.weekdaysShort(i, ""), o = this.weekdays(i, ""), r.push(n), s.push(a), l.push(o), c.push(n), c.push(a), c.push(o);
            for (r.sort(e), s.sort(e), l.sort(e), c.sort(e), t = 0; t < 7; t++) s[t] = L(s[t]), l[t] = L(l[t]), c[t] = L(c[t]);
            this._weekdaysRegex = new RegExp("^(" + c.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + l.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + r.join("|") + ")", "i")
        }

        function ee() {
            return this.hours() % 12 || 12
        }

        function te(e, t) {
            P(e, 0, 0, function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), t)
            })
        }

        function ie(e, t) {
            return t._meridiemParse
        }

        function ne(e) {
            return e ? e.toLowerCase().replace("_", "-") : e
        }

        function ae(e) {
            var t = null;
            if (!Et[e] && "undefined" != typeof module && module && module.exports) try {
                t = Mt._abbr, require("./locale/" + e), oe(t)
            } catch (e) { }
            return Et[e]
        }

        function oe(e, t) {
            var i;
            return e && ((i = n(t) ? se(e) : re(e, t)) ? Mt = i : "undefined" != typeof console && console.warn && console.warn("Locale " + e + " not found. Did you forget to load it?")), Mt._abbr
        }

        function re(e, t) {
            if (null === t) return delete Et[e], null;
            var i, n = Ot;
            if (t.abbr = e, null != Et[e]) b("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), n = Et[e]._config;
            else if (null != t.parentLocale)
                if (null != Et[t.parentLocale]) n = Et[t.parentLocale]._config;
                else {
                    if (null == (i = ae(t.parentLocale))) return Rt[t.parentLocale] || (Rt[t.parentLocale] = []), Rt[t.parentLocale].push({
                        name: e,
                        config: t
                    }), null;
                    n = i._config
                }
            return Et[e] = new T(D(n, t)), Rt[e] && Rt[e].forEach(function (e) {
                re(e.name, e.config)
            }), oe(e), Et[e]
        }

        function se(e) {
            var i;
            if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) return Mt;
            if (!t(e)) {
                if (i = ae(e)) return i;
                e = [e]
            }
            return function (e) {
                for (var t, i, n, a, o = 0; o < e.length;) {
                    for (t = (a = ne(e[o]).split("-")).length, i = (i = ne(e[o + 1])) ? i.split("-") : null; 0 < t;) {
                        if (n = ae(a.slice(0, t).join("-"))) return n;
                        if (i && i.length >= t && y(a, i, !0) >= t - 1) break;
                        t--
                    }
                    o++
                }
                return Mt
            }(e)
        }

        function le(e) {
            var t, i = e._a;
            return i && -2 === c(e).overflow && (t = i[1] < 0 || 11 < i[1] ? 1 : i[2] < 1 || i[2] > $(i[0], i[1]) ? 2 : i[3] < 0 || 24 < i[3] || 24 === i[3] && (0 !== i[4] || 0 !== i[5] || 0 !== i[6]) ? 3 : i[4] < 0 || 59 < i[4] ? 4 : i[5] < 0 || 59 < i[5] ? 5 : i[6] < 0 || 999 < i[6] ? 6 : -1, c(e)._overflowDayOfYear && (t < 0 || 2 < t) && (t = 2), c(e)._overflowWeeks && -1 === t && (t = 7), c(e)._overflowWeekday && -1 === t && (t = 8), c(e).overflow = t), e
        }

        function de(e, t, i) {
            return null != e ? e : null != t ? t : i
        }

        function ce(t) {
            var i, n, a, o, r, s = [];
            if (!t._d) {
                var l, d;
                for (l = t, d = new Date(e.now()), a = l._useUTC ? [d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()] : [d.getFullYear(), d.getMonth(), d.getDate()], t._w && null == t._a[2] && null == t._a[1] && function (e) {
                    var t, i, n, a, o, r, s, l;
                    if (null != (t = e._w).GG || null != t.W || null != t.E) o = 1, r = 4, i = de(t.GG, e._a[0], z(ve(), 1, 4).year), n = de(t.W, 1), ((a = de(t.E, 1)) < 1 || 7 < a) && (l = !0);
                    else {
                        o = e._locale._week.dow, r = e._locale._week.doy;
                        var d = z(ve(), o, r);
                        i = de(t.gg, e._a[0], d.year), n = de(t.w, d.week), null != t.d ? ((a = t.d) < 0 || 6 < a) && (l = !0) : null != t.e ? (a = t.e + o, (t.e < 0 || 6 < t.e) && (l = !0)) : a = o
                    }
                    n < 1 || n > X(i, o, r) ? c(e)._overflowWeeks = !0 : null != l ? c(e)._overflowWeekday = !0 : (s = K(i, n, a, o, r), e._a[0] = s.year, e._dayOfYear = s.dayOfYear)
                }(t), null != t._dayOfYear && (r = de(t._a[0], a[0]), (t._dayOfYear > R(r) || 0 === t._dayOfYear) && (c(t)._overflowDayOfYear = !0), n = q(r, 0, t._dayOfYear), t._a[1] = n.getUTCMonth(), t._a[2] = n.getUTCDate()), i = 0; i < 3 && null == t._a[i]; ++i) t._a[i] = s[i] = a[i];
                for (; i < 7; i++) t._a[i] = s[i] = null == t._a[i] ? 2 === i ? 1 : 0 : t._a[i];
                24 === t._a[3] && 0 === t._a[4] && 0 === t._a[5] && 0 === t._a[6] && (t._nextDay = !0, t._a[3] = 0), t._d = (t._useUTC ? q : function (e, t, i, n, a, o, r) {
                    var s;
                    return e < 100 && 0 <= e ? (s = new Date(e + 400, t, i, n, a, o, r), isFinite(s.getFullYear()) && s.setFullYear(e)) : s = new Date(e, t, i, n, a, o, r), s
                }).apply(null, s), o = t._useUTC ? t._d.getUTCDay() : t._d.getDay(), null != t._tzm && t._d.setUTCMinutes(t._d.getUTCMinutes() - t._tzm), t._nextDay && (t._a[3] = 24), t._w && void 0 !== t._w.d && t._w.d !== o && (c(t).weekdayMismatch = !0)
            }
        }

        function he(e) {
            var t, i, n, a, o, r, s = e._i,
                l = Gt.exec(s) || Yt.exec(s);
            if (l) {
                for (c(e).iso = !0, t = 0, i = Vt.length; t < i; t++)
                    if (Vt[t][1].exec(l[1])) {
                        a = Vt[t][0], n = !1 !== Vt[t][2];
                        break
                    }
                if (null == a) return void (e._isValid = !1);
                if (l[3]) {
                    for (t = 0, i = $t.length; t < i; t++)
                        if ($t[t][1].exec(l[3])) {
                            o = (l[2] || " ") + $t[t][0];
                            break
                        }
                    if (null == o) return void (e._isValid = !1)
                }
                if (!n && null != o) return void (e._isValid = !1);
                if (l[4]) {
                    if (!Bt.exec(l[4])) return void (e._isValid = !1);
                    r = "Z"
                }
                e._f = a + (o || "") + (r || ""), ge(e)
            } else e._isValid = !1
        }

        function ue(e, t, i, n, a, o) {
            var r = [function (e) {
                var t = parseInt(e, 10);
                return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t
            }(e), Pt.indexOf(t), parseInt(i, 10), parseInt(n, 10), parseInt(a, 10)];
            return o && r.push(parseInt(o, 10)), r
        }

        function me(e) {
            var t, i, n, a = Ut.exec(e._i.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, ""));
            if (a) {
                var o = ue(a[4], a[3], a[2], a[5], a[6], a[7]);
                if (t = a[1], i = o, n = e, t && Wt.indexOf(t) !== new Date(i[0], i[1], i[2]).getDay() && (c(n).weekdayMismatch = !0, !(n._isValid = !1))) return;
                e._a = o, e._tzm = function (e, t, i) {
                    if (e) return jt[e];
                    if (t) return 0;
                    var n = parseInt(i, 10),
                        a = n % 100;
                    return (n - a) / 100 * 60 + a
                }(a[8], a[9], a[10]), e._d = q.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), c(e).rfc2822 = !0
            } else e._isValid = !1
        }

        function ge(t) {
            if (t._f !== e.ISO_8601)
                if (t._f !== e.RFC_2822) {
                    t._a = [], c(t).empty = !0;
                    var i, n, a, o, r, l, d, h, u = "" + t._i,
                        m = u.length,
                        g = 0;
                    for (a = W(t._f, t._locale).match(st) || [], i = 0; i < a.length; i++) o = a[i], (n = (u.match(M(o, t)) || [])[0]) && (0 < (r = u.substr(0, u.indexOf(n))).length && c(t).unusedInput.push(r), u = u.slice(u.indexOf(n) + n.length), g += n.length), ct[o] ? (n ? c(t).empty = !1 : c(t).unusedTokens.push(o), l = o, h = t, null != (d = n) && s(kt, l) && kt[l](d, h._a, h, l)) : t._strict && !n && c(t).unusedTokens.push(o);
                    c(t).charsLeftOver = m - g, 0 < u.length && c(t).unusedInput.push(u), t._a[3] <= 12 && !0 === c(t).bigHour && 0 < t._a[3] && (c(t).bigHour = void 0), c(t).parsedDateParts = t._a.slice(0), c(t).meridiem = t._meridiem, t._a[3] = function (e, t, i) {
                        var n;
                        return null == i ? t : null != e.meridiemHour ? e.meridiemHour(t, i) : (null != e.isPM && ((n = e.isPM(i)) && t < 12 && (t += 12), n || 12 !== t || (t = 0)), t)
                    }(t._locale, t._a[3], t._meridiem), ce(t), le(t)
                } else me(t);
            else he(t)
        }

        function fe(s) {
            var d, p, v, y, w = s._i,
                S = s._f;
            return s._locale = s._locale || se(s._l), null === w || void 0 === S && "" === w ? u({
                nullInput: !0
            }) : ("string" == typeof w && (s._i = w = s._locale.preparse(w)), f(w) ? new g(le(w)) : (o(w) ? s._d = w : t(S) ? function (e) {
                var t, i, n, a, o;
                if (0 === e._f.length) return c(e).invalidFormat = !0, e._d = new Date(NaN);
                for (a = 0; a < e._f.length; a++) o = 0, t = m({}, e), null != e._useUTC && (t._useUTC = e._useUTC), t._f = e._f[a], ge(t), h(t) && (o += c(t).charsLeftOver, o += 10 * c(t).unusedTokens.length, c(t).score = o, (null == n || o < n) && (n = o, i = t));
                l(e, i || t)
            }(s) : S ? ge(s) : n(p = (d = s)._i) ? d._d = new Date(e.now()) : o(p) ? d._d = new Date(p.valueOf()) : "string" == typeof p ? (v = d, null === (y = Ht.exec(v._i)) ? (he(v), !1 === v._isValid && (delete v._isValid, me(v), !1 === v._isValid && (delete v._isValid, e.createFromInputFallback(v)))) : v._d = new Date(+y[1])) : t(p) ? (d._a = r(p.slice(0), function (e) {
                return parseInt(e, 10)
            }), ce(d)) : i(p) ? function (e) {
                if (!e._d) {
                    var t = A(e._i);
                    e._a = r([t.year, t.month, t.day || t.date, t.hour, t.minute, t.second, t.millisecond], function (e) {
                        return e && parseInt(e, 10)
                    }), ce(e)
                }
            }(d) : a(p) ? d._d = new Date(p) : e.createFromInputFallback(d), h(s) || (s._d = null), s))
        }

        function pe(e, n, a, o, r) {
            var s, l = {};
            return !0 !== a && !1 !== a || (o = a, a = void 0), (i(e) && function (e) {
                if (Object.getOwnPropertyNames) return 0 === Object.getOwnPropertyNames(e).length;
                var t;
                for (t in e)
                    if (e.hasOwnProperty(t)) return !1;
                return !0
            }(e) || t(e) && 0 === e.length) && (e = void 0), l._isAMomentObject = !0, l._useUTC = l._isUTC = r, l._l = a, l._i = e, l._f = n, l._strict = o, (s = new g(le(fe(l))))._nextDay && (s.add(1, "d"), s._nextDay = void 0), s
        }

        function ve(e, t, i, n) {
            return pe(e, t, i, n, !1)
        }

        function ye(e, i) {
            var n, a;
            if (1 === i.length && t(i[0]) && (i = i[0]), !i.length) return ve();
            for (n = i[0], a = 1; a < i.length; ++a) i[a].isValid() && !i[a][e](n) || (n = i[a]);
            return n
        }

        function we(e) {
            var t = A(e),
                i = t.year || 0,
                n = t.quarter || 0,
                a = t.month || 0,
                o = t.week || t.isoWeek || 0,
                r = t.day || 0,
                s = t.hour || 0,
                l = t.minute || 0,
                d = t.second || 0,
                c = t.millisecond || 0;
            this._isValid = function (e) {
                for (var t in e)
                    if (-1 === xt.call(Kt, t) || null != e[t] && isNaN(e[t])) return !1;
                for (var i = !1, n = 0; n < Kt.length; ++n)
                    if (e[Kt[n]]) {
                        if (i) return !1;
                        parseFloat(e[Kt[n]]) !== v(e[Kt[n]]) && (i = !0)
                    }
                return !0
            }(t), this._milliseconds = +c + 1e3 * d + 6e4 * l + 1e3 * s * 60 * 60, this._days = +r + 7 * o, this._months = +a + 3 * n + 12 * i, this._data = {}, this._locale = se(), this._bubble()
        }

        function Se(e) {
            return e instanceof we
        }

        function be(e) {
            return e < 0 ? -1 * Math.round(-1 * e) : Math.round(e)
        }

        function Ce(e, t) {
            P(e, 0, 0, function () {
                var e = this.utcOffset(),
                    i = "+";
                return e < 0 && (e = -e, i = "-"), i + I(~~(e / 60), 2) + t + I(~~e % 60, 2)
            })
        }

        function De(e, t) {
            var i = (t || "").match(e);
            if (null === i) return null;
            var n = ((i[i.length - 1] || []) + "").match(/([\+\-]|\d\d)/gi) || ["-", 0, 0],
                a = 60 * n[1] + v(n[2]);
            return 0 === a ? 0 : "+" === n[0] ? a : -a
        }

        function Te(t, i) {
            var n, a;
            return i._isUTC ? (n = i.clone(), a = (f(t) || o(t) ? t.valueOf() : ve(t).valueOf()) - n.valueOf(), n._d.setTime(n._d.valueOf() + a), e.updateOffset(n, !1), n) : ve(t).local()
        }

        function ke(e) {
            return 15 * -Math.round(e._d.getTimezoneOffset() / 15)
        }

        function xe() {
            return !!this.isValid() && this._isUTC && 0 === this._offset
        }

        function Ae(e, t) {
            var i, n, o, r = e,
                l = null;
            return Se(e) ? r = {
                ms: e._milliseconds,
                d: e._days,
                M: e._months
            } : a(e) ? (r = {}, t ? r[t] = e : r.milliseconds = e) : (l = zt.exec(e)) ? (i = "-" === l[1] ? -1 : 1, r = {
                y: 0,
                d: v(l[2]) * i,
                h: v(l[3]) * i,
                m: v(l[4]) * i,
                s: v(l[5]) * i,
                ms: v(be(1e3 * l[6])) * i
            }) : (l = Xt.exec(e)) ? (i = "-" === l[1] ? -1 : 1, r = {
                y: _e(l[2], i),
                M: _e(l[3], i),
                w: _e(l[4], i),
                d: _e(l[5], i),
                h: _e(l[6], i),
                m: _e(l[7], i),
                s: _e(l[8], i)
            }) : null == r ? r = {} : "object" == typeof r && ("from" in r || "to" in r) && (o = function (e, t) {
                var i;
                return e.isValid() && t.isValid() ? (t = Te(t, e), e.isBefore(t) ? i = Ie(e, t) : ((i = Ie(t, e)).milliseconds = -i.milliseconds, i.months = -i.months), i) : {
                    milliseconds: 0,
                    months: 0
                }
            }(ve(r.from), ve(r.to)), (r = {}).ms = o.milliseconds, r.M = o.months), n = new we(r), Se(e) && s(e, "_locale") && (n._locale = e._locale), n
        }

        function _e(e, t) {
            var i = e && parseFloat(e.replace(",", "."));
            return (isNaN(i) ? 0 : i) * t
        }

        function Ie(e, t) {
            var i = {};
            return i.months = t.month() - e.month() + 12 * (t.year() - e.year()), e.clone().add(i.months, "M").isAfter(t) && --i.months, i.milliseconds = +t - +e.clone().add(i.months, "M"), i
        }

        function Pe(e, t) {
            return function (i, n) {
                var a;
                return null === n || isNaN(+n) || (b(t, "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), a = i, i = n, n = a), Ne(this, Ae(i = "string" == typeof i ? +i : i, n), e), this
            }
        }

        function Ne(t, i, n, a) {
            var o = i._milliseconds,
                r = be(i._days),
                s = be(i._months);
            t.isValid() && (a = null == a || a, s && H(t, B(t, "Month") + s * n), r && V(t, "Date", B(t, "Date") + r * n), o && t._d.setTime(t._d.valueOf() + o * n), a && e.updateOffset(t, r || s))
        }

        function We(e, t) {
            var i = 12 * (t.year() - e.year()) + (t.month() - e.month()),
                n = e.clone().add(i, "months");
            return -(i + (t - n < 0 ? (t - n) / (n - e.clone().add(i - 1, "months")) : (t - n) / (e.clone().add(i + 1, "months") - n))) || 0
        }

        function Fe(e) {
            var t;
            return void 0 === e ? this._locale._abbr : (null != (t = se(e)) && (this._locale = t), this)
        }

        function Me() {
            return this._locale
        }

        function Le(e, t) {
            return (e % t + t) % t
        }

        function Oe(e, t, i) {
            return e < 100 && 0 <= e ? new Date(e + 400, t, i) - ti : new Date(e, t, i).valueOf()
        }

        function Ee(e, t, i) {
            return e < 100 && 0 <= e ? Date.UTC(e + 400, t, i) - ti : Date.UTC(e, t, i)
        }

        function Re(e, t) {
            P(0, [e, e.length], 0, t)
        }

        function Ge(e, t, i, n, a) {
            var o;
            return null == e ? z(this, n, a).year : ((o = X(e, n, a)) < t && (t = o), function (e, t, i, n, a) {
                var o = K(e, t, i, n, a),
                    r = q(o.year, 0, o.dayOfYear);
                return this.year(r.getUTCFullYear()), this.month(r.getUTCMonth()), this.date(r.getUTCDate()), this
            }.call(this, e, t, i, n, a))
        }

        function Ye(e, t) {
            t[6] = v(1e3 * ("0." + e))
        }

        function Be(e) {
            return e
        }

        function Ve(e, t, i, n) {
            var a = se(),
                o = d().set(n, t);
            return a[i](o, e)
        }

        function $e(e, t, i) {
            if (a(e) && (t = e, e = void 0), e = e || "", null != t) return Ve(e, t, i, "month");
            var n, o = [];
            for (n = 0; n < 12; n++) o[n] = Ve(e, n, i, "month");
            return o
        }

        function He(e, t, i, n) {
            "boolean" == typeof e ? a(t) && (i = t, t = void 0) : (t = e, e = !1, a(i = t) && (i = t, t = void 0)), t = t || "";
            var o, r = se(),
                s = e ? r._week.dow : 0;
            if (null != i) return Ve(t, (i + s) % 7, n, "day");
            var l = [];
            for (o = 0; o < 7; o++) l[o] = Ve(t, (o + s) % 7, n, "day");
            return l
        }

        function Ue(e, t, i, n) {
            var a = Ae(t, i);
            return e._milliseconds += n * a._milliseconds, e._days += n * a._days, e._months += n * a._months, e._bubble()
        }

        function je(e) {
            return e < 0 ? Math.floor(e) : Math.ceil(e)
        }

        function qe(e) {
            return 4800 * e / 146097
        }

        function Je(e) {
            return 146097 * e / 4800
        }

        function Ke(e) {
            return function () {
                return this.as(e)
            }
        }

        function ze(e) {
            return function () {
                return this.isValid() ? this._data[e] : NaN
            }
        }

        function Xe(e) {
            return (0 < e) - (e < 0) || +e
        }

        function Ze() {
            if (!this.isValid()) return this.localeData().invalidDate();
            var e, t, i = _i(this._milliseconds) / 1e3,
                n = _i(this._days),
                a = _i(this._months);
            t = p((e = p(i / 60)) / 60), i %= 60, e %= 60;
            var o = p(a / 12),
                r = a %= 12,
                s = n,
                l = t,
                d = e,
                c = i ? i.toFixed(3).replace(/\.?0+$/, "") : "",
                h = this.asSeconds();
            if (!h) return "P0D";
            var u = h < 0 ? "-" : "",
                m = Xe(this._months) !== Xe(h) ? "-" : "",
                g = Xe(this._days) !== Xe(h) ? "-" : "",
                f = Xe(this._milliseconds) !== Xe(h) ? "-" : "";
            return u + "P" + (o ? m + o + "Y" : "") + (r ? m + r + "M" : "") + (s ? g + s + "D" : "") + (l || d || c ? "T" : "") + (l ? f + l + "H" : "") + (d ? f + d + "M" : "") + (c ? f + c + "S" : "")
        }
        var Qe, et;
        et = Array.prototype.some ? Array.prototype.some : function (e) {
            for (var t = Object(this), i = t.length >>> 0, n = 0; n < i; n++)
                if (n in t && e.call(this, t[n], n, t)) return !0;
            return !1
        };
        var tt, it = e.momentProperties = [],
            nt = !1,
            at = {};
        e.suppressDeprecationWarnings = !1, e.deprecationHandler = null, tt = Object.keys ? Object.keys : function (e) {
            var t, i = [];
            for (t in e) s(e, t) && i.push(t);
            return i
        };
        var ot = {},
            rt = {},
            st = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            lt = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            dt = {},
            ct = {},
            ht = /\d\d/,
            ut = /\d{3}/,
            mt = /\d{4}/,
            gt = /[+-]?\d{6}/,
            ft = /\d\d?/,
            pt = /\d\d\d\d?/,
            vt = /\d\d\d\d\d\d?/,
            yt = /\d{1,3}/,
            wt = /\d{1,4}/,
            St = /[+-]?\d{1,6}/,
            bt = /[+-]?\d+/,
            Ct = /Z|[+-]\d\d(?::?\d\d)?/gi,
            Dt = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            Tt = {},
            kt = {};
        P("Y", 0, 0, function () {
            var e = this.year();
            return e <= 9999 ? "" + e : "+" + e
        }), P(0, ["YY", 2], 0, function () {
            return this.year() % 100
        }), P(0, ["YYYY", 4], 0, "year"), P(0, ["YYYYY", 5], 0, "year"), P(0, ["YYYYYY", 6, !0], 0, "year"), k("year", "y"), _("year", 1), F("Y", bt), F("YY", ft, ht), F("YYYY", wt, mt), F("YYYYY", St, gt), F("YYYYYY", St, gt), O(["YYYYY", "YYYYYY"], 0), O("YYYY", function (t, i) {
            i[0] = 2 === t.length ? e.parseTwoDigitYear(t) : v(t)
        }), O("YY", function (t, i) {
            i[0] = e.parseTwoDigitYear(t)
        }), O("Y", function (e, t) {
            t[0] = parseInt(e, 10)
        }), e.parseTwoDigitYear = function (e) {
            return v(e) + (68 < v(e) ? 1900 : 2e3)
        };
        var xt, At = Y("FullYear", !0);
        xt = Array.prototype.indexOf ? Array.prototype.indexOf : function (e) {
            var t;
            for (t = 0; t < this.length; ++t)
                if (this[t] === e) return t;
            return -1
        }, P("M", ["MM", 2], "Mo", function () {
            return this.month() + 1
        }), P("MMM", 0, 0, function (e) {
            return this.localeData().monthsShort(this, e)
        }), P("MMMM", 0, 0, function (e) {
            return this.localeData().months(this, e)
        }), k("month", "M"), _("month", 8), F("M", ft), F("MM", ft, ht), F("MMM", function (e, t) {
            return t.monthsShortRegex(e)
        }), F("MMMM", function (e, t) {
            return t.monthsRegex(e)
        }), O(["M", "MM"], function (e, t) {
            t[1] = v(e) - 1
        }), O(["MMM", "MMMM"], function (e, t, i, n) {
            var a = i._locale.monthsParse(e, n, i._strict);
            null != a ? t[1] = a : c(i).invalidMonth = e
        });
        var _t = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            It = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            Pt = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
        P("w", ["ww", 2], "wo", "week"), P("W", ["WW", 2], "Wo", "isoWeek"), k("week", "w"), k("isoWeek", "W"), _("week", 5), _("isoWeek", 5), F("w", ft), F("ww", ft, ht), F("W", ft), F("WW", ft, ht), E(["w", "ww", "W", "WW"], function (e, t, i, n) {
            t[n.substr(0, 1)] = v(e)
        }), P("d", 0, "do", "day"), P("dd", 0, 0, function (e) {
            return this.localeData().weekdaysMin(this, e)
        }), P("ddd", 0, 0, function (e) {
            return this.localeData().weekdaysShort(this, e)
        }), P("dddd", 0, 0, function (e) {
            return this.localeData().weekdays(this, e)
        }), P("e", 0, 0, "weekday"), P("E", 0, 0, "isoWeekday"), k("day", "d"), k("weekday", "e"), k("isoWeekday", "E"), _("day", 11), _("weekday", 11), _("isoWeekday", 11), F("d", ft), F("e", ft), F("E", ft), F("dd", function (e, t) {
            return t.weekdaysMinRegex(e)
        }), F("ddd", function (e, t) {
            return t.weekdaysShortRegex(e)
        }), F("dddd", function (e, t) {
            return t.weekdaysRegex(e)
        }), E(["dd", "ddd", "dddd"], function (e, t, i, n) {
            var a = i._locale.weekdaysParse(e, n, i._strict);
            null != a ? t.d = a : c(i).invalidWeekday = e
        }), E(["d", "e", "E"], function (e, t, i, n) {
            t[n] = v(e)
        });
        var Nt = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            Wt = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            Ft = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
        P("H", ["HH", 2], 0, "hour"), P("h", ["hh", 2], 0, ee), P("k", ["kk", 2], 0, function () {
            return this.hours() || 24
        }), P("hmm", 0, 0, function () {
            return "" + ee.apply(this) + I(this.minutes(), 2)
        }), P("hmmss", 0, 0, function () {
            return "" + ee.apply(this) + I(this.minutes(), 2) + I(this.seconds(), 2)
        }), P("Hmm", 0, 0, function () {
            return "" + this.hours() + I(this.minutes(), 2)
        }), P("Hmmss", 0, 0, function () {
            return "" + this.hours() + I(this.minutes(), 2) + I(this.seconds(), 2)
        }), te("a", !0), te("A", !1), k("hour", "h"), _("hour", 13), F("a", ie), F("A", ie), F("H", ft), F("h", ft), F("k", ft), F("HH", ft, ht), F("hh", ft, ht), F("kk", ft, ht), F("hmm", pt), F("hmmss", vt), F("Hmm", pt), F("Hmmss", vt), O(["H", "HH"], 3), O(["k", "kk"], function (e, t, i) {
            var n = v(e);
            t[3] = 24 === n ? 0 : n
        }), O(["a", "A"], function (e, t, i) {
            i._isPm = i._locale.isPM(e), i._meridiem = e
        }), O(["h", "hh"], function (e, t, i) {
            t[3] = v(e), c(i).bigHour = !0
        }), O("hmm", function (e, t, i) {
            var n = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n)), c(i).bigHour = !0
        }), O("hmmss", function (e, t, i) {
            var n = e.length - 4,
                a = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n, 2)), t[5] = v(e.substr(a)), c(i).bigHour = !0
        }), O("Hmm", function (e, t, i) {
            var n = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n))
        }), O("Hmmss", function (e, t, i) {
            var n = e.length - 4,
                a = e.length - 2;
            t[3] = v(e.substr(0, n)), t[4] = v(e.substr(n, 2)), t[5] = v(e.substr(a))
        });
        var Mt, Lt = Y("Hours", !0),
            Ot = {
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                longDateFormat: {
                    LTS: "h:mm:ss A",
                    LT: "h:mm A",
                    L: "MM/DD/YYYY",
                    LL: "MMMM D, YYYY",
                    LLL: "MMMM D, YYYY h:mm A",
                    LLLL: "dddd, MMMM D, YYYY h:mm A"
                },
                invalidDate: "Invalid date",
                ordinal: "%d",
                dayOfMonthOrdinalParse: /\d{1,2}/,
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                months: It,
                monthsShort: Pt,
                week: {
                    dow: 0,
                    doy: 6
                },
                weekdays: Nt,
                weekdaysMin: Ft,
                weekdaysShort: Wt,
                meridiemParse: /[ap]\.?m?\.?/i
            },
            Et = {},
            Rt = {},
            Gt = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            Yt = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            Bt = /Z|[+-]\d\d(?::?\d\d)?/,
            Vt = [
                ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
                ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
                ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
                ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
                ["YYYY-DDD", /\d{4}-\d{3}/],
                ["YYYY-MM", /\d{4}-\d\d/, !1],
                ["YYYYYYMMDD", /[+-]\d{10}/],
                ["YYYYMMDD", /\d{8}/],
                ["GGGG[W]WWE", /\d{4}W\d{3}/],
                ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
                ["YYYYDDD", /\d{7}/]
            ],
            $t = [
                ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
                ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
                ["HH:mm:ss", /\d\d:\d\d:\d\d/],
                ["HH:mm", /\d\d:\d\d/],
                ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
                ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
                ["HHmmss", /\d\d\d\d\d\d/],
                ["HHmm", /\d\d\d\d/],
                ["HH", /\d\d/]
            ],
            Ht = /^\/?Date\((\-?\d+)/i,
            Ut = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            jt = {
                UT: 0,
                GMT: 0,
                EDT: -240,
                EST: -300,
                CDT: -300,
                CST: -360,
                MDT: -360,
                MST: -420,
                PDT: -420,
                PST: -480
            };
        e.createFromInputFallback = S("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function (e) {
            e._d = new Date(e._i + (e._useUTC ? " UTC" : ""))
        }), e.ISO_8601 = function () { }, e.RFC_2822 = function () { };
        var qt = S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
            var e = ve.apply(null, arguments);
            return this.isValid() && e.isValid() ? e < this ? this : e : u()
        }),
            Jt = S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
                var e = ve.apply(null, arguments);
                return this.isValid() && e.isValid() ? this < e ? this : e : u()
            }),
            Kt = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];
        Ce("Z", ":"), Ce("ZZ", ""), F("Z", Ct), F("ZZ", Ct), O(["Z", "ZZ"], function (e, t, i) {
            i._useUTC = !0, i._tzm = De(Ct, e)
        });
        e.updateOffset = function () { };
        var zt = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,
            Xt = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
        Ae.fn = we.prototype, Ae.invalid = function () {
            return Ae(NaN)
        };
        var Zt = Pe(1, "add"),
            Qt = Pe(-1, "subtract");
        e.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", e.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
        var ei = S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function (e) {
            return void 0 === e ? this.localeData() : this.locale(e)
        }),
            ti = 126227808e5;
        P(0, ["gg", 2], 0, function () {
            return this.weekYear() % 100
        }), P(0, ["GG", 2], 0, function () {
            return this.isoWeekYear() % 100
        }), Re("gggg", "weekYear"), Re("ggggg", "weekYear"), Re("GGGG", "isoWeekYear"), Re("GGGGG", "isoWeekYear"), k("weekYear", "gg"), k("isoWeekYear", "GG"), _("weekYear", 1), _("isoWeekYear", 1), F("G", bt), F("g", bt), F("GG", ft, ht), F("gg", ft, ht), F("GGGG", wt, mt), F("gggg", wt, mt), F("GGGGG", St, gt), F("ggggg", St, gt), E(["gggg", "ggggg", "GGGG", "GGGGG"], function (e, t, i, n) {
            t[n.substr(0, 2)] = v(e)
        }), E(["gg", "GG"], function (t, i, n, a) {
            i[a] = e.parseTwoDigitYear(t)
        }), P("Q", 0, "Qo", "quarter"), k("quarter", "Q"), _("quarter", 7), F("Q", /\d/), O("Q", function (e, t) {
            t[1] = 3 * (v(e) - 1)
        }), P("D", ["DD", 2], "Do", "date"), k("date", "D"), _("date", 9), F("D", ft), F("DD", ft, ht), F("Do", function (e, t) {
            return e ? t._dayOfMonthOrdinalParse || t._ordinalParse : t._dayOfMonthOrdinalParseLenient
        }), O(["D", "DD"], 2), O("Do", function (e, t) {
            t[2] = v(e.match(ft)[0])
        });
        var ii = Y("Date", !0);
        P("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), k("dayOfYear", "DDD"), _("dayOfYear", 4), F("DDD", yt), F("DDDD", ut), O(["DDD", "DDDD"], function (e, t, i) {
            i._dayOfYear = v(e)
        }), P("m", ["mm", 2], 0, "minute"), k("minute", "m"), _("minute", 14), F("m", ft), F("mm", ft, ht), O(["m", "mm"], 4);
        var ni = Y("Minutes", !1);
        P("s", ["ss", 2], 0, "second"), k("second", "s"), _("second", 15), F("s", ft), F("ss", ft, ht), O(["s", "ss"], 5);
        var ai, oi = Y("Seconds", !1);
        for (P("S", 0, 0, function () {
            return ~~(this.millisecond() / 100)
        }), P(0, ["SS", 2], 0, function () {
            return ~~(this.millisecond() / 10)
        }), P(0, ["SSS", 3], 0, "millisecond"), P(0, ["SSSS", 4], 0, function () {
            return 10 * this.millisecond()
        }), P(0, ["SSSSS", 5], 0, function () {
            return 100 * this.millisecond()
        }), P(0, ["SSSSSS", 6], 0, function () {
            return 1e3 * this.millisecond()
        }), P(0, ["SSSSSSS", 7], 0, function () {
            return 1e4 * this.millisecond()
        }), P(0, ["SSSSSSSS", 8], 0, function () {
            return 1e5 * this.millisecond()
        }), P(0, ["SSSSSSSSS", 9], 0, function () {
            return 1e6 * this.millisecond()
        }), k("millisecond", "ms"), _("millisecond", 16), F("S", yt, /\d/), F("SS", yt, ht), F("SSS", yt, ut), ai = "SSSS"; ai.length <= 9; ai += "S") F(ai, /\d+/);
        for (ai = "S"; ai.length <= 9; ai += "S") O(ai, Ye);
        var ri = Y("Milliseconds", !1);
        P("z", 0, 0, "zoneAbbr"), P("zz", 0, 0, "zoneName");
        var si = g.prototype;
        si.add = Zt, si.calendar = function (t, i) {
            var n = t || ve(),
                a = Te(n, this).startOf("day"),
                o = e.calendarFormat(this, a) || "sameElse",
                r = i && (C(i[o]) ? i[o].call(this, n) : i[o]);
            return this.format(r || this.localeData().calendar(o, this, ve(n)))
        }, si.clone = function () {
            return new g(this)
        }, si.diff = function (e, t, i) {
            var n, a, o;
            if (!this.isValid()) return NaN;
            if (!(n = Te(e, this)).isValid()) return NaN;
            switch (a = 6e4 * (n.utcOffset() - this.utcOffset()), t = x(t)) {
                case "year":
                    o = We(this, n) / 12;
                    break;
                case "month":
                    o = We(this, n);
                    break;
                case "quarter":
                    o = We(this, n) / 3;
                    break;
                case "second":
                    o = (this - n) / 1e3;
                    break;
                case "minute":
                    o = (this - n) / 6e4;
                    break;
                case "hour":
                    o = (this - n) / 36e5;
                    break;
                case "day":
                    o = (this - n - a) / 864e5;
                    break;
                case "week":
                    o = (this - n - a) / 6048e5;
                    break;
                default:
                    o = this - n
            }
            return i ? o : p(o)
        }, si.endOf = function (t) {
            var i;
            if (void 0 === (t = x(t)) || "millisecond" === t || !this.isValid()) return this;
            var n = this._isUTC ? Ee : Oe;
            switch (t) {
                case "year":
                    i = n(this.year() + 1, 0, 1) - 1;
                    break;
                case "quarter":
                    i = n(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                    break;
                case "month":
                    i = n(this.year(), this.month() + 1, 1) - 1;
                    break;
                case "week":
                    i = n(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                    break;
                case "isoWeek":
                    i = n(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                    break;
                case "day":
                case "date":
                    i = n(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case "hour":
                    i = this._d.valueOf(), i += 36e5 - Le(i + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5) - 1;
                    break;
                case "minute":
                    i = this._d.valueOf(), i += 6e4 - Le(i, 6e4) - 1;
                    break;
                case "second":
                    i = this._d.valueOf(), i += 1e3 - Le(i, 1e3) - 1
            }
            return this._d.setTime(i), e.updateOffset(this, !0), this
        }, si.format = function (t) {
            t || (t = this.isUtc() ? e.defaultFormatUtc : e.defaultFormat);
            var i = N(this, t);
            return this.localeData().postformat(i)
        }, si.from = function (e, t) {
            return this.isValid() && (f(e) && e.isValid() || ve(e).isValid()) ? Ae({
                to: this,
                from: e
            }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate()
        }, si.fromNow = function (e) {
            return this.from(ve(), e)
        }, si.to = function (e, t) {
            return this.isValid() && (f(e) && e.isValid() || ve(e).isValid()) ? Ae({
                from: this,
                to: e
            }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate()
        }, si.toNow = function (e) {
            return this.to(ve(), e)
        }, si.get = function (e) {
            return C(this[e = x(e)]) ? this[e]() : this
        }, si.invalidAt = function () {
            return c(this).overflow
        }, si.isAfter = function (e, t) {
            var i = f(e) ? e : ve(e);
            return !(!this.isValid() || !i.isValid()) && ("millisecond" === (t = x(t) || "millisecond") ? this.valueOf() > i.valueOf() : i.valueOf() < this.clone().startOf(t).valueOf())
        }, si.isBefore = function (e, t) {
            var i = f(e) ? e : ve(e);
            return !(!this.isValid() || !i.isValid()) && ("millisecond" === (t = x(t) || "millisecond") ? this.valueOf() < i.valueOf() : this.clone().endOf(t).valueOf() < i.valueOf())
        }, si.isBetween = function (e, t, i, n) {
            var a = f(e) ? e : ve(e),
                o = f(t) ? t : ve(t);
            return !!(this.isValid() && a.isValid() && o.isValid()) && ("(" === (n = n || "()")[0] ? this.isAfter(a, i) : !this.isBefore(a, i)) && (")" === n[1] ? this.isBefore(o, i) : !this.isAfter(o, i))
        }, si.isSame = function (e, t) {
            var i, n = f(e) ? e : ve(e);
            return !(!this.isValid() || !n.isValid()) && ("millisecond" === (t = x(t) || "millisecond") ? this.valueOf() === n.valueOf() : (i = n.valueOf(), this.clone().startOf(t).valueOf() <= i && i <= this.clone().endOf(t).valueOf()))
        }, si.isSameOrAfter = function (e, t) {
            return this.isSame(e, t) || this.isAfter(e, t)
        }, si.isSameOrBefore = function (e, t) {
            return this.isSame(e, t) || this.isBefore(e, t)
        }, si.isValid = function () {
            return h(this)
        }, si.lang = ei, si.locale = Fe, si.localeData = Me, si.max = Jt, si.min = qt, si.parsingFlags = function () {
            return l({}, c(this))
        }, si.set = function (e, t) {
            if ("object" == typeof e)
                for (var i = function (e) {
                    var t = [];
                    for (var i in e) t.push({
                        unit: i,
                        priority: rt[i]
                    });
                    return t.sort(function (e, t) {
                        return e.priority - t.priority
                    }), t
                }(e = A(e)), n = 0; n < i.length; n++) this[i[n].unit](e[i[n].unit]);
            else if (C(this[e = x(e)])) return this[e](t);
            return this
        }, si.startOf = function (t) {
            var i;
            if (void 0 === (t = x(t)) || "millisecond" === t || !this.isValid()) return this;
            var n = this._isUTC ? Ee : Oe;
            switch (t) {
                case "year":
                    i = n(this.year(), 0, 1);
                    break;
                case "quarter":
                    i = n(this.year(), this.month() - this.month() % 3, 1);
                    break;
                case "month":
                    i = n(this.year(), this.month(), 1);
                    break;
                case "week":
                    i = n(this.year(), this.month(), this.date() - this.weekday());
                    break;
                case "isoWeek":
                    i = n(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                    break;
                case "day":
                case "date":
                    i = n(this.year(), this.month(), this.date());
                    break;
                case "hour":
                    i = this._d.valueOf(), i -= Le(i + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5);
                    break;
                case "minute":
                    i = this._d.valueOf(), i -= Le(i, 6e4);
                    break;
                case "second":
                    i = this._d.valueOf(), i -= Le(i, 1e3)
            }
            return this._d.setTime(i), e.updateOffset(this, !0), this
        }, si.subtract = Qt, si.toArray = function () {
            var e = this;
            return [e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond()]
        }, si.toObject = function () {
            var e = this;
            return {
                years: e.year(),
                months: e.month(),
                date: e.date(),
                hours: e.hours(),
                minutes: e.minutes(),
                seconds: e.seconds(),
                milliseconds: e.milliseconds()
            }
        }, si.toDate = function () {
            return new Date(this.valueOf())
        }, si.toISOString = function (e) {
            if (!this.isValid()) return null;
            var t = !0 !== e,
                i = t ? this.clone().utc() : this;
            return i.year() < 0 || 9999 < i.year() ? N(i, t ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : C(Date.prototype.toISOString) ? t ? this.toDate().toISOString() : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3).toISOString().replace("Z", N(i, "Z")) : N(i, t ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ")
        }, si.inspect = function () {
            if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
            var e = "moment",
                t = "";
            this.isLocal() || (e = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", t = "Z");
            var i = "[" + e + '("]',
                n = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY",
                a = t + '[")]';
            return this.format(i + n + "-MM-DD[T]HH:mm:ss.SSS" + a)
        }, si.toJSON = function () {
            return this.isValid() ? this.toISOString() : null
        }, si.toString = function () {
            return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
        }, si.unix = function () {
            return Math.floor(this.valueOf() / 1e3)
        }, si.valueOf = function () {
            return this._d.valueOf() - 6e4 * (this._offset || 0)
        }, si.creationData = function () {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict
            }
        }, si.year = At, si.isLeapYear = function () {
            return G(this.year())
        }, si.weekYear = function (e) {
            return Ge.call(this, e, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
        }, si.isoWeekYear = function (e) {
            return Ge.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4)
        }, si.quarter = si.quarters = function (e) {
            return null == e ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e - 1) + this.month() % 3)
        }, si.month = U, si.daysInMonth = function () {
            return $(this.year(), this.month())
        }, si.week = si.weeks = function (e) {
            var t = this.localeData().week(this);
            return null == e ? t : this.add(7 * (e - t), "d")
        }, si.isoWeek = si.isoWeeks = function (e) {
            var t = z(this, 1, 4).week;
            return null == e ? t : this.add(7 * (e - t), "d")
        }, si.weeksInYear = function () {
            var e = this.localeData()._week;
            return X(this.year(), e.dow, e.doy)
        }, si.isoWeeksInYear = function () {
            return X(this.year(), 1, 4)
        }, si.date = ii, si.day = si.days = function (e) {
            if (!this.isValid()) return null != e ? this : NaN;
            var t, i, n = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            return null != e ? (t = e, i = this.localeData(), e = "string" != typeof t ? t : isNaN(t) ? "number" == typeof (t = i.weekdaysParse(t)) ? t : null : parseInt(t, 10), this.add(e - n, "d")) : n
        }, si.weekday = function (e) {
            if (!this.isValid()) return null != e ? this : NaN;
            var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return null == e ? t : this.add(e - t, "d")
        }, si.isoWeekday = function (e) {
            if (!this.isValid()) return null != e ? this : NaN;
            if (null == e) return this.day() || 7;
            var t, i, n = (t = e, i = this.localeData(), "string" == typeof t ? i.weekdaysParse(t) % 7 || 7 : isNaN(t) ? null : t);
            return this.day(this.day() % 7 ? n : n - 7)
        }, si.dayOfYear = function (e) {
            var t = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
            return null == e ? t : this.add(e - t, "d")
        }, si.hour = si.hours = Lt, si.minute = si.minutes = ni, si.second = si.seconds = oi, si.millisecond = si.milliseconds = ri, si.utcOffset = function (t, i, n) {
            var a, o = this._offset || 0;
            if (!this.isValid()) return null != t ? this : NaN;
            if (null == t) return this._isUTC ? o : ke(this);
            if ("string" == typeof t) {
                if (null === (t = De(Ct, t))) return this
            } else Math.abs(t) < 16 && !n && (t *= 60);
            return !this._isUTC && i && (a = ke(this)), this._offset = t, this._isUTC = !0, null != a && this.add(a, "m"), o !== t && (!i || this._changeInProgress ? Ne(this, Ae(t - o, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, e.updateOffset(this, !0), this._changeInProgress = null)), this
        }, si.utc = function (e) {
            return this.utcOffset(0, e)
        }, si.local = function (e) {
            return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(ke(this), "m")), this
        }, si.parseZone = function () {
            if (null != this._tzm) this.utcOffset(this._tzm, !1, !0);
            else if ("string" == typeof this._i) {
                var e = De(/Z|[+-]\d\d:?\d\d/gi, this._i);
                null != e ? this.utcOffset(e) : this.utcOffset(0, !0)
            }
            return this
        }, si.hasAlignedHourOffset = function (e) {
            return !!this.isValid() && (e = e ? ve(e).utcOffset() : 0, (this.utcOffset() - e) % 60 == 0)
        }, si.isDST = function () {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
        }, si.isLocal = function () {
            return !!this.isValid() && !this._isUTC
        }, si.isUtcOffset = function () {
            return !!this.isValid() && this._isUTC
        }, si.isUtc = xe, si.isUTC = xe, si.zoneAbbr = function () {
            return this._isUTC ? "UTC" : ""
        }, si.zoneName = function () {
            return this._isUTC ? "Coordinated Universal Time" : ""
        }, si.dates = S("dates accessor is deprecated. Use date instead.", ii), si.months = S("months accessor is deprecated. Use month instead", U), si.years = S("years accessor is deprecated. Use year instead", At), si.zone = S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", function (e, t) {
            return null != e ? ("string" != typeof e && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset()
        }), si.isDSTShifted = S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", function () {
            if (!n(this._isDSTShifted)) return this._isDSTShifted;
            var e = {};
            if (m(e, this), (e = fe(e))._a) {
                var t = e._isUTC ? d(e._a) : ve(e._a);
                this._isDSTShifted = this.isValid() && 0 < y(e._a, t.toArray())
            } else this._isDSTShifted = !1;
            return this._isDSTShifted
        });
        var li = T.prototype;
        li.calendar = function (e, t, i) {
            var n = this._calendar[e] || this._calendar.sameElse;
            return C(n) ? n.call(t, i) : n
        }, li.longDateFormat = function (e) {
            var t = this._longDateFormat[e],
                i = this._longDateFormat[e.toUpperCase()];
            return t || !i ? t : (this._longDateFormat[e] = i.replace(/MMMM|MM|DD|dddd/g, function (e) {
                return e.slice(1)
            }), this._longDateFormat[e])
        }, li.invalidDate = function () {
            return this._invalidDate
        }, li.ordinal = function (e) {
            return this._ordinal.replace("%d", e)
        }, li.preparse = Be, li.postformat = Be, li.relativeTime = function (e, t, i, n) {
            var a = this._relativeTime[i];
            return C(a) ? a(e, t, i, n) : a.replace(/%d/i, e)
        }, li.pastFuture = function (e, t) {
            var i = this._relativeTime[0 < e ? "future" : "past"];
            return C(i) ? i(t) : i.replace(/%s/i, t)
        }, li.set = function (e) {
            var t, i;
            for (i in e) C(t = e[i]) ? this[i] = t : this["_" + i] = t;
            this._config = e, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source)
        }, li.months = function (e, i) {
            return e ? t(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || _t).test(i) ? "format" : "standalone"][e.month()] : t(this._months) ? this._months : this._months.standalone
        }, li.monthsShort = function (e, i) {
            return e ? t(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[_t.test(i) ? "format" : "standalone"][e.month()] : t(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone
        }, li.monthsParse = function (e, t, i) {
            var n, a, o;
            if (this._monthsParseExact) return function (e, t, i) {
                var n, a, o, r = e.toLocaleLowerCase();
                if (!this._monthsParse)
                    for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], n = 0; n < 12; ++n) o = d([2e3, n]), this._shortMonthsParse[n] = this.monthsShort(o, "").toLocaleLowerCase(), this._longMonthsParse[n] = this.months(o, "").toLocaleLowerCase();
                return i ? "MMM" === t ? -1 !== (a = xt.call(this._shortMonthsParse, r)) ? a : null : -1 !== (a = xt.call(this._longMonthsParse, r)) ? a : null : "MMM" === t ? -1 !== (a = xt.call(this._shortMonthsParse, r)) ? a : -1 !== (a = xt.call(this._longMonthsParse, r)) ? a : null : -1 !== (a = xt.call(this._longMonthsParse, r)) ? a : -1 !== (a = xt.call(this._shortMonthsParse, r)) ? a : null
            }.call(this, e, t, i);
            for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), n = 0; n < 12; n++) {
                if (a = d([2e3, n]), i && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp("^" + this.months(a, "").replace(".", "") + "$", "i"), this._shortMonthsParse[n] = new RegExp("^" + this.monthsShort(a, "").replace(".", "") + "$", "i")), i || this._monthsParse[n] || (o = "^" + this.months(a, "") + "|^" + this.monthsShort(a, ""), this._monthsParse[n] = new RegExp(o.replace(".", ""), "i")), i && "MMMM" === t && this._longMonthsParse[n].test(e)) return n;
                if (i && "MMM" === t && this._shortMonthsParse[n].test(e)) return n;
                if (!i && this._monthsParse[n].test(e)) return n
            }
        }, li.monthsRegex = function (e) {
            return this._monthsParseExact ? (s(this, "_monthsRegex") || j.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (s(this, "_monthsRegex") || (this._monthsRegex = Dt), this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex)
        }, li.monthsShortRegex = function (e) {
            return this._monthsParseExact ? (s(this, "_monthsRegex") || j.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (s(this, "_monthsShortRegex") || (this._monthsShortRegex = Dt), this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex)
        }, li.week = function (e) {
            return z(e, this._week.dow, this._week.doy).week
        }, li.firstDayOfYear = function () {
            return this._week.doy
        }, li.firstDayOfWeek = function () {
            return this._week.dow
        }, li.weekdays = function (e, i) {
            var n = t(this._weekdays) ? this._weekdays : this._weekdays[e && !0 !== e && this._weekdays.isFormat.test(i) ? "format" : "standalone"];
            return !0 === e ? Z(n, this._week.dow) : e ? n[e.day()] : n
        }, li.weekdaysMin = function (e) {
            return !0 === e ? Z(this._weekdaysMin, this._week.dow) : e ? this._weekdaysMin[e.day()] : this._weekdaysMin
        }, li.weekdaysShort = function (e) {
            return !0 === e ? Z(this._weekdaysShort, this._week.dow) : e ? this._weekdaysShort[e.day()] : this._weekdaysShort
        }, li.weekdaysParse = function (e, t, i) {
            var n, a, o;
            if (this._weekdaysParseExact) return function (e, t, i) {
                var n, a, o, r = e.toLocaleLowerCase();
                if (!this._weekdaysParse)
                    for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], n = 0; n < 7; ++n) o = d([2e3, 1]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(o, "").toLocaleLowerCase(), this._shortWeekdaysParse[n] = this.weekdaysShort(o, "").toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(o, "").toLocaleLowerCase();
                return i ? "dddd" === t ? -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : null : "ddd" === t ? -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : null : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : null : "dddd" === t ? -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : null : "ddd" === t ? -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : null : -1 !== (a = xt.call(this._minWeekdaysParse, r)) ? a : -1 !== (a = xt.call(this._weekdaysParse, r)) ? a : -1 !== (a = xt.call(this._shortWeekdaysParse, r)) ? a : null
            }.call(this, e, t, i);
            for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [],
                this._fullWeekdaysParse = []), n = 0; n < 7; n++) {
                if (a = d([2e3, 1]).day(n), i && !this._fulWorkflowDesignerlWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp("^" + this.weekdays(a, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[n] = new RegExp("^" + this.weekdaysShort(a, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[n] = new RegExp("^" + this.weekdaysMin(a, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[n] || (o = "^" + this.weekdays(a, "") + "|^" + this.weekdaysShort(a, "") + "|^" + this.weekdaysMin(a, ""), this._weekdaysParse[n] = new RegExp(o.replace(".", ""), "i")), i && "dddd" === t && this._fullWeekdaysParse[n].test(e)) return n;
                if (i && "ddd" === t && this._shortWeekdaysParse[n].test(e)) return n;
                if (i && "dd" === t && this._minWeekdaysParse[n].test(e)) return n;
                if (!i && this._weekdaysParse[n].test(e)) return n
            }
        }, li.weekdaysRegex = function (e) {
            return this._weekdaysParseExact ? (s(this, "_weekdaysRegex") || Q.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (s(this, "_weekdaysRegex") || (this._weekdaysRegex = Dt), this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex)
        }, li.weekdaysShortRegex = function (e) {
            return this._weekdaysParseExact ? (s(this, "_weekdaysRegex") || Q.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (s(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Dt), this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex)
        }, li.weekdaysMinRegex = function (e) {
            return this._weekdaysParseExact ? (s(this, "_weekdaysRegex") || Q.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (s(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Dt), this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex)
        }, li.isPM = function (e) {
            return "p" === (e + "").toLowerCase().charAt(0)
        }, li.meridiem = function (e, t, i) {
            return 11 < e ? i ? "pm" : "PM" : i ? "am" : "AM"
        }, oe("en", {
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (e) {
                var t = e % 10;
                return e + (1 === v(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
            }
        }), e.lang = S("moment.lang is deprecated. Use moment.locale instead.", oe), e.langData = S("moment.langData is deprecated. Use moment.localeData instead.", se);
        var di = Math.abs,
            ci = Ke("ms"),
            hi = Ke("s"),
            ui = Ke("m"),
            mi = Ke("h"),
            gi = Ke("d"),
            fi = Ke("w"),
            pi = Ke("M"),
            vi = Ke("Q"),
            yi = Ke("y"),
            wi = ze("milliseconds"),
            Si = ze("seconds"),
            bi = ze("minutes"),
            Ci = ze("hours"),
            Di = ze("days"),
            Ti = ze("months"),
            ki = ze("years"),
            xi = Math.round,
            Ai = {
                ss: 44,
                s: 45,
                m: 45,
                h: 22,
                d: 26,
                M: 11
            },
            _i = Math.abs,
            Ii = we.prototype;
        return Ii.isValid = function () {
            return this._isValid
        }, Ii.abs = function () {
            var e = this._data;
            return this._milliseconds = di(this._milliseconds), this._days = di(this._days), this._months = di(this._months), e.milliseconds = di(e.milliseconds), e.seconds = di(e.seconds), e.minutes = di(e.minutes), e.hours = di(e.hours), e.months = di(e.months), e.years = di(e.years), this
        }, Ii.add = function (e, t) {
            return Ue(this, e, t, 1)
        }, Ii.subtract = function (e, t) {
            return Ue(this, e, t, -1)
        }, Ii.as = function (e) {
            if (!this.isValid()) return NaN;
            var t, i, n = this._milliseconds;
            if ("month" === (e = x(e)) || "quarter" === e || "year" === e) switch (t = this._days + n / 864e5, i = this._months + qe(t), e) {
                case "month":
                    return i;
                case "quarter":
                    return i / 3;
                case "year":
                    return i / 12
            } else switch (t = this._days + Math.round(Je(this._months)), e) {
                case "week":
                    return t / 7 + n / 6048e5;
                case "day":
                    return t + n / 864e5;
                case "hour":
                    return 24 * t + n / 36e5;
                case "minute":
                    return 1440 * t + n / 6e4;
                case "second":
                    return 86400 * t + n / 1e3;
                case "millisecond":
                    return Math.floor(864e5 * t) + n;
                default:
                    throw new Error("Unknown unit " + e)
            }
        }, Ii.asMilliseconds = ci, Ii.asSeconds = hi, Ii.asMinutes = ui, Ii.asHours = mi, Ii.asDays = gi, Ii.asWeeks = fi, Ii.asMonths = pi, Ii.asQuarters = vi, Ii.asYears = yi, Ii.valueOf = function () {
            return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * v(this._months / 12) : NaN
        }, Ii._bubble = function () {
            var e, t, i, n, a, o = this._milliseconds,
                r = this._days,
                s = this._months,
                l = this._data;
            return 0 <= o && 0 <= r && 0 <= s || o <= 0 && r <= 0 && s <= 0 || (o += 864e5 * je(Je(s) + r), s = r = 0), l.milliseconds = o % 1e3, e = p(o / 1e3), l.seconds = e % 60, t = p(e / 60), l.minutes = t % 60, i = p(t / 60), l.hours = i % 24, s += a = p(qe(r += p(i / 24))), r -= je(Je(a)), n = p(s / 12), s %= 12, l.days = r, l.months = s, l.years = n, this
        }, Ii.clone = function () {
            return Ae(this)
        }, Ii.get = function (e) {
            return e = x(e), this.isValid() ? this[e + "s"]() : NaN
        }, Ii.milliseconds = wi, Ii.seconds = Si, Ii.minutes = bi, Ii.hours = Ci, Ii.days = Di, Ii.weeks = function () {
            return p(this.days() / 7)
        }, Ii.months = Ti, Ii.years = ki, Ii.humanize = function (e) {
            if (!this.isValid()) return this.localeData().invalidDate();
            var t, i, n, a, o, r, s, l, d, c, h, u = this.localeData(),
                m = (i = !e, n = u, a = Ae(t = this).abs(), o = xi(a.as("s")), r = xi(a.as("m")), s = xi(a.as("h")), l = xi(a.as("d")), d = xi(a.as("M")), c = xi(a.as("y")), (h = o <= Ai.ss && ["s", o] || o < Ai.s && ["ss", o] || r <= 1 && ["m"] || r < Ai.m && ["mm", r] || s <= 1 && ["h"] || s < Ai.h && ["hh", s] || l <= 1 && ["d"] || l < Ai.d && ["dd", l] || d <= 1 && ["M"] || d < Ai.M && ["MM", d] || c <= 1 && ["y"] || ["yy", c])[2] = i, h[3] = 0 < +t, h[4] = n, function (e, t, i, n, a) {
                    return a.relativeTime(t || 1, !!i, e, n)
                }.apply(null, h));
            return e && (m = u.pastFuture(+this, m)), u.postformat(m)
        }, Ii.toISOString = Ze, Ii.toString = Ze, Ii.toJSON = Ze, Ii.locale = Fe, Ii.localeData = Me, Ii.toIsoString = S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", Ze), Ii.lang = ei, P("X", 0, 0, "unix"), P("x", 0, 0, "valueOf"), F("x", bt), F("X", /[+-]?\d+(\.\d{1,3})?/), O("X", function (e, t, i) {
            i._d = new Date(1e3 * parseFloat(e, 10))
        }), O("x", function (e, t, i) {
            i._d = new Date(v(e))
        }), e.version = "2.24.0", Qe = ve, e.fn = si, e.min = function () {
            return ye("isBefore", [].slice.call(arguments, 0))
        }, e.max = function () {
            return ye("isAfter", [].slice.call(arguments, 0))
        }, e.now = function () {
            return Date.now ? Date.now() : +new Date
        }, e.utc = d, e.unix = function (e) {
            return ve(1e3 * e)
        }, e.months = function (e, t) {
            return $e(e, t, "months")
        }, e.isDate = o, e.locale = oe, e.invalid = u, e.duration = Ae, e.isMoment = f, e.weekdays = function (e, t, i) {
            return He(e, t, i, "weekdays")
        }, e.parseZone = function () {
            return ve.apply(null, arguments).parseZone()
        }, e.localeData = se, e.isDuration = Se, e.monthsShort = function (e, t) {
            return $e(e, t, "monthsShort")
        }, e.weekdaysMin = function (e, t, i) {
            return He(e, t, i, "weekdaysMin")
        }, e.defineLocale = re, e.updateLocale = function (e, t) {
            if (null != t) {
                var i, n, a = Ot;
                null != (n = ae(e)) && (a = n._config), (i = new T(t = D(a, t))).parentLocale = Et[e], Et[e] = i, oe(e)
            } else null != Et[e] && (null != Et[e].parentLocale ? Et[e] = Et[e].parentLocale : null != Et[e] && delete Et[e]);
            return Et[e]
        }, e.locales = function () {
            return tt(Et)
        }, e.weekdaysShort = function (e, t, i) {
            return He(e, t, i, "weekdaysShort")
        }, e.normalizeUnits = x, e.relativeTimeRounding = function (e) {
            return void 0 === e ? xi : "function" == typeof e && (xi = e, !0)
        }, e.relativeTimeThreshold = function (e, t) {
            return void 0 !== Ai[e] && (void 0 === t ? Ai[e] : (Ai[e] = t, "s" === e && (Ai.ss = t - 1), !0))
        }, e.calendarFormat = function (e, t) {
            var i = e.diff(t, "days", !0);
            return i < -6 ? "sameElse" : i < -1 ? "lastWeek" : i < 0 ? "lastDay" : i < 1 ? "sameDay" : i < 2 ? "nextDay" : i < 7 ? "nextWeek" : "sameElse"
        }, e.prototype = si, e.HTML5_FMT = {
            DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
            DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
            DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
            DATE: "YYYY-MM-DD",
            TIME: "HH:mm",
            TIME_SECONDS: "HH:mm:ss",
            TIME_MS: "HH:mm:ss.SSS",
            WEEK: "GGGG-[W]WW",
            MONTH: "YYYY-MM"
        }, e
    });





//'use strict';
//'use strict';
///**
// * @param {boolean} View
// * @return {undefined}
// */
//function WorkflowDesigner(View) {
//    /**
//     * @return {?}
//     */
//    function run() {
//        debugger;
//        var config = {
//            actions: new Array,
//            conditions: new Array,
//            rules: new Array,
//            referenceContainers: new Array
//        };
//        var data = self.data;
//        return data.Activities.forEach(function (user) {
//            if (void 0 != user.Implementation) {
//                $.each(user.Implementation, function (n, $scope) {
//                    if (data.AdditionalParams.Actions.includes($scope.ActionName)) {
//                        return true;
//                    }
//                    /**
//                     * @param {!Object} item
//                     * @return {?}
//                     */
//                    var compare = function (item) {
//                        return "Action" === item.Type && item.Name === $scope.ActionName;
//                    };
//                    if (!$.grep(data.CodeActions, compare).length) {
//                        if (!config.actions.includes($scope.ActionName)) {
//                            config.actions.push($scope.ActionName);
//                        }
//                        if (!config.referenceContainers.includes(user.Name)) {
//                            config.referenceContainers.push(user.Name);
//                        }
//                    }
//                });
//            }
//            if (void 0 != user.PreExecutionImplementation) {
//                $.each(user.PreExecutionImplementation, function (n, $scope) {
//                    if (data.AdditionalParams.Actions.includes($scope.ActionName)) {
//                        return true;
//                    }
//                    /**
//                     * @param {!Object} item
//                     * @return {?}
//                     */
//                    var compare = function (item) {
//                        return "Action" === item.Type && item.Name === $scope.ActionName;
//                    };
//                    if (!$.grep(data.CodeActions, compare).length) {
//                        if (!config.actions.includes($scope.ActionName)) {
//                            config.actions.push($scope.ActionName);
//                        }
//                        if (!config.referenceContainers.includes(user.Name)) {
//                            config.referenceContainers.push(user.Name);
//                        }
//                    }
//                });
//            }
//        }), data.Transitions.forEach(function (params) {
//            $.each(params.Conditions, function (n, exports) {
//                if (exports.Action && "Action" === exports.Type) {
//                    if (data.AdditionalParams.Conditions.includes(exports.Action.ActionName)) {
//                        return true;
//                    }
//                    /**
//                     * @param {!Object} attr
//                     * @return {?}
//                     */
//                    var compare = function (attr) {
//                        return "Condition" === attr.Type && attr.Name === exports.Action.ActionName;
//                    };
//                    if (!$.grep(data.CodeActions, compare).length) {
//                        if (!config.conditions.includes(exports.Action.ActionName)) {
//                            config.conditions.push(exports.Action.ActionName);
//                        }
//                        if (!config.referenceContainers.includes(params.Name)) {
//                            config.referenceContainers.push(params.Name);
//                        }
//                    }
//                }
//            });
//        }), data.Actors.forEach(function (layer) {
//            if (void 0 != layer.Rule && !data.AdditionalParams.Rules.includes(layer.Rule)) {
//                /**
//                 * @param {!Object} e
//                 * @return {?}
//                 */
//                var compare = function (e) {
//                    return ("RuleCheck" === e.Type || "RuleGet" === e.Type) && e.Name === layer.Rule;
//                };
//                if (!$.grep(data.CodeActions, compare).length) {
//                    if (!config.rules.includes(layer.Rule)) {
//                        config.rules.push(layer.Rule);
//                    }
//                    if (!config.referenceContainers.includes(layer.Name)) {
//                        config.referenceContainers.push(layer.Name);
//                    }
//                }
//            }
//        }), config;
//    }
//    /**
//     * @return {undefined}
//     */
//    function init() {
//        var r = run();
//        if (r.referenceContainers.length > 0) {
//            WorkflowDesignerWindows.ConfirmDialog(WorkflowDesignerConstants.BrokenReferencesDialogText, WorkflowDesignerConstants.ButtonTextYes, function () {
//                var root = self.data;
//                return root.AdditionalParams.Actions = root.AdditionalParams.Actions.concat(r.actions), root.AdditionalParams.Conditions = root.AdditionalParams.Conditions.concat(r.conditions), root.AdditionalParams.Rules = root.AdditionalParams.Rules.concat(r.rules), true;
//            }, WorkflowDesignerConstants.ButtonTextNo, function () {
//                return true;
//            });
//        }
//    }
//    var self = this;
//    /** @type {boolean} */
//    this.Settings = View;
//    if (!window.localStorage) {
//        WorkflowDesignerCommon.defineLocalStorage();
//    }
//    if (!Array.prototype.includes) {
//        WorkflowDesignerCommon.defineArrayIncludes();
//    }
//    /**
//     * @return {?}
//     */
//    this.GetName = function () {
//        return self.Settings.name;
//    };
//    /**
//     * @param {string} string
//     * @param {number} type
//     * @return {undefined}
//     */
//    this.error = function (string, type) {
//        alert(string);
//        if (void 0 !== type && null !== type) {
//            console.log(string, type);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.refresh = function () {
//        var settings = void 0 !== this.data && void 0 !== this.data.__loadParams ? this.data.__loadParams : this.loadParams;
//        if (void 0 === settings) {
//            alert("You might use refresh method after called load method only.");
//        } else {
//            this.load(settings);
//        }
//    };
//    /**
//     * @param {string} name
//     * @return {?}
//     */
//    this.getParam = function (name) {
//        return localStorage["WorkflowDesigner_" + name];
//    };
//    /**
//     * @param {string} value
//     * @param {?} key
//     * @return {undefined}
//     */
//    this.setParam = function (value, key) {
//        /** @type {string} */
//        var id = "WorkflowDesigner_" + value;
//        localStorage[id] = key;
//    };
//    /**
//     * @param {!Object} settings
//     * @return {undefined}
//     */
//    this.load = function (settings) {
//        /** @type {!Array} */
//        var tosend_formatted = new Array;
//        /** @type {!Object} */
//        this.loadParams = settings;
//        this.schemecode = settings.schemecode;
//        this.processid = settings.processid;
//        this.schemeid = settings.schemeid;
//        if (settings.readonly) {
//            this.Settings.readonly = settings.readonly;
//        }
//        tosend_formatted.push({
//            name: "schemecode",
//            value: this.schemecode
//        });
//        tosend_formatted.push({
//            name: "processid",
//            value: this.processid
//        });
//        tosend_formatted.push({
//            name: "schemeid",
//            value: this.schemeid
//        });
//        tosend_formatted.push({
//            name: "operation",
//            value: "load"
//        });
//        $.ajax({
//            url: this.Settings.apiurl,
//            data: tosend_formatted,
//            async: true,
//            success: function (data) {
//                var err = {};
//                try {
//                    /** @type {*} */
//                    err = JSON.parse(data);
//                } catch (e) {
//                    return void self.error(data);
//                }
//                if (err.isError) {
//                    return void self.error(err.errorMessage);
//                }
//                /** @type {!Object} */
//                err.__loadParams = settings;
//                /** @type {*} */
//                self.data = err;
//                if (!(settings.processid && self.data.IsSubprocessScheme)) {
//                    init();
//                }
//                self.render();
//            },
//            error: function (string, type, s) {
//                self.error(type + " " + s);
//            }
//        });
//    };
//    /**
//     * @param {!Object} o
//     * @return {?}
//     */
//    this.exists = function (o) {
//        /** @type {!Array} */
//        var tosend_formatted = new Array;
//        this.schemecode = o.schemecode;
//        this.processid = o.processid;
//        this.schemeid = o.schemeid;
//        if (o.readonly) {
//            this.Settings.readonly = o.readonly;
//        }
//        tosend_formatted.push({
//            name: "schemecode",
//            value: this.schemecode
//        });
//        tosend_formatted.push({
//            name: "processid",
//            value: this.processid
//        });
//        tosend_formatted.push({
//            name: "schemeid",
//            value: this.schemeid
//        });
//        tosend_formatted.push({
//            name: "operation",
//            value: "exists"
//        });
//        var data = $.ajax({
//            url: this.Settings.apiurl,
//            data: tosend_formatted,
//            async: false,
//            error: function (string, type, s) {
//                self.error(type + " " + s);
//            }
//        }).responseText;
//        try {
//            return JSON.parse(data);
//        } catch (e) {
//            return self.error(data), false;
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.create = function () {
//        /** @type {!Array} */
//        var e = new Array;
//        e.push({
//            name: "operation",
//            value: "load"
//        });
//        $.ajax({
//            url: this.Settings.apiurl,
//            data: e,
//            async: true,
//            success: function (file) {
//                var error = {};
//                try {
//                    /** @type {*} */
//                    error = JSON.parse(file);
//                } catch (t) {
//                    return void self.error(file);
//                }
//                if (error.isError) {
//                    return void self.error(error.errorMessage);
//                }
//                /** @type {*} */
//                self.data = error;
//                self.render();
//            }
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this.render = function () {
//        /** @type {boolean} */
//        var fullScreen = false;
//        if (self.Graph) {
//            self.Graph.destroy();
//            if (void 0 != self.data && void 0 != self.data.__loadParams) {
//                if (void 0 != self.data.__loadParams.isFullScreen) {
//                    fullScreen = self.data.__loadParams.isFullScreen;
//                }
//                if (void 0 != self.data.__loadParams.readonly) {
//                    this.Settings.readonly = self.data.__loadParams.readonly;
//                }
//            }
//        }
//        /** @type {!Array} */
//        var copyIds = [WorkflowDesignerActivityManager, WorkflowDesignerTransitionManager, WorkflowDesignerKeyboard];
//        if (Array.isArray(self.Settings.externalComponents) && self.Settings.externalComponents.forEach(function (newId) {
//            copyIds.push(newId);
//        }), this.Settings.printable || copyIds.push(WorkflowDesignerBackground), this.Settings.notrendertoolbar || copyIds.push(WorkflowDesignerToolbar), self.Settings.printable && void 0 != self.data) {
//            /** @type {number} */
//            var borrowTimeLow = 0;
//            /** @type {number} */
//            var a = 0;
//            $(self.data.Activities).each(function (canCreateDiscussions) {
//                /** @type {number} */
//                var t = parseInt(this.DesignerSettings.X);
//                /** @type {number} */
//                var b = parseInt(this.DesignerSettings.Y);
//                if (t > borrowTimeLow) {
//                    /** @type {number} */
//                    borrowTimeLow = t;
//                }
//                if (b > a) {
//                    /** @type {number} */
//                    a = b;
//                }
//            });
//            self.Settings.graphwidth = borrowTimeLow + self.Settings.DefaultActivityWidth;
//            self.Settings.graphheight = a + self.Settings.DefaultActivityHeight;
//        }
//        self.Graph = new WorkflowGraph(this.Settings.renderTo, self, self.Settings, copyIds);
//        self.Graph.setFullScreen(fullScreen);
//        if (void 0 != self.data) {
//            WorkflowDesignerCommon.DataCorrection(self.data);
//            if (void 0 != self.data.__loadParams && void 0 != self.data.__loadParams.graphData) {
//                self.Graph.graphData = self.data.__loadParams.graphData;
//                self.Graph.graphDataIndex = self.data.__loadParams.graphDataIndex;
//            }
//            self.Graph.Draw(self.data);
//        }
//    };
//    /**
//     * @param {?} resolve
//     * @param {?} reject
//     * @return {?}
//     */
//    this.save = function (resolve, reject) {
//        if (self.Settings.readonly) {
//            return void alert(WorkflowDesignerConstants.ErrorReadOnlySaveText);
//        }
//        /** @type {!Array} */
//        var tosend_formatted = new Array;
//        tosend_formatted.push({
//            name: "schemecode",
//            value: this.schemecode
//        });
//        tosend_formatted.push({
//            name: "processid",
//            value: this.processid
//        });
//        tosend_formatted.push({
//            name: "schemeid",
//            value: this.schemeid
//        });
//        tosend_formatted.push({
//            name: "operation",
//            value: "save"
//        });
//        tosend_formatted.push({
//            name: "data",
//            value: JSON.stringify(this.data)
//        });
//        $.ajax({
//            url: this.Settings.apiurl,
//            data: tosend_formatted,
//            async: true,
//            type: "post",
//            success: function (value) {
//                var error = {};
//                try {
//                    /** @type {*} */
//                    error = JSON.parse(value);
//                } catch (e) {
//                    return void (void 0 !== reject ? reject(value) : self.error(value));
//                }
//                if (error.isError) {
//                    return void (void 0 !== reject ? reject(error.errorMessage, error.errorDetails) : self.error(error.errorMessage, error.errorDetails));
//                }
//                /** @type {*} */
//                self.data = error;
//                self.render();
//                if (resolve) {
//                    setTimeout(function () {
//                        resolve(self);
//                    }, 100);
//                }
//            }
//        });
//    };
//    /**
//     * @param {string} _enum
//     * @return {undefined}
//     */
//    this.downloadscheme = function (_enum) {
//        /** @type {!Array} */
//        var out = new Array;
//        out.push({
//            name: "operation",
//            value: "downloadscheme"
//        });
//        out.push({
//            name: "data",
//            value: JSON.stringify(this.data)
//        });
//        if (_enum && _enum.name) {
//            out.push({
//                name: "scheme",
//                value: _enum.name
//            });
//        }
//        WorkflowDesignerCommon.download(this.Settings.apiurl, out, "post");
//    };
//    /**
//     * @param {?} f
//     * @param {?} t
//     * @return {undefined}
//     */
//    this.uploadscheme = function (f, t) {
//        var callUrl = this.createurl("uploadscheme");
//        /** @type {!FormData} */
//        var formData = new FormData(f);
//        /** @type {!XMLHttpRequest} */
//        var r = new XMLHttpRequest;
//        r.open("POST", callUrl);
//        /**
//         * @return {?}
//         */
//        r.onload = function () {
//            /** @type {(Object|null|string)} */
//            var text = r.response;
//            var err = {};
//            try {
//                /** @type {*} */
//                err = JSON.parse(text);
//            } catch (t) {
//                return void self.error(text);
//            }
//            if (err.isError) {
//                return void self.error(err.errorMessage);
//            }
//            /** @type {*} */
//            self.data = err;
//            init();
//            self.render();
//            if (t) {
//                t(self);
//            }
//        };
//        r.send(formData);
//    };
//    /**
//     * @param {string} filters
//     * @return {?}
//     */
//    this.createurl = function (filters) {
//        var url = this.Settings.apiurl;
//        /** @type {string} */
//        var tools_id = "?";
//        return url.indexOf("?") >= 0 && (tools_id = "&"), url = url + (tools_id + "operation=" + filters), tools_id = "&", void 0 != this.schemeid && (url = url + (tools_id + "schemeid=" + this.schemeid)), void 0 != this.processid && (url = url + (tools_id + "processid=" + this.processid)), void 0 != this.schemecode && (url = url + (tools_id + "schemecode=" + this.schemecode)), url;
//    };
//    /**
//     * @return {?}
//     */
//    this.validate = function () {
//        if (1 != $.grep(self.data.Activities, function (canCreateDiscussions) {
//            return canCreateDiscussions.IsInitial;
//        }).length) {
//            return WorkflowDesignerConstants.ErrorActivityIsInitialCountText;
//        }
//        if (self.data.CanBeInlined) {
//            if (0 == $.grep(self.data.Activities, function (pair) {
//                return pair.IsFinal;
//            }).length) {
//                return WorkflowDesignerConstants.ErrorActivityIsFinalCountText;
//            }
//        }
//        var names = run().referenceContainers;
//        return $.each(self.data.Transitions, function (canCreateDiscussions, data) {
//            /** @type {boolean} */
//            var docker = false;
//            if ("Auto" !== data.Trigger.Type) {
//                if ("Timer" === data.Trigger.Type && !data.Trigger.Timer || "Command" === data.Trigger.Type && !data.Trigger.Command) {
//                    names.push(data.Name);
//                }
//                /** @type {boolean} */
//                docker = true;
//            }
//            if (null !== data.Restrictions && void 0 !== data.Restrictions) {
//                $.each(data.Restrictions, function (canCreateDiscussions, dockerEvent) {
//                    if (!(dockerEvent.Actor || docker)) {
//                        names.push(data.Name);
//                        /** @type {boolean} */
//                        docker = true;
//                    }
//                });
//            }
//        }), $.each(self.data.Activities, function (canCreateDiscussions, data) {
//            if (!("Inline" !== data.ActivityType || void 0 != data.SchemeCode && "" !== data.SchemeCode)) {
//                names.push(data.Name);
//            }
//        }), names.length > 0 ? WorkflowDesignerConstants.ErrorInvalidObjectsSaveText(names.join(", ")) : void 0;
//    };
//    /**
//     * @return {undefined}
//     */
//    this.destroy = function () {
//        this.schemecode = void 0;
//        this.processid = void 0;
//        this.schemeid = void 0;
//        this.data = void 0;
//        if (void 0 !== this.Graph) {
//            this.Graph.destroy();
//        }
//    };
//    /**
//     * @param {!Object} data
//     * @param {?} t
//     * @return {undefined}
//     */
//    this.compile = function (data, t) {
//        data = {
//            Name: data.Name,
//            Type: data.Type,
//            IsGlobal: data.IsGlobal,
//            IsAsync: data.IsAsync,
//            ActionCode: data.ActionCode,
//            Usings: data.Usings
//        };
//        /** @type {!Array} */
//        var tosend_formatted = new Array;
//        tosend_formatted.push({
//            name: "schemecode",
//            value: this.schemecode
//        });
//        tosend_formatted.push({
//            name: "processid",
//            value: this.processid
//        });
//        tosend_formatted.push({
//            name: "schemeid",
//            value: this.schemeid
//        });
//        tosend_formatted.push({
//            name: "operation",
//            value: "compile"
//        });
//        tosend_formatted.push({
//            name: "data",
//            value: JSON.stringify(data)
//        });
//        $.ajax({
//            url: this.Settings.apiurl,
//            data: tosend_formatted,
//            async: true,
//            type: "post",
//            success: function (e) {
//                try {
//                    /** @type {*} */
//                    e = JSON.parse(e);
//                } catch (t) {
//                    self.error(e);
//                }
//                if (t) {
//                    setTimeout(function () {
//                        t(e);
//                    }, 100);
//                }
//            }
//        });
//    };
//    /**
//     * @param {?} e
//     * @param {?} t
//     * @return {undefined}
//     */
//    this.deleteGlobalCodeAction = function (e, t) {
//        /** @type {!Array} */
//        var tosend_formatted = new Array;
//        tosend_formatted.push({
//            name: "operation",
//            value: "deleteglobalcodeaction"
//        });
//        tosend_formatted.push({
//            name: "names",
//            value: JSON.stringify(e)
//        });
//        $.ajax({
//            url: this.Settings.apiurl,
//            data: tosend_formatted,
//            async: true,
//            type: "post",
//            success: function (e) {
//                try {
//                    /** @type {*} */
//                    e = JSON.parse(e);
//                } catch (t) {
//                    self.error(e);
//                }
//                if (t) {
//                    setTimeout(function () {
//                        t(e);
//                    }, 100);
//                }
//            }
//        });
//    };
//    /**
//     * @param {?} e
//     * @param {?} t
//     * @return {undefined}
//     */
//    this.getemptytype = function (e, t) {
//        /** @type {!Array} */
//        var tosend_formatted = new Array;
//        tosend_formatted.push({
//            name: "operation",
//            value: "getemptytype"
//        });
//        tosend_formatted.push({
//            name: "data",
//            value: JSON.stringify(e)
//        });
//        $.ajax({
//            url: this.Settings.apiurl,
//            data: tosend_formatted,
//            async: true,
//            type: "post",
//            success: function (e) {
//                if (t) {
//                    setTimeout(function () {
//                        t(e);
//                    }, 100);
//                }
//            }
//        });
//    };
//    /**
//     * @param {string} reduce
//     * @param {!Object} command
//     * @return {?}
//     */
//    this.requestcodeactionparameter = function (reduce, command) {
//        /** @type {!Array} */
//        var r = new Array;
//        r.push({
//            name: "operation",
//            value: "getcodeactionparameter"
//        });
//        r.push({
//            name: "type",
//            value: reduce
//        });
//        r.push({
//            name: "name",
//            value: command
//        });
//        var mypostrequest = $.ajax({
//            url: this.Settings.apiurl,
//            data: r,
//            async: false,
//            type: "post"
//        });
//        /** @type {*} */
//        var resourceMaps = JSON.parse(mypostrequest.responseText);
//        /** @type {number} */
//        var i = 0;
//        for (; i < resourceMaps.length; i = i + 1) {
//            if (null === resourceMaps[i].Name) {
//                /** @type {string} */
//                resourceMaps[i].Name = "";
//            }
//        }
//        return resourceMaps;
//    };
//    /**
//     * @param {string} reduce
//     * @param {string} command
//     * @return {?}
//     */
//    this.requestautocompletesuggestions = function (reduce, command) {
//        /** @type {!Array} */
//        var tosend_formatted = new Array;
//        tosend_formatted.push({
//            name: "operation",
//            value: "getautocompletesuggestions"
//        });
//        tosend_formatted.push({
//            name: "category",
//            value: reduce
//        });
//        tosend_formatted.push({
//            name: "value",
//            value: command
//        });
//        var mypostrequest = $.ajax({
//            url: this.Settings.apiurl,
//            data: tosend_formatted,
//            async: false,
//            type: "post"
//        });
//        return JSON.parse(mypostrequest.responseText);
//    };
//    /**
//     * @param {?} obj
//     * @return {undefined}
//     */
//    this.readonlymode = function (obj) {
//        var self = this;
//        if (void 0 === obj || null == obj) {
//            /** @type {boolean} */
//            self.Settings.notrendertoolbar = false;
//            /** @type {boolean} */
//            self.Settings.notshowwindows = false;
//            /** @type {boolean} */
//            self.Settings.disableobjectmovements = false;
//        } else {
//            if (void 0 != obj.notrendertoolbar) {
//                self.Settings.notrendertoolbar = obj.notrendertoolbar;
//            } else {
//                /** @type {boolean} */
//                self.Settings.notrendertoolbar = false;
//            }
//            if (void 0 != obj.notshowwindows) {
//                self.Settings.notshowwindows = obj.notshowwindows;
//            } else {
//                /** @type {boolean} */
//                self.Settings.notshowwindows = false;
//            }
//            if (void 0 != obj.disableobjectmovements) {
//                self.Settings.disableobjectmovements = obj.disableobjectmovements;
//            } else {
//                /** @type {boolean} */
//                self.Settings.disableobjectmovements = false;
//            }
//        }
//        /** @type {boolean} */
//        self.Settings.readonly = true;
//        if (self.Settings.printable) {
//            self.Settings.graphheight = self.Settings.originalgraphheighth;
//            self.Settings.graphwidth = self.Settings.originalgraphwidth;
//            /** @type {boolean} */
//            self.Settings.printable = false;
//        }
//        self.render();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.printablemode = function () {
//        var self = this;
//        if (!self.Settings.printable) {
//            self.Settings.originalgraphheighth = self.Settings.graphheight;
//            self.Settings.originalgraphwidth = self.Settings.graphwidth;
//        }
//        /** @type {boolean} */
//        self.Settings.notrendertoolbar = true;
//        /** @type {boolean} */
//        self.Settings.notshowwindows = true;
//        /** @type {boolean} */
//        self.Settings.disableobjectmovements = false;
//        /** @type {boolean} */
//        self.Settings.readonly = true;
//        /** @type {boolean} */
//        self.Settings.printable = true;
//        self.render();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.editablemode = function () {
//        var self = this;
//        /** @type {boolean} */
//        self.Settings.notrendertoolbar = false;
//        /** @type {boolean} */
//        self.Settings.notshowwindows = false;
//        /** @type {boolean} */
//        self.Settings.disableobjectmovements = false;
//        /** @type {boolean} */
//        self.Settings.readonly = false;
//        if (self.Settings.printable) {
//            self.Settings.graphheight = self.Settings.originalgraphheighth;
//            self.Settings.graphwidth = self.Settings.originalgraphwidth;
//            /** @type {boolean} */
//            self.Settings.printable = false;
//        }
//        self.render();
//    };
//    if (!(void 0 === this.Settings.mode)) {
//        if ("readonly" === this.Settings.mode.toLowerCase()) {
//            this.readonlymode(View);
//        } else {
//            if ("printable" === this.Settings.mode.toLowerCase()) {
//                this.printablemode();
//            } else {
//                this.editablemode();
//            }
//        }
//    }
//    /**
//     * @return {undefined}
//     */
//    this.autoarrangement = function () {
//        var e = this.Graph.GetComponentByType("WorkflowDesignerToolbar");
//        if (void 0 != e) {
//            e.AutoArrangement();
//        }
//    };
//    /**
//     * @param {string} _enum
//     * @return {undefined}
//     */
//    this.downloadschemeBPMN = function (_enum) {
//        /** @type {!Array} */
//        var out = new Array;
//        out.push({
//            name: "operation",
//            value: "downloadschemebpmn"
//        });
//        out.push({
//            name: "data",
//            value: JSON.stringify(this.data)
//        });
//        if (_enum && _enum.name) {
//            out.push({
//                name: "scheme",
//                value: _enum.name
//            });
//        }
//        WorkflowDesignerCommon.download(this.Settings.apiurl, out, "post");
//    };
//    /**
//     * @param {!Object} form
//     * @param {?} wrap
//     * @return {undefined}
//     */
//    this.uploadschemeBPMN = function (form, wrap) {
//        var id = this.GetName() + "_uploadiframe";
//        /** @type {!Element} */
//        var iframe = document.createElement("iframe");
//        iframe.setAttribute("id", id);
//        iframe.setAttribute("name", id);
//        iframe.setAttribute("width", "0");
//        iframe.setAttribute("height", "0");
//        iframe.setAttribute("border", "0");
//        iframe.setAttribute("style", "width: 0; height: 0; border: none;");
//        form.parentNode.appendChild(iframe);
//        window.frames[id].name = id;
//        /** @type {(Element|null)} */
//        var node = document.getElementById(id);
//        /**
//         * @return {?}
//         */
//        var cb = function () {
//            if (node.detachEvent) {
//                node.detachEvent("onload", cb);
//            } else {
//                node.removeEventListener("load", cb, false);
//            }
//            if (node.contentDocument) {
//                content = node.contentDocument.body.innerText;
//            } else {
//                if (node.contentWindow) {
//                    content = node.contentWindow.document.body.innerHTML;
//                } else {
//                    if (node.document) {
//                        /** @type {string} */
//                        content = node.document.body.innerHTML;
//                    }
//                }
//            }
//            setTimeout(function () {
//                node.parentNode.removeChild(node);
//            }, 250);
//            var options = {};
//            try {
//                /** @type {*} */
//                options = JSON.parse(content);
//            } catch (e) {
//                return void self.error(content);
//            }
//            if (options.isError) {
//                return void self.error(options.errorMessage);
//            }
//            /** @type {*} */
//            self.data = options;
//            init();
//            self.render();
//            if (wrap) {
//                wrap(self);
//            }
//        };
//        if (node.addEventListener) {
//            node.addEventListener("load", cb, true);
//        }
//        if (node.attachEvent) {
//            node.attachEvent("onload", cb);
//        }
//        form.setAttribute("target", id);
//        form.setAttribute("action", this.createurl("uploadschemebpmn"));
//        form.setAttribute("method", "post");
//        form.setAttribute("enctype", "multipart/form-data");
//        form.setAttribute("encoding", "multipart/form-data");
//        form.submit();
//    };
//};
//'use strict';
///**
// * @return {undefined}
// */
//function WorkflowDesignerOverviewMap() {
//    /** @type {string} */
//    this.type = "WorkflowDesignerOverviewMap";
//    var e = this;
//    /**
//     * @param {!Object} graph
//     * @return {undefined}
//     */
//    this.init = function (graph) {
//        /** @type {!Object} */
//        this.graph = graph;
//        this.Layer = new Konva.Layer;
//        this.Layer.scale(.5);
//        this.graph.Stage.add(this.Layer);
//        this.Layer.setZIndex(1e3);
//        var zeroSizeMax = this.graph.Stage.width();
//        var headerCenterY = this.graph.Stage.height();
//        var pixelSizeTargetMax = void 0 != this.graph.Settings.overviewMapWidth ? this.graph.Settings.overviewMapWidth : WorkflowDesignerConstants.OverviewMap.width;
//        var articleAdjustedTopY = void 0 != this.graph.Settings.overviewMapHeight ? this.graph.Settings.overviewMapHeight : WorkflowDesignerConstants.OverviewMap.height;
//        e.background = new Konva.Image({
//            x: zeroSizeMax - pixelSizeTargetMax - 5,
//            y: headerCenterY - articleAdjustedTopY - 5,
//            width: pixelSizeTargetMax,
//            height: articleAdjustedTopY,
//            fill: "white",
//            shadowEnabled: true,
//            shadowBlur: 5,
//            shadowOpacity: .3
//        });
//        e.Layer.add(e.background);
//    };
//    /**
//     * @return {undefined}
//     */
//    this.draw = function () {
//        this.GraphRedrawAll();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.GraphRedrawAll = function () {
//        console.log("GraphRedrawAll");
//    };
//}
//;

//function WorkflowDesignerForm(e) {
//    this.type = "WorkflowDesignerForm", this.parameters = e, this.id = WorkflowDesignerCommon.createUUID(), this.isReadOnly = function () {
//        return this.parameters.readonly
//    }, this.showModal = function (e, t, i) {
//        var n = this;
//        n.window = $('<div tabindex="0" class="ui modal WorkflowDesignerDialog"></div>'), void 0 != WorkflowDesignerConstants.FormMaxHeight && "" != WorkflowDesignerConstants.FormMaxHeight && n.window.css("max-height", WorkflowDesignerConstants.FormMaxHeight), void 0 != this.parameters.width && "" != this.parameters.width && n.window.width(this.parameters.width), n.window.id = this.id;
//        var a = void 0;
//        switch (this.parameters.type) {
//            case "table":
//                a = this.generateTable(this.parameters);
//                break;
//            case "form":
//                a = this.generateForm(this.parameters);
//                break;
//            case "tabs":
//                a = this.generateTabs(this.parameters)
//        }
//        void 0 == a && (a = new Array), void 0 != n.parameters.top && a.unshift(n.parameters.top), void 0 != n.parameters.bottom && a.push(n.parameters.bottom), void 0 != this.parameters.renderFinalFunc && this.parameters.renderFinalFunc(a, n);
//        var o = n.getEditData(n.parameters);
//        n.ClearTempField(o), n.window.append($('<div class="header">' + this.parameters.title + '<div class="headerbuttons"> <span class="close"></span> <span class="fillscreen"></span> </div>')), n.window.append($('<div class="content scrolling"></div>').append(a));
//        var r = $('<div class="actions"></div>');
//        n.isReadOnly() ? r.append('<div class="ui secondary  cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (r.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), r.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), n.window.append(r);
//        var s = function () {
//            if (n.ClearError(), void 0 != e && !n.isReadOnly()) {
//                return !!e(n.getEditData(n.parameters), n.parameters) && (n.allowDestroy = !0, !0)
//            }
//        },
//            l = function () {
//                if (!n.isReadOnly()) {
//                    var e = n.getEditData(n.parameters);
//                    return void 0 !== i && i(e, n.parameters), n.ClearTempField(e), JSON.stringify(o) === JSON.stringify(e) ? (n.allowDestroy = !0, !0) : (WorkflowDesignerWindows.ConfirmDialog(WorkflowDesignerConstants.CloseWithoutSaving, WorkflowDesignerConstants.ButtonTextYes, function () {
//                        n.allowDestroy = !0, WorkflowDesignerCommon.modal(n.window, "hide")
//                    }, WorkflowDesignerConstants.ButtonTextNo, function () {
//                        return !0
//                    }), !1)
//                }
//                n.allowDestroy = !0
//            };
//        WorkflowDesignerCommon.modal(n.window, {
//            closable: !1,
//            onApprove: s,
//            onDeny: l,
//            allowMultiple: !0,
//            onHidden: function () {
//                n.allowDestroy && n.destroy(), n.parameters.onHidden && n.parameters.onHidden()
//            },
//            dimmerSettings: {
//                opacity: .2,
//                duration: {
//                    show: 0,
//                    hide: 0
//                }
//            },
//            transition: "fade"
//        }), WorkflowDesignerCommon.modal(n.window, "show"), WorkflowDesignerCommon.modal(n.window, "refresh"), void 0 != this.refreshFunc && this.refreshFunc(), $(".item", n.window).tab({
//            context: "parent"
//        }), $(".ui.accordion", n.window).accordion({
//            exclusive: !1
//        }), $(".close", n.window).click(function () {
//            (n.isReadOnly() || l()) && (n.allowDestroy = !0, WorkflowDesignerCommon.modal(n.window, "hide"))
//        }), $(".fillscreen", n.window).click(function () {
//            n.window.hasClass("fullscreen") ? n.window.removeClass("fullscreen") : n.window.addClass("fullscreen"), setTimeout(function () {
//                void 0 != n.refreshFunc && n.refreshFunc()
//            }, 500)
//        })
//    }, this.destroy = function () {
//        void 0 != this.destroyFunc && this.destroyFunc(), $(".WorkflowDesignerDialogautoComplete").remove(), this.window.remove()
//    }, this.InfoDialog = function (e, t, i) {
//        var n = "ui modal WorkflowDesignerConfirmDialog";
//        void 0 != i && (n += " " + i);
//        var a = $('<div tabindex="0" class="' + n + '"></div>');
//        a.append($('<div class="header">' + e + "</div>")), a.append($('<div class="content scrolling"><p>' + t + "</p></div>"));
//        var o = $('<div class="actions"></div>').append('<div tabindex="1" class="ui primary ok button">' + WorkflowDesignerConstants.EditCodeLabel.OK + "</div>");
//        a.append(o), WorkflowDesignerCommon.modal(a, {
//            allowMultiple: !0,
//            dimmerSettings: {
//                opacity: .2,
//                duration: {
//                    show: 0,
//                    hide: 0
//                }
//            },
//            transition: "fade"
//        }), WorkflowDesignerCommon.modal(a, "show")
//    }, this.getEditData = function (e) {
//        var t, i = this;
//        if ("form" === e.type || "group" === e.type) t = {}, e.elements.forEach(function (e) {
//            void 0 != e.field && (t["control_" + e.field] = e.control), "table" === e.type || "form" === e.type ? t[e.field] = i.getEditData(e) : "group" === e.type ? i.objAssign(t, i.getEditData(e)) : "scheme" === e.type || i.SetValueByPropertyName(t, e.field, i.getEasyControlValue(e))
//        });
//        else if ("table" === e.type) {
//            void 0 == t && (t = []);
//            var n = e.control;
//            if (e.elements.forEach(function (e) {
//                var a = i.getElementCode(e),
//                    o = "[name=" + a + "]",
//                    r = n.find(o);
//                if (void 0 != r)
//                    for (var s = 0; s < r.length; s++) void 0 == t[s] && (t[s] = {}), t[s]["control_" + e.field] = r[s], "table" === e.type || "form" === e.type ? t[s][e.field] = i.getEditData({
//                        type: e.type,
//                        control: $(r[s]),
//                        elements: e.elements
//                    }) : i.SetValueByPropertyName(t[s], e.field, i.getEasyControlValue({
//                        type: e.type,
//                        control: r[s]
//                    }))
//            }), e.keyproperty)
//                for (var a = n.children("tbody").children("tr"), o = 0; o < a.length; o++) void 0 == t[o] && (t[o] = {}), t[o].keyproperty = $(a[o]).attr("keyproperty")
//        }
//        return t
//    }, this.generateTabs = function (e, t) {
//        var i = this,
//            n = new Array,
//            a = $('<div class="ui top attached tabular menu" />'),
//            o = !0;
//        e.elements.forEach(function (e) {
//            var t = $('<a class="item">' + e.name + "</a>");
//            t.attr("data-tab", e.tabKey), o && (t.addClass("active"), o = !1), a.append(t)
//        }), n.push(a), o = !0;
//        var r = null;
//        return e.elements.forEach(function (e) {
//            var t = $('<div class="ui bottom attached tab segment" />');
//            switch (t.attr("data-tab", e.tabKey), o && (t.addClass("active"), o = !1), e.type) {
//                case "table":
//                    r = i.generateTable(e);
//                    break;
//                case "form":
//                    r = i.generateForm(e);
//                    break;
//                case "accordion":
//                    r = i.generateAccordion(e);
//                    break;
//                default:
//                    r = null
//            }
//            t.append(r), n.push(t)
//        }), n
//    }, this.generateAccordion = function (e, t) {
//        var i, n, a = this,
//            o = $('<div class="ui accordion" />'),
//            r = !0;
//        return $.each(e.data, function (t, s) {
//            i = $('<div class="title"><i class="dropdown icon"></i>' + t + "</div>"), r && i.addClass("active"), o.append(i), n = $('<div class="content" />'), r && (n.addClass("active"), r = !1), e.elements.forEach(function (e) {
//                switch (e.type) {
//                    case "table":
//                        e.data = s, n.append(a.generateTable(e))
//                }
//            }), o.append(n)
//        }), o
//    }, this.generateForm = function (e, t) {
//        var i = this,
//            n = "group" == e.type ? $('<div class="fields">') : $('<div class="ui form">');
//        void 0 != e.width && n.width(e.width), n.attr("name", i.getElementCode(e));
//        var a = new Array;
//        return e.elements.forEach(function (n) {
//            var o = $('<div class="field">');
//            void 0 != n.width && o.width(n.width), void 0 == t && (t = "");
//            var r = t + "_" + n.field,
//                s = void 0;
//            if (void 0 != n.name && (s = "table" === n.type ? $('<h4 class="ui dividing header"></h4>') : $("<label></label>"), s[0].innerHTML = n.name, o.append(s)), "table" === n.type) {
//                n.data || (n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field]);
//                var l = i.generateTable(n, r);
//                o.append(l)
//            } else if ("form" === n.type) {
//                n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field];
//                var l = i.generateForm(n, r);
//                o.append(l)
//            } else if ("group" === n.type) {
//                n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data;
//                var l = i.generateForm(n, r);
//                o.append(l)
//            } else if ("accordion" === n.type) {
//                n.data || (n.fieldFunc ? n.data = n.fieldFunc(e.data) : n.data = e.data[n.field]);
//                var l = i.generateAccordion(n, r);
//                o.append(l)
//            } else if ("scheme" === n.type) {
//                var d = n.group + "_group",
//                    c = $('<div id="' + d + '"></div>'),
//                    h = $(window).height() - 550;
//                h < 400 && (h = 400), c.height(h), n.control = c[0], o.append(c[0]), i.refreshFunc = function () {
//                    void 0 != i.wfdesigner && i.wfdesigner.destroy(), i.wfdesigner = new WorkflowDesigner({
//                        name: d,
//                        renderTo: d,
//                        imagefolder: i.parameters.graph.Settings.imagefolder,
//                        apiurl: i.parameters.graph.Settings.apiurl,
//                        graphwidth: c.width(),
//                        graphheight: h,
//                        readonly: !0,
//                        group: n.group,
//                        hideElementsToolbar: !0,
//                        hideLegend: !0,
//                        hideInfoBlock: !0
//                    }), i.wfdesigner.data = i.parameters.graph.data, i.wfdesigner.render()
//                }, i.destroyFunc = function () {
//                    c.remove(), void 0 != i.wfdesigner && i.wfdesigner.destroy()
//                }
//            } else {
//                var c = i.generateEasyControls(n, i.GetValueByPropertyName(e.data, n.field), r);
//                void 0 != s && (s[0].for = c[0].id), n.control = c[0], o.append(c[0])
//            }
//            a.push(o)
//        }), e.control = n, n.append(a), n
//    }, this.generateTable = function (e, t) {
//        var i = this,
//            n = $('<table class="ui form WorkflowDesignerTable"></table>');
//        n.attr("name", i.getElementCode(e));
//        var a = $("<thead></thead>"),
//            o = $("<tr></tr>");
//        if (!i.isReadOnly()) {
//            var r = $('<th class="movecol"></th>');
//            o.append(r)
//        }
//        e.elements.forEach(function (e) {
//            var t = $("<th></th>");
//            t[0].innerHTML = e.name, void 0 != e.width && (t[0].width = e.width), o.append(t)
//        }), this.isReadOnly() || o.append("<th></th>"), a.append(o), n.append(a);
//        var s = function (a) {
//            void 0 != e.beforerowadded && e.beforerowadded(a, i);
//            var o = $("<tr></tr>");
//            e.keyproperty && o.attr("keyproperty", a[e.keyproperty]), void 0 == t && (t = "");
//            var r = t + WorkflowDesignerCommon.createUUID();
//            if (!i.isReadOnly()) {
//                var s = $("<td class='movecol'><div class='btnmove'></div></td>");
//                s.attr("draggable", !0), s.bind("dragstart", function (e) {
//                    if (null !== e && void 0 !== e && null !== e.originalEvent && void 0 !== e.originalEvent && null !== e.originalEvent.dataTransfer && void 0 !== e.originalEvent.dataTransfer) try {
//                        e.originalEvent.dataTransfer.setData("text/plain", "anything")
//                    } catch (e) { }
//                    o.css("opacity", .5), n.row = o
//                }).bind("dragover", function (e) {
//                    e.preventDefault()
//                }).bind("drop", function (e) {
//                    if (e.preventDefault(), void 0 != n.row) {
//                        var t = n.find("tr");
//                        t.index(n.row[0]) > t.index(o[0]) ? n.row.insertBefore(o) : n.row.insertAfter(o), n.row.css("opacity", ""), n.row = void 0
//                    }
//                }), o.append(s)
//            }
//            if (e.elements.forEach(function (t) {
//                if ("table" === t.type) {
//                    t.fieldFunc ? t.data = t.fieldFunc(a) : t.data = a[t.field];
//                    var n = i.generateTable(t, r);
//                    o.append($("<td></td>").append(n))
//                } else {
//                    var s = i.generateEasyControls(t, i.GetValueByPropertyName(a, t.field), r, a);
//                    void 0 !== e.onrowchanged && s.change(function () {
//                        e.onrowchanged(o, i)
//                    }), o.append($("<td></td>").append(s))
//                }
//            }), !i.isReadOnly()) {
//                var l = $('<a class="btnDelete"></a>');
//                l[0].innerHTML = WorkflowDesignerConstants.ButtonTextDelete, l[0].href = "#", l.on("click", function () {
//                    return !(void 0 !== e.onrowdelete && !e.onrowdelete(o, i)) && (o.remove(), 0 == $("tr", $(n).find("tbody")).length && n.css("display", "none"), WorkflowDesignerCommon.modal(i.window, "refresh"), !1)
//                }), o.append($("<td></td>").append(l))
//            }
//            n.append(o), void 0 !== e.onrowadded && e.onrowadded(o, i)
//        };
//        void 0 != e.data && e.data.forEach(function (e) {
//            s(e)
//        }), void 0 != e.data && 0 != e.data.length || n.css("display", "none"), e.control = n;
//        var l = new Array;
//        if (l.push(n), !this.isReadOnly()) {
//            var d = $('<a class="btnAdd"></a>');
//            d[0].innerHTML = WorkflowDesignerConstants.ButtonTextCreate, d[0].href = "#", d.on("click", function () {
//                var t = {};
//                return e.datadefault && (t = e.datadefault), "none" == n.css("display") && 0 == $("tr", $(n).find("tbody")).length && n.css("display", ""), s(t), WorkflowDesignerCommon.modal(i.window, "refresh"), !1
//            }), l.push(d)
//        }
//        return l
//    }, this.generateEasyControls = function (e, t, i, n) {
//        var a = this,
//            o = null;
//        if ("input" === e.type) return new InputControl(a).generate(e, t, i);
//        if ("checkbox" === e.type) return new CheckboxControl(a).generate(e, t, i);
//        if ("select" === e.type) return new SelectControl(a).generate(e, t, i);
//        if ("textarea" === e.type) return o = $('<textarea rows="6" style="width: 100%;"></textarea>'), o[0].id = a.generateid(e.field, i), o[0].name = a.getElementCode(e), void 0 != t && (o[0].value = t), this.isReadOnly() && o.attr("readonly", !0), o;
//        if ("json" === e.type) return new JsonControl(a, e, i).generateBasicControl(t);
//        if ("jsonparameter" === e.type) return new JsonControl(a, e, i).generateParameterControl(t, n);
//        if ("code" === e.type) return a.generateCodeControl(e, t, i, n);
//        if ("transitionclassifier" === e.type) {
//            switch (o = $('<img class="table-icon" />'), t) {
//                case 0:
//                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.not-specified.png"), o.attr("alt", "NotSpecified"), o.attr("title", "NotSpecified");
//                    break;
//                case 1:
//                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.direct.png"), o.attr("alt", "Direct"), o.attr("title", "Direct");
//                    break;
//                case 2:
//                    o.attr("src", a.parameters.graph.Settings.imagefolder + "wfe.transition.reverse.png"), o.attr("alt", "Reverse"), o.attr("title", "Reverse")
//            }
//            return o
//        }
//        return "parameters" === e.type ? new ParametersControl(a).generate(e, t, i) : "defaultvalue" === e.type ? new DefaultValueControl(a, e, i).generate(t, n) : void 0
//    }, this.generateCodeControl = function (e, i, n, a) {
//        void 0 == i && (i = "");
//        var o = $('<button class="ui button basic">' + WorkflowDesignerConstants.EditCodeLabel.EditCodeButton + "</button>");
//        o[0].id = this.generateid(e.field, n), o[0].name = t.getElementCode(e), o[0].code = {}, o[0].code.code = decodeURIComponent(i);
//        var r = a.Usings;
//        r = void 0 == r ? t.parameters.graph.data.AdditionalParams.Usings.join(";") + ";" : decodeURIComponent(r), o[0].code.usings = r;
//        var s = t.isReadOnly() ? ' readonly="true"' : "",
//            l = $('<div class="ui large modal WorkflowDesignerDialogChild">');
//        l[0].id = o[0].id + "_form", l.append('<div class="header">' + WorkflowDesignerConstants.EditCodeLabel.Title + "</div>");
//        var d = $('<div class="content scrolling"></div>'),
//            c = $('<a class="ui button">' + WorkflowDesignerConstants.EditCodeLabel.ShowUsings + "</a>");
//        d.append(c);
//        var h = $('<div id="' + o[0].id + '_usings" style="padding-top: 6px;display:none"/>');
//        h.append('<textarea style="width:100%;height: 100px; max-width:inherit;" id="' + o[0].id + '_usingsedit"' + s + ">asdfasdfasd</textarea>"), d.append(h), d.append('<div id="' + o[0].id + '_function_upper" />'), d.append('<div id="' + o[0].id + '_editor" style="height:' + WorkflowDesignerConstants.EditCodeSettings.CodeHeight + 'px" ' + s + "></div>"), d.append('<div id="' + o[0].id + '_function_lower">}</div>'), c.on("click", function (e) {
//            h.is(":visible") ? (h.hide(), c[0].innerText = WorkflowDesignerConstants.EditCodeLabel.ShowUsings) : (h.show(), c[0].innerText = WorkflowDesignerConstants.EditCodeLabel.HideUsings), WorkflowDesignerCommon.modal(l, "refresh")
//        }), l.append(d);
//        var u = $('<div class="actions"></div>'),
//            m = $('<div class="ui button">' + WorkflowDesignerConstants.EditCodeLabel.Compile + "</div>");
//        return u.append(m), m.on("click", function () {
//            for (var e = t.getEditData(t.parameters), i = void 0, n = 0; n < e.length; n++)
//                if (e[n].control_ActionCode.id == o[0].id) {
//                    i = e[n];
//                    break
//                }
//            if (void 0 != i) {
//                i.ActionCode = encodeURIComponent(ace.edit(o[0].id + "_editor").getValue()), i.Usings = encodeURIComponent($("#" + o[0].id + "_usingsedit")[0].value.replace(/(\r\n|\n|\r)/gm, ""));
//                var a = function (e) {
//                    var i = e.Success ? WorkflowDesignerConstants.EditCodeLabel.Success : WorkflowDesignerConstants.EditCodeLabel.Error,
//                        n = e.Success ? WorkflowDesignerConstants.EditCodeLabel.CompileSucceeded : e.Message;
//                    return t.InfoDialog(i, n, e.Success ? "mini" : void 0), !1
//                };
//                t.parameters.graph.designer.compile(i, a)
//            }
//        }), o[0].readOnly ? u.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (u.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), u.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), l.append(u), o.on("click", function (e) {
//            WorkflowDesignerCommon.modal(l, {
//                closable: !1,
//                allowMultiple: !0,
//                onApprove: function () {
//                    o[0].code = {}, o[0].code.code = ace.edit(o[0].id + "_editor").getValue(), o[0].code.usings = $("#" + o[0].id + "_usingsedit")[0].value.replace(/(\r\n|\n|\r)/gm, "")
//                },
//                onHidden: function () {
//                    setTimeout(function () {
//                        WorkflowDesignerCommon.modal(t.window, "show")
//                    }, 10)
//                },
//                dimmerSettings: {
//                    opacity: .2,
//                    duration: {
//                        show: 0,
//                        hide: 0
//                    }
//                },
//                transition: "fade"
//            });
//            var i = ace.edit(o[0].id + "_editor");
//            $("#" + o[0].id + "_usingsedit")[0].value = t.htmlEncode(t.modifyUsingString(o[0].code.usings)), $("#" + o[0].id + "_usings").accordion({
//                collapsible: !0,
//                active: !1,
//                heightStyle: "content scrolling"
//            });
//            var a = $("#" + t.generateid("Type", n))[0].value.toLowerCase(),
//                r = $("#" + t.generateid("Name", n))[0].value,
//                s = $("#" + t.generateid("IsAsync", n))[0].checked;
//            r = "" === r ? "???" : "<b>" + r + "</b>";
//            var d = "{";
//            if ("action" === a) {
//                d = (s ? "async Task " : "void ") + r + (s ? " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter, CancellationToken token) {" : " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {")
//            }
//            if ("condition" === a) {
//                d = (s ? "async Task&lt;bool&gt; " : "bool ") + r + (s ? " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter, CancellationToken token) {" : " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {")
//            }
//            "ruleget" === a && (d = "IEnumerable&lt;string&gt; " + r + " (ProcessInstance processInstance, WorkflowRuntime runtime, string parameter) {"), "rulecheck" === a && (d = "bool " + r + " (ProcessInstance processInstance, WorkflowRuntime runtime, string identityId, string parameter) {"), $("#" + o[0].id + "_function_upper").html(d);
//            var i = ace.edit(o[0].id + "_editor");
//            i.getSession().setMode("ace/mode/csharp"), i.setValue(o[0].code.code), i.clearSelection(), t.isReadOnly() ? i.setOptions({
//                readOnly: !0
//            }) : (i.setOptions({
//                readOnly: !1
//            }), i.focus()), WorkflowDesignerCommon.modal(t.window, "hide"), WorkflowDesignerCommon.modal(l, "show")
//        }), o
//    }, this.addAutoComplete = function (e, t) {
//        if (void 0 != e.datasource) {
//            var n;
//            n = Array.isArray(e.datasource) ? function (t, n) {
//                t = t.toLowerCase();
//                var a = e.datasource,
//                    o = [];
//                for (i = 0; i < a.length; i++) ~a[i].toLowerCase().indexOf(t) && o.push(a[i]);
//                n(o)
//            } : e.datasource.bind(t);
//            var a = {
//                minChars: 0,
//                source: n
//            };
//            t.autoComplete(a)
//        }
//    }, this.modifyUsingString = function (e) {
//        return ";" === e.substring(e.length - 1) && (e = e.substring(0, e.length - 1)), e.split(";").join(";\r\n") + ";"
//    }, this.getEasyControlValue = function (e) {
//        var t = this;
//        if ("input" === e.type) return e.control.value;
//        if ("json" === e.type || "jsonparameter" === e.type) return "div" === e.control.localName ? $(e.control).find("input").val() : e.control.value;
//        if ("code" === e.type) return e.control.code;
//        if ("parameters" === e.type) return e.control.parameters;
//        if ("checkbox" === e.type) return "div" === e.control.localName ? e.indeterminable && $(e.control).checkbox("is indeterminate") ? null : e.control.children[0].checked : e.indeterminable && $(e.control).parent().checkbox("is indeterminate") ? null : e.control.checked;
//        if ("select" === e.type) return e.control.value;
//        if ("textarea" === e.type) return e.control.value;
//        if ("defaultvalue" === e.type) {
//            switch (e.control.type) {
//                case "text":
//                    return t.getEasyControlValue({
//                        type: "input",
//                        control: e.control
//                    });
//                case "checkbox":
//                    return t.getEasyControlValue({
//                        type: "checkbox",
//                        control: e.control,
//                        indeterminable: !0
//                    });
//                case "select-one":
//                    return t.getEasyControlValue({
//                        type: "select",
//                        control: e.control
//                    })
//            }
//            return null
//        }
//    }, this.generateid = function (e, t) {
//        return t ? e + "_" + t + "_" + this.id : e + "_" + this.id
//    }, this.GetValueByPropertyName = function (e, t) {
//        if (void 0 != e) {
//            if (t.indexOf(".") < 0) return e[t];
//            var i = e;
//            return t.split(".").forEach(function (e) {
//                void 0 != i && (i = i[e])
//            }), i
//        }
//    }, this.SetValueByPropertyName = function (e, t, i) {
//        if (t.indexOf(".") < 0) return e[t] = i;
//        for (var n = e, a = t.split("."), o = 0; o < a.length; o++) {
//            var r = a[o];
//            o == a.length - 1 ? n[r] = i : (void 0 == n[r] && (n[r] = {}), n = n[r])
//        }
//    }, this.ClearError = function () {
//        var e = this.window.find(".field-validation-error");
//        e.attr("title", ""),
//            e.removeClass("field-validation-error"), this.window.find(".error-message").remove()
//    }, this.ControlAddError = function (e, t) {
//        var i = $(e);
//        i.addClass("field-validation-error"), i.attr("title", t)
//    }, this.CheckRequired = function (e, t, i) {
//        var n = this,
//            a = !0;
//        return e.forEach(function (e) {
//            t.forEach(function (t) {
//                "" == n.GetValueByPropertyName(e, t) && (n.ControlAddError(e["control_" + t], i), a = !1)
//            })
//        }), a
//    }, this.CheckUnique = function (e, t, i) {
//        for (var n = this, a = !0, o = 0; o < e.length; o++)
//            for (var r = o + 1; r < e.length; r++) this._checkUniqueEquals(e[o], e[r], t) && (t.forEach(function (t) {
//                n.ControlAddError(e[o]["control_" + t], i), n.ControlAddError(e[r]["control_" + t], i)
//            }), a = !1);
//        return a
//    }, this._checkUniqueEquals = function (e, t, i) {
//        for (var n = 0; n < i.length; n++) {
//            var a = i[n];
//            if (e[a] != t[a]) return !1
//        }
//        return !0
//    };
//    var t = this;
//    this.ClearTempField = function (e, i) {
//        void 0 != e && (void 0 == i && (i = this.parameters.elements), i.forEach(function (n) {
//            $.isArray(e) ? e.forEach(function (e) {
//                t.ClearTempField(e, i)
//            }) : void 0 != e["control_" + n.field] && delete e["control_" + n.field], n.elements && (void 0 == n.field ? t.ClearTempField(e, n.elements) : t.ClearTempField(e[n.field], n.elements))
//        }))
//    }, this.getElementCode = function (e) {
//        return void 0 != e.code ? e.code : e.field
//    }, this.htmlEncode = function (e) {
//        return $("<div/>").text(e).html()
//    }, this.htmlDecode = function (e) {
//        return $("<div/>").html(e).text()
//    }, this.toCompactJSON = function (e) {
//        try {
//            return JSON.stringify(JSON.parse(e))
//        } catch (t) {
//            try {
//                return JSON5.stringify(JSON5.parse(e))
//            } catch (t) {
//                return e
//            }
//        }
//    }, this.toPrettyJSON = function (e) {
//        try {
//            return JSON.stringify(JSON.parse(e), null, "\t")
//        } catch (t) {
//            try {
//                return JSON5.stringify(JSON5.parse(e), null, "\t")
//            } catch (t) {
//                return e
//            }
//        }
//    }, this.objAssign = function (e, t) {
//        "use strict";
//        if (null == e) throw new TypeError("Cannot convert undefined or null to object");
//        for (var i = Object(e), n = 1; n < arguments.length; n++) {
//            var a = arguments[n];
//            if (null != a)
//                for (var o in a) Object.prototype.hasOwnProperty.call(a, o) && (i[o] = a[o])
//        }
//        return i
//    }
//}

//'use strict';
///**
// * @return {undefined}
// */
//function WorkflowDesignerTransitionManager() {
//    /** @type {string} */
//    this.type = "WorkflowDesignerTransitionManager";
//    /**
//     * @param {!Object} src
//     * @return {undefined}
//     */
//    this.init = function (src) {
//        var startLayer = this;
//        /** @type {!Object} */
//        this.graph = src;
//        this.Layer = new Konva.Layer;
//        this.graph.Stage.add(this.Layer);
//        this.Layer.setZIndex(2);
//        /** @type {!Object} */
//        this.graph = src;
//        this.APLayer = new Konva.Layer;
//        this.graph.Stage.add(this.APLayer);
//        this.APLayer.setZIndex(3);
//        /**
//         * @return {undefined}
//         */
//        var MyLayer = function () {
//            startLayer.APLayer.batchDraw();
//            startLayer.Layer.batchDraw();
//        };
//        this.ImageTimer = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.timer.png", MyLayer);
//        this.ImageCondition = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.condition.png", MyLayer);
//        this.ImageActor = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transtion.actor.png", MyLayer);
//        this.ImageOtherwise = WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.transition.otherwise.png", MyLayer);
//    };
//    /** @type {!Array} */
//    this.ItemControls = new Array;
//    /**
//     * @return {undefined}
//     */
//    this.draw = function () {
//        if (null != this.ItemControls) {
//            this.ItemControls.forEach(function (anAlertDialog) {
//                anAlertDialog.destroy();
//            });
//        }
//        /** @type {!Array} */
//        this.ItemControls = new Array;
//        var options = this;
//        if (void 0 != this.graph.data.Transitions) {
//            this.graph.data.Transitions.forEach(function (data) {
//                var test = options.graph.GetComponentByType("WorkflowDesignerActivityManager");
//                var key = test.find(data.From);
//                var parent = test.find(data.To);
//                /** @type {boolean} */
//                var val = false;
//                if (void 0 == key && data.From.DesignerSettings.Group != options.graph.Settings.group && (key = test.findGroup(data.From.DesignerSettings.Group, options.graph.Settings.group), val = true), void 0 == parent && data.To.DesignerSettings.Group != options.graph.Settings.group && (parent = test.findGroup(data.To.DesignerSettings.Group, options.graph.Settings.group), val = true), void 0 != key && void 0 != parent && (!val || key != parent)) {
//                    var L = new WorkflowDesignerTransitionControl({
//                        from: key,
//                        to: parent,
//                        item: data,
//                        graph: options.graph,
//                        manager: options,
//                        group: val
//                    });
//                    options.ItemControls.push(L);
//                    L.Draw();
//                }
//            });
//        }
//        this.batchDraw();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.batchDraw = function () {
//        this.CorrectItems();
//        this.Layer.batchDraw();
//        this.APLayer.batchDraw();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.CorrectItems = function () {
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.ItemControls.length; i++) {
//            var fx = this.ItemControls[i];
//            /** @type {number} */
//            var s = 0;
//            for (; s < this.ItemControls.length; s++) {
//                if (i != s) {
//                    var props = this.ItemControls[s];
//                    if (fx.start.x == props.start.x && fx.start.y == props.start.y) {
//                        props.start.x += 5;
//                    }
//                    if (fx.end.x == props.end.x && fx.end.y == props.end.y) {
//                        props.end.x += 5;
//                    }
//                    if (fx.middle.x == props.middle.x && fx.middle.y == props.middle.y) {
//                        props.middle.x += 15;
//                    }
//                }
//            }
//        }
//    };
//    /**
//     * @param {?} att
//     * @return {?}
//     */
//    this.getIntersectingActivity = function (att) {
//        return this.graph.GetComponentByType("WorkflowDesignerActivityManager").getIntersectingActivity(att);
//    };
//    /**
//     * @param {?} pt
//     * @return {undefined}
//     */
//    this.LayerSetOffset = function (pt) {
//        this.Layer.setOffset(pt);
//        this.APLayer.setOffset(pt);
//    };
//    /**
//     * @param {!Object} prop
//     * @return {undefined}
//     */
//    this.LayerScale = function (prop) {
//        var sinHalfOffset = (prop.scale, prop.delta);
//        this.Layer.setScale({
//            x: this.Layer.getScale().x + sinHalfOffset,
//            y: this.Layer.getScale().y + sinHalfOffset
//        });
//        this.APLayer.setScale({
//            x: this.APLayer.getScale().x + sinHalfOffset,
//            y: this.APLayer.getScale().y + sinHalfOffset
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this.LayerScaleNorm = function () {
//        this.Layer.setScale({
//            x: 1,
//            y: 1
//        });
//        this.Layer.setOffset({
//            x: 0,
//            y: 0
//        });
//        this.APLayer.setScale({
//            x: 1,
//            y: 1
//        });
//        this.APLayer.setOffset({
//            x: 0,
//            y: 0
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this.DeselectAll = function () {
//        this.ItemControls.forEach(function (self) {
//            self.Deselect();
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this.SelectAll = function () {
//        this.ItemControls.forEach(function (global) {
//            global.Select();
//        });
//    };
//    /**
//     * @return {?}
//     */
//    this.GetSelected = function () {
//        /** @type {!Array} */
//        var wordsList = new Array;
//        return this.ItemControls.forEach(function (t) {
//            if (t.selected) {
//                wordsList.push(t);
//            }
//        }), wordsList;
//    };
//    /**
//     * @param {?} retypeQuestion
//     * @return {undefined}
//     */
//    this.SelectByPosition = function (retypeQuestion) {
//        this.ItemControls.forEach(function (ui) {
//            if (ui.getIntersectingRect(retypeQuestion)) {
//                ui.Select();
//            }
//        });
//    };
//    /**
//     * @param {?} external
//     * @return {undefined}
//     */
//    this.SelectByItem = function (external) {
//        this.ItemControls.forEach(function (ui) {
//            if (ui.item == external) {
//                ui.Select();
//            }
//        });
//    };
//    /**
//     * @param {!Object} self
//     * @param {string} enemy
//     * @return {?}
//     */
//    this.CreateNewTransition = function (self, enemy) {
//        var options = this;
//        if (void 0 == enemy) {
//            var audioOffsetX = self.control.getX() + self.rectangle.attrs.width;
//            var languageOffsetY = self.control.getY() + self.rectangle.attrs.height / 2;
//            var a = {
//                x: audioOffsetX,
//                y: languageOffsetY
//            };
//            var c = new WorkflowDesignerTransitionManagerTempControl({
//                x: a.x,
//                y: a.y,
//                manager: this
//            });
//            c.Draw(a.x + 10, a.y);
//            this.batchDraw();
//            /**
//             * @param {!MouseEvent} event
//             * @return {undefined}
//             */
//            var render = function (event) {
//                var obj = options.graph.CorrectPossition({
//                    x: event.evt.offsetX,
//                    y: event.evt.offsetY
//                }, options.Layer);
//                c.Redraw(obj);
//                options.Layer.batchDraw();
//            };
//            /**
//             * @param {!MouseEvent} event
//             * @return {undefined}
//             */
//            var draw = function (event) {
//                var n = {
//                    x: event.evt.offsetX,
//                    y: event.evt.offsetY
//                };
//                var me = options.getIntersectingActivity(n);
//                if (void 0 != me) {
//                    options.CreateNewTransition(self, me);
//                }
//                c.Delete();
//                options.graph.Stage.off("mousemove.WorkflowDesignerTransitionManagerTempControl", render);
//                options.graph.Stage.off("mouseup.WorkflowDesignerTransitionManagerTempControl", draw);
//                options.batchDraw();
//                options.graph.StoreGraphData();
//            };
//            return this.graph.Stage.on("mousemove.WorkflowDesignerTransitionManagerTempControl", render), this.graph.Stage.on("mouseup.WorkflowDesignerTransitionManagerTempControl", draw), c;
//        }
//        var data = {
//            Name: this.GetDefaultName(self.GetName(), enemy.GetName()),
//            From: self.item,
//            To: enemy.item,
//            Trigger: {
//                Type: "Auto"
//            },
//            Conditions: [{
//                Type: "Always"
//            }],
//            AllowConcatenationType: "And",
//            RestrictConcatenationType: "And",
//            ConditionsConcatenationType: "And",
//            Classifier: "NotSpecified",
//            DesignerSettings: {}
//        };
//        var L = new WorkflowDesignerTransitionControl({
//            from: self,
//            to: enemy,
//            item: data,
//            graph: options.graph,
//            manager: options
//        });
//        return options.ItemControls.push(L), options.graph.data.Transitions.push(data), L.Draw(), L;
//    };
//    /**
//     * @param {string} bigg_id
//     * @param {string} compartment_id
//     * @return {?}
//     */
//    this.GetDefaultName = function (bigg_id, compartment_id) {
//        /** @type {string} */
//        var managementcommandsdns = bigg_id + "_" + compartment_id + "_";
//        /** @type {number} */
//        var siteName = 1;
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.graph.data.Transitions.length; i++) {
//            if (this.graph.data.Transitions[i].Name == managementcommandsdns + siteName) {
//                siteName++;
//                /** @type {number} */
//                i = -1;
//            }
//        }
//        return managementcommandsdns + siteName;
//    };
//}
//;

//'use strict';
///**
// * @param {!Object} options
// * @return {undefined}
// */
//function WorkflowDesignerActivityControl(options) {
//    var self = this;
//    this.manager = options.manager;
//    this.graph = options.graph;
//    this.x = options.x;
//    this.y = options.y;
//    this.group = options.group;
//    this.item = options.item;
//    this.control = void 0;
//    this.rectangle = void 0;
//    this.text = void 0;
//    this.createTransitionAndActivityButton = void 0;
//    this.createTransitionButton = void 0;
//    /** @type {boolean} */
//    this.selected = false;
//    /** @type {!Array} */
//    this.dependentTransitions = new Array;
//    /**
//     * @return {?}
//     */
//    this.getX = function () {
//        return this.rectangle.attrs.x + this.control.attrs.x;
//    };
//    /**
//     * @return {?}
//     */
//    this.getY = function () {
//        return this.rectangle.attrs.y + this.control.attrs.y;
//    };
//    /**
//     * @return {?}
//     */
//    this.GetName = function () {
//        return this.group && null !== this.item.FirstTimeInlineName && void 0 !== this.item.FirstTimeInlineName ? this.item.FirstTimeInlineName : this.item.Name;
//    };
//    /**
//     * @param {string} name
//     * @return {undefined}
//     */
//    this.SetName = function (name) {
//        /** @type {string} */
//        this.item.Name = name;
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Draw = function () {
//        var settings = self.graph.Settings;
//        /** @type {boolean} */
//        var draggable = !self.graph.Settings.disableobjectmovements;
//        if (void 0 == this.graph.Settings.drawElements || void 0 == this.graph.Settings.drawElements.activity || this.graph.Settings.drawElements.activity(this) === false) {
//            self.control = new Konva.Group({
//                x: options.x,
//                y: options.y,
//                rotation: 0,
//                draggable: draggable,
//                dragBoundFunc: function (pos) {
//                    /** @type {number} */
//                    var grid = (settings.DefaultMoveStep * self.manager.Layer.getScaleX(), settings.DefaultMoveStep * self.manager.Layer.getScaleY());
//                    pos = {
//                        x: Math.round(pos.x / grid) * grid,
//                        y: Math.round(pos.y / grid) * grid
//                    };
//                    if (self.selected) {
//                        var ap = this.getAbsolutePosition();
//                        self.manager.ObjectMove({
//                            sender: self,
//                            changepos: {
//                                x: pos.x - ap.x,
//                                y: pos.y - ap.y
//                            }
//                        });
//                    }
//                    return pos;
//                }
//            });
//            var traceColor = WorkflowDesignerConstants.ActivityColor;
//            var diagFill = WorkflowDesignerConstants.ActivityTextColor;
//            if (self.item.IsFinal) {
//                traceColor = WorkflowDesignerConstants.ActivityFinalColor;
//                diagFill = WorkflowDesignerConstants.ActivityFinalTextColor;
//                false;
//            }
//            if (self.item.IsInitial) {
//                traceColor = WorkflowDesignerConstants.ActivityInitialColor;
//                diagFill = WorkflowDesignerConstants.ActivityInitialTextColor;
//                false;
//            }
//            if (this.group ? self.graph.IsGroupActive(self.item.DesignerSettings.Group) : self.graph.GetCurrentActivity() == self.item.Name) {
//                traceColor = WorkflowDesignerConstants.SelectColor;
//                diagFill = WorkflowDesignerConstants.SelectTextColor;
//                false;
//            }
//            if (self.graph.isCurrentActivityForSubprocess(self.item.Name)) {
//                traceColor = WorkflowDesignerConstants.SelectSubProcessColor;
//                diagFill = WorkflowDesignerConstants.SelectSubProcessTextColor;
//                false;
//            }
//            var strokeStyle = "Inline" === this.item.ActivityType || this.group;
//            self.rectangle = new Konva.Rect({
//                x: 0,
//                y: 0,
//                width: this.graph.Settings.DefaultActivityWidth,
//                height: this.graph.Settings.DefaultActivityHeight,
//                fill: traceColor,
//                cornerRadius: 5,
//                dash: strokeStyle ? [8, 4] : void 0,
//                stroke: strokeStyle ? WorkflowDesignerConstants.ActivityShape : void 0,
//                strokeWidth: strokeStyle ? 4 : 0
//            });
//            self.control.add(self.rectangle);
//            if (!this.group) {
//                if (Array.isArray(self.item.Implementation) && self.item.Implementation.length > 0) {
//                    self.control.add(new Konva.Text({
//                        x: self.rectangle.attrs.width - 20,
//                        y: 38,
//                        text: "E",
//                        fontSize: 12,
//                        fontFamily: "Arial",
//                        fill: diagFill,
//                        fontStyle: "bold"
//                    }));
//                }
//                if (Array.isArray(self.item.PreExecutionImplementation) && self.item.PreExecutionImplementation.length > 0) {
//                    self.control.add(new Konva.Text({
//                        x: self.rectangle.attrs.width - 30,
//                        y: 38,
//                        text: "P",
//                        fontSize: 12,
//                        fontFamily: "Arial",
//                        fill: diagFill,
//                        fontStyle: "bold"
//                    }));
//                }
//            }
//            self.text = new Konva.Text({
//                x: 10,
//                y: 10,
//                text: this.GetName(),
//                fontSize: 12,
//                fontFamily: "Arial",
//                fontStyle: "bold",
//                fill: diagFill
//            });
//            if (void 0 == self.item.State) {
//                /** @type {string} */
//                self.item.State = "";
//            }
//            var el = this.group ? self.item.OriginalSchemeCode : self.item.State;
//            if (strokeStyle) {
//                self.control.add(new Konva.Text({
//                    x: self.rectangle.attrs.width - 20,
//                    y: 10,
//                    text: "I",
//                    fontSize: 12,
//                    fontFamily: "Arial",
//                    fill: diagFill,
//                    fontStyle: "bold"
//                }));
//                if (void 0 != self.item.SchemeCode) {
//                    el = self.item.SchemeCode;
//                }
//            }
//            self.stateText = new Konva.Text({
//                x: 10,
//                y: 25,
//                text: el,
//                fontSize: 12,
//                fontFamily: "Arial",
//                fill: diagFill
//            });
//            self.control.add(self.text);
//            self.control.add(self.stateText);
//            /** @type {string} */
//            var buffer = "";
//            if (1 == self.item.IsInitial) {
//                if (buffer.length > 0) {
//                    /** @type {string} */
//                    buffer = buffer + " ";
//                }
//                /** @type {string} */
//                buffer = buffer + WorkflowDesignerConstants.ActivityFormLabel.IsInitial;
//            }
//            if (1 == self.item.IsFinal) {
//                if (buffer.length > 0) {
//                    /** @type {string} */
//                    buffer = buffer + " ";
//                }
//                /** @type {string} */
//                buffer = buffer + WorkflowDesignerConstants.ActivityFormLabel.IsFinal;
//            }
//            if (1 == self.graph.getParam("exinfo")) {
//                self.createExInfo(self.control);
//                if (1 == self.item.IsForSetState) {
//                    if (buffer.length > 0) {
//                        /** @type {string} */
//                        buffer = buffer + " - ";
//                    }
//                    /** @type {string} */
//                    buffer = buffer + WorkflowDesignerConstants.ActivityFormLabel.IsForSetState;
//                }
//            }
//            if ("" != buffer) {
//                self.typeText = new Konva.Text({
//                    x: 10,
//                    y: 40,
//                    text: buffer,
//                    fontSize: 12,
//                    fontFamily: "Arial",
//                    fill: diagFill
//                });
//                self.control.add(self.typeText);
//            }
//            if (!self.graph.Settings.disableobjectmovements) {
//                this.control.on("dragend", this.Sync);
//                this.control.on("dragmove", this._onMove);
//                this.control.on("click", this._onClick);
//                this.control.on("touchend", this._onClick);
//            }
//            this.control.on("dblclick", this._onDblClick);
//            var path = self.graph.Settings.imagefolder;
//            /** @type {!Array} */
//            var payload = [];
//            if (self.graph.Settings.notshowwindows || payload.push({
//                img: path + "wfe.settings.png",
//                click: function () {
//                    self.ShowProperties();
//                }
//            }), self.graph.Settings.readonly || self.group || (payload.push({
//                img: path + "wfe.transition.png",
//                click: function () {
//                    self._onCreateTransition();
//                }
//            }), payload.push({
//                img: path + "wfe.activity.png",
//                click: function () {
//                    self._onCreateTransitionAndActivity();
//                }
//            }), payload.push({
//                img: path + "wfe.clone.png",
//                click: function () {
//                    self.manager.Clone(self);
//                }
//            }), payload.push({
//                img: path + "wfe.delete.png",
//                click: function () {
//                    self._onDelete();
//                }
//            })), payload.length > 0) {
//                var max = {
//                    x: self.rectangle.getWidth() - 30 * payload.length,
//                    y: -40
//                };
//                self.bar = WorkflowDesignerBar(self.manager.Layer, payload, max);
//                self.control.add(self.bar);
//                self.bar.hide();
//            }
//            self.manager.Layer.add(self.control);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Delete = function () {
//        this.control.destroy();
//        this.graph.data.Activities.splice(this.graph.data.Activities.indexOf(this.item), 1);
//        this.manager.ItemControls.splice(this.manager.ItemControls.indexOf(this), 1);
//        /** @type {!Array} */
//        var topics = new Array;
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.dependentTransitions.length; i++) {
//            topics.push(this.dependentTransitions[i]);
//        }
//        /** @type {number} */
//        i = 0;
//        for (; i < topics.length; i++) {
//            topics[i].Delete();
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Select = function () {
//        if (!this.selected) {
//            var Main = this;
//            this.rectangle.setStrokeWidth(4);
//            this.rectangle.setStroke(WorkflowDesignerConstants.SelectColor);
//            if (void 0 != Main.bar) {
//                Main.bar.show();
//            }
//            /** @type {boolean} */
//            this.selected = true;
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Deselect = function () {
//        if (this.selected) {
//            var isOff = "Inline" === this.item.ActivityType || this.group;
//            this.rectangle.setStrokeWidth(isOff ? 4 : 0);
//            this.rectangle.setStroke(isOff ? WorkflowDesignerConstants.ActivityShape : this.rectangle.fill());
//            if (void 0 != self.bar) {
//                self.bar.hide();
//            }
//            /** @type {boolean} */
//            this.selected = false;
//        }
//    };
//    /**
//     * @param {!Object} delta
//     * @return {undefined}
//     */
//    this.ObjectMove = function (delta) {
//        var velocity = this.control.getAbsolutePosition();
//        if (velocity.x += delta.x, velocity.y += delta.y, this.control.setAbsolutePosition(velocity), this.Sync(), !(self.dependentTransitions.length < 1)) {
//            /** @type {number} */
//            var i = 0;
//            for (; i < self.dependentTransitions.length; i++) {
//                var line = self.dependentTransitions[i];
//                line.middle = void 0;
//                line.Draw();
//            }
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this._onMove = function () {
//        if (!(self.dependentTransitions.length < 1)) {
//            /** @type {boolean} */
//            var e = false;
//            if (void 0 == self.oldpos) {
//                self.oldpos = self.control.getPosition();
//            } else {
//                var targetProvince = self.control.getPosition();
//                if (Math.abs(targetProvince.x - self.oldpos.x) > 20 || Math.abs(targetProvince.y - self.oldpos.y) > 20) {
//                    /** @type {boolean} */
//                    e = true;
//                }
//            }
//            /** @type {number} */
//            var i = 0;
//            for (; i < self.dependentTransitions.length; i++) {
//                var line = self.dependentTransitions[i];
//                if (e) {
//                    line.middle = void 0;
//                    line.item.DesignerSettings = {};
//                }
//                line.Draw();
//            }
//            self.manager.redrawTransitions();
//        }
//    };
//    /**
//     * @param {!MouseEvent} event
//     * @return {undefined}
//     */
//    this._onClick = function (event) {
//        var sel = self.selected;
//        if (!event.evt.ctrlKey) {
//            self.graph.DeselectAll();
//        }
//        if (sel) {
//            self.Deselect();
//        } else {
//            self.Select();
//        }
//        self.graph.onSelectionChanged(!sel);
//        self.manager.batchDraw();
//    };
//    /**
//     * @return {undefined}
//     */
//    this._onDblClick = function () {
//        self.graph.DeselectAll();
//        self.Select();
//        self.manager.batchDraw();
//        if (!self.graph.Settings.notshowwindows) {
//            self.ShowProperties();
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this._onDelete = function () {
//        var $ = this;
//        $.graph.confirm(WorkflowDesignerConstants.DeleteConfirmCurrent, function () {
//            $.Delete();
//            $.graph.onSelectionChanged();
//            $.graph.redrawAll();
//            $.graph.StoreGraphData();
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this._onCreateTransitionAndActivity = function () {
//        self.manager.createTransitionAndActivity(self);
//        self.graph.StoreGraphData();
//    };
//    /**
//     * @return {undefined}
//     */
//    this._onCreateTransition = function () {
//        self.manager.createTransition(self);
//    };
//    /**
//     * @param {?} control
//     * @return {undefined}
//     */
//    this.RegisterTransition = function (control) {
//        /** @type {boolean} */
//        var t = false;
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.dependentTransitions.length; i++) {
//            if (this.dependentTransitions[i].GetName() == control.GetName()) {
//                /** @type {boolean} */
//                t = true;
//                break;
//            }
//        }
//        if (!t) {
//            this.dependentTransitions.push(control);
//        }
//    };
//    /**
//     * @param {?} proxy
//     * @return {undefined}
//     */
//    this.UnregisterTransition = function (proxy) {
//        /** @type {!Array} */
//        var otherSw = new Array;
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.dependentTransitions.length; i++) {
//            if (this.dependentTransitions[i].GetName() != proxy.GetName()) {
//                otherSw.push(this.dependentTransitions[i]);
//            }
//        }
//        /** @type {!Array} */
//        this.dependentTransitions = otherSw;
//    };
//    /**
//     * @param {?} control
//     * @return {undefined}
//     */
//    this.RegisterTransition = function (control) {
//        /** @type {boolean} */
//        var t = false;
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.dependentTransitions.length; i++) {
//            if (this.dependentTransitions[i].GetName() == control.GetName()) {
//                /** @type {boolean} */
//                t = true;
//                break;
//            }
//        }
//        if (!t) {
//            this.dependentTransitions.push(control);
//        }
//    };
//    /**
//     * @param {?} proxy
//     * @return {undefined}
//     */
//    this.UnregisterTransition = function (proxy) {
//        /** @type {!Array} */
//        var otherSw = new Array;
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.dependentTransitions.length; i++) {
//            if (this.dependentTransitions[i].GetName() != proxy.GetName()) {
//                otherSw.push(this.dependentTransitions[i]);
//            }
//        }
//        /** @type {!Array} */
//        this.dependentTransitions = otherSw;
//    };
//    /**
//     * @return {?}
//     */
//    this.getRectPos = function () {
//        var coords = this.rectangle.getAbsolutePosition();
//        var xl = coords.x;
//        var yl = coords.y;
//        return {
//            xl: xl,
//            yl: yl,
//            xr: xl + this.rectangle.getWidth() * this.manager.Layer.getScaleX(),
//            yr: yl + this.rectangle.getHeight() * this.manager.Layer.getScaleY()
//        };
//    };
//    /**
//     * @param {!Object} p2
//     * @return {?}
//     */
//    this.getIntersectingActivity = function (p2) {
//        var p = this.getRectPos();
//        return p2.x >= p.xl && p2.x < p.xr && p2.y >= p.yl && p2.y < p.yr;
//    };
//    /**
//     * @param {?} p
//     * @return {?}
//     */
//    this.getIntersectingActivityRect = function (p) {
//        var pos = this.getRectPos();
//        return !(p.xl > pos.xr || p.xr < pos.xl || p.yl > pos.yr || p.yr < pos.yl);
//    };
//    /**
//     * @return {undefined}
//     */
//    this.ShowInlineProperties = function () {
//        var e = WorkflowDesignerConstants.ActivityFormLabel;
//        var datasource = self.graph.data.AdditionalParams.InlinedSchemeCodes;
//        var defaults = {
//            type: "form",
//            title: e.TitleForInline,
//            width: "800px",
//            data: this.item,
//            elements: [{
//                name: e.Name,
//                field: "Name",
//                type: "input"
//            }, {
//                name: e.Scheme,
//                field: "SchemeCode",
//                type: "select",
//                datasource: datasource,
//                width: "100%"
//            }],
//            graph: self.graph,
//            readonly: self.graph.Settings.readonly,
//            saveFunc: function (c) {
//                self.item.Name = c.Name;
//                self.item.SchemeCode = c.SchemeCode;
//                WorkflowDesignerCommon.DataCorrection(self.graph.data);
//                self.graph.Draw(self.graph.data);
//                self.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.activity) {
//            this.graph.Settings.forms.activity(defaults);
//        } else {
//            var methods = new WorkflowDesignerForm(defaults);
//            /**
//             * @param {?} o
//             * @param {!Object} key
//             * @return {?}
//             */
//            var callback = function (o, key) {
//                /** @type {boolean} */
//                var a = true;
//                return a = a & o.CheckRequired([key], ["Name", "Scheme"], WorkflowDesignerConstants.FieldIsRequired), self.graph.data.Activities.forEach(function (e) {
//                    if (e != self.item && e.Name == key.Name) {
//                        /** @type {boolean} */
//                        a = false;
//                        o.ControlAddError(key.control_Name, WorkflowDesignerConstants.FieldMustBeUnique);
//                    }
//                }), a;
//            };
//            /**
//             * @param {!Object} i
//             * @return {?}
//             */
//            var id = function (i) {
//                return !!callback(methods, i) && (methods.ClearTempField(i), methods.parameters.saveFunc(i), true);
//            };
//            methods.showModal(id);
//        }
//    };
//    /**
//     * @return {?}
//     */
//    this.ShowProperties = function () {
//        var element;
//        if (this.group) {
//            return void this.ShowGroup();
//        }
//        if ("Inline" === this.item.ActivityType) {
//            return void this.ShowInlineProperties();
//        }
//        var data = WorkflowDesignerConstants.ActivityFormLabel;
//        /** @type {!Array} */
//        var graphicOption = [{
//            name: data.ImpAction,
//            code: "impAction",
//            field: "ActionName",
//            type: "select",
//            datasource: self.graph.getActionNames(),
//            onchange: function (e) {
//                var t = $(e);
//                var jQScrollable = t.closest("tr").find("[name=impparam]").closest("td");
//                var arr = jQScrollable.children();
//                var id = arr[0].rebuild($(e).val(), arr.find("input").val());
//                arr.remove();
//                jQScrollable.append(id);
//            }
//        }, {
//            name: data.ImpActionParameter,
//            code: "impparam",
//            field: "ActionParameter",
//            type: "jsonparameter",
//            graph: self.graph,
//            parametertype: "Action",
//            openautocompleteonclick: true,
//            datasource: function (source, require) {
//                var detailsTr = $(this).closest("tr");
//                var _name = detailsTr.find("[name=impAction]")[0].value;
//                require(self.graph.getAutoCompleteSuggestions("actionparameter", _name, source));
//            }
//        }];
//        var value = {
//            type: "form",
//            title: data.Title,
//            data: this.item,
//            elements: [{
//                type: "group",
//                elements: [{
//                    name: data.Name,
//                    field: "Name",
//                    type: "input",
//                    width: "100%"
//                }, {
//                    name: data.State,
//                    field: "State",
//                    type: "input",
//                    width: "100%"
//                }]
//            }, {
//                type: "group",
//                elements: [{
//                    name: data.IsInitial,
//                    field: "IsInitial",
//                    type: "checkbox"
//                }, {
//                    name: data.IsFinal,
//                    field: "IsFinal",
//                    type: "checkbox"
//                }, {
//                    name: data.IsForSetState,
//                    field: "IsForSetState",
//                    type: "checkbox"
//                }, {
//                    name: data.IsAutoSchemeUpdate,
//                    field: "IsAutoSchemeUpdate",
//                    type: "checkbox"
//                }]
//            }, {
//                name: data.Implementation,
//                field: "Implementation",
//                type: "table",
//                elements: graphicOption
//            }, {
//                name: data.PreExecutionImplementation,
//                field: "PreExecutionImplementation",
//                type: "table",
//                elements: graphicOption
//            }, {
//                name: data.Annotations,
//                type: "table",
//                field: "Annotations",
//                keyproperty: "Name",
//                elements: [{
//                    name: data.AnnotationName,
//                    field: "Name",
//                    type: "input"
//                }, {
//                    name: data.AnnotationValue,
//                    field: "JsonValue",
//                    type: "json"
//                }]
//            }],
//            graph: self.graph,
//            readonly: self.graph.Settings.readonly,
//            saveFunc: function (c) {
//                if (Array.isArray(c.Implementation)) {
//                    /** @type {number} */
//                    var Order = 1;
//                    c.Implementation.forEach(function (module) {
//                        module.Order = Order;
//                        Order++;
//                    });
//                }
//                if (Array.isArray(c.PreExecutionImplementation)) {
//                    /** @type {number} */
//                    Order = 1;
//                    c.PreExecutionImplementation.forEach(function (module) {
//                        module.Order = Order;
//                        Order++;
//                    });
//                }
//                self.item.Name = c.Name;
//                self.item.State = c.State;
//                self.item.IsInitial = c.IsInitial;
//                self.item.IsFinal = c.IsFinal;
//                self.item.IsForSetState = c.IsForSetState;
//                self.item.IsAutoSchemeUpdate = c.IsAutoSchemeUpdate;
//                self.item.Implementation = c.Implementation;
//                self.item.PreExecutionImplementation = c.PreExecutionImplementation;
//                self.item.Annotations = c.Annotations;
//                WorkflowDesignerCommon.DataCorrection(self.graph.data);
//                self.graph.Draw(self.graph.data);
//                self.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.activity) {
//            this.graph.Settings.forms.activity(value);
//        } else {
//            element = new WorkflowDesignerForm(value);
//            /**
//             * @param {!Object} t
//             * @param {!Object} tags
//             * @return {?}
//             */
//            var create = function (t, tags) {
//                /** @type {boolean} */
//                var a = true;
//                return a = a & t.CheckRequired([tags], ["Name"], WorkflowDesignerConstants.FieldIsRequired), self.graph.data.Activities.forEach(function (track) {
//                    if (track != self.item && track.Name == tags.Name) {
//                        /** @type {boolean} */
//                        a = false;
//                        t.ControlAddError(tags.control_Name, WorkflowDesignerConstants.FieldMustBeUnique);
//                    }
//                }), t.CheckRequired(tags.Implementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired) || (a = false), t.CheckRequired(tags.PreExecutionImplementation, ["ActionName", "Order"], WorkflowDesignerConstants.FieldIsRequired) || (a = false), t.CheckRequired(tags.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) || (a = false), t.CheckUnique(tags.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique) || (a = false), tags.Annotations.forEach(function (track) {
//                    if (track != self.item && track.Name == tags.Name) {
//                        /** @type {boolean} */
//                        a = false;
//                        t.ControlAddError(tags.control_Name, WorkflowDesignerConstants.FieldMustBeUnique);
//                    }
//                }), a;
//            };
//            /**
//             * @param {!Object} t
//             * @return {?}
//             */
//            var show = function (t) {
//                return !!create(element, t) && (element.ClearTempField(t), element.parameters.saveFunc(t), true);
//            };
//            element.showModal(show);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.ShowGroup = function () {
//        (new WorkflowDesignerForm({
//            type: "form",
//            title: this.GetName(),
//            data: this.manager.graph.data,
//            elements: [{
//                type: "scheme",
//                group: this.item.DesignerSettings.Group
//            }],
//            graph: self.graph,
//            readonly: true
//        })).showModal();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Sync = function () {
//        if (self.group) {
//            if (void 0 == self.item.DesignerSettings.InlineElementSettings) {
//                self.item.DesignerSettings.InlineElementSettings = {};
//            }
//            var pos = self.control.getPosition();
//            self.item.DesignerSettings.InlineElementSettings.X = pos.x;
//            self.item.DesignerSettings.InlineElementSettings.Y = pos.y;
//        } else {
//            if (void 0 == self.item.DesignerSettings) {
//                self.item.DesignerSettings = {};
//            }
//            pos = self.control.getPosition();
//            self.item.DesignerSettings.X = pos.x;
//            self.item.DesignerSettings.Y = pos.y;
//        }
//        self.oldpos = void 0;
//    };
//    /**
//     * @param {?} controls
//     * @return {undefined}
//     */
//    this.createExInfo = function (controls) {
//        /** @type {string} */
//        var token = "";
//        if (Array.isArray(self.item.Implementation) && self.item.Implementation.length > 0) {
//            self.item.Implementation.forEach(function (results) {
//                if (token.length > 0) {
//                    token = token + ", ";
//                }
//                token = token + results.ActionName;
//            });
//        }
//        /** @type {string} */
//        var value = "";
//        if (Array.isArray(self.item.PreExecutionImplementation) && self.item.PreExecutionImplementation.length > 0 && (self.item.PreExecutionImplementation.forEach(function (width) {
//            if (value.length > 0) {
//                value = value + ", ";
//            }
//            value = value + width.ActionName;
//        }), "" == token && (token = WorkflowDesignerConstants.None)), token.length > 0) {
//            var a = new Konva.Text({
//                x: 10,
//                y: this.graph.Settings.DefaultActivityHeight + 5,
//                text: token,
//                fontFamily: "Arial",
//                fontSize: 12,
//                fill: "#4A4A4A",
//                fontStyle: "bold"
//            });
//            if (controls.add(a), value.length > 0) {
//                var $table = new Konva.Text({
//                    x: 10,
//                    y: this.graph.Settings.DefaultActivityHeight + a.getHeight() + 5,
//                    text: value,
//                    fontFamily: "Arial",
//                    fontSize: 12,
//                    fill: "#4A4A4A",
//                    fontStyle: "italic"
//                });
//                controls.add($table);
//            }
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.destroy = function () {
//        this.control.destroy();
//    };
//}
//;

//'use strict';
///**
// * @param {string} agent
// * @param {!Object} selector
// * @param {number} win
// * @param {!Array} eventTypes
// * @return {undefined}
// */
//function WorkflowGraph(agent, selector, win, eventTypes) {
//    var self = this;
//    /** @type {string} */
//    self.container = agent;
//    /** @type {!Object} */
//    self.designer = selector;
//    /** @type {!Object} */
//    self.suggestionsCache = new Object;
//    /** @type {!Object} */
//    self.parametersCache = new Object;
//    if (void 0 == win) {
//        /** @type {!Object} */
//        win = new Object;
//    }
//    if (void 0 == win.Container) {
//        /** @type {string} */
//        win.Container = "container";
//    }
//    if (void 0 == win.graphwidth) {
//        /** @type {number} */
//        win.graphwidth = 1024;
//    }
//    if (void 0 == win.graphheight) {
//        /** @type {number} */
//        win.graphheight = 768;
//    }
//    if (void 0 == win.DefaultActivityWidth) {
//        /** @type {number} */
//        win.DefaultActivityWidth = 200;
//    }
//    if (void 0 == win.DefaultActivityHeight) {
//        /** @type {number} */
//        win.DefaultActivityHeight = 60;
//    }
//    if (void 0 == win.DefaultMoveStep) {
//        /** @type {number} */
//        win.DefaultMoveStep = 10;
//    }
//    if (void 0 == win.imagefolder) {
//        /** @type {string} */
//        win.imagefolder = "/images/";
//    }
//    /** @type {number} */
//    this.Settings = win;
//    /** @type {string} */
//    this.Settings.ContainerStage = this.container + "_stage";
//    $("#" + this.container).append("<div id='" + this.Settings.ContainerStage + "' class='workflowenginecontainerstage'></div>");
//    this.Stage = new Konva.Stage({
//        container: this.Settings.ContainerStage,
//        width: parseInt(this.Settings.graphwidth),
//        height: parseInt(this.Settings.graphheight)
//    });
//    /**
//     * @param {?} name
//     * @return {?}
//     */
//    this.getParam = function (name) {
//        var s = this.designer.getParam(name);
//        return "true" === s || "false" !== s && s;
//    };
//    /**
//     * @param {?} value
//     * @param {?} key
//     * @return {undefined}
//     */
//    this.setParam = function (value, key) {
//        this.designer.setParam(value, key);
//    };
//    /** @type {!Array} */
//    this.Components = new Array;
//    /**
//     * @param {?} a
//     * @return {?}
//     */
//    this.AddComponent = function (a) {
//        var c = new a;
//        return c.init(this), self.Components.push(c), c;
//    };
//    /**
//     * @param {string} inComponentType
//     * @return {?}
//     */
//    this.GetComponentByType = function (inComponentType) {
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.Components.length; i++) {
//            if (this.Components[i].type == inComponentType) {
//                return this.Components[i];
//            }
//        }
//    };
//    /**
//     * @param {string} method
//     * @param {number} link
//     * @return {undefined}
//     */
//    this.ComponentsExecute = function (method, link) {
//        self.Components.forEach(function (doc) {
//            if (doc[method]) {
//                doc[method](link);
//            }
//        });
//    };
//    if (eventTypes) {
//        eventTypes.forEach(function (elements) {
//            self.AddComponent(elements);
//        });
//    }
//    /**
//     * @param {string} texture
//     * @return {undefined}
//     */
//    this.Draw = function (texture) {
//        /** @type {string} */
//        self.data = texture;
//        if (0 == self.graphData.length) {
//            self.StoreGraphData();
//        }
//        self.onSelectionChanged();
//        self.ComponentsExecute("draw");
//    };
//    /**
//     * @param {number} response
//     * @param {number} t
//     * @return {undefined}
//     */
//    this.GraphLayerSetOffset = function (response, t) {
//        self.ComponentsExecute("LayerSetOffset", {
//            x: response,
//            y: t
//        });
//        self.redrawAll();
//    };
//    /**
//     * @param {number} delta
//     * @param {number} msg
//     * @return {undefined}
//     */
//    this.GraphLayerScale = function (delta, msg) {
//        if (void 0 == self._bg) {
//            self._bg = self.GetComponentByType("WorkflowDesignerBackground");
//        }
//        var options = self._bg.BackgroundLayer.getScale();
//        var life = options.x + delta;
//        if (life > .3 && life < 2) {
//            self.ComponentsExecute("LayerScale", {
//                scale: options.x,
//                delta: delta
//            });
//            if (void 0 != msg) {
//                self.ComponentsExecute("setPosition", msg);
//            }
//            self.redrawAll();
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.GraphLayerScaleNorm = function () {
//        self.ComponentsExecute("LayerScaleNorm", 1);
//        self.redrawAll();
//    };
//    /**
//     * @param {?} headX
//     * @return {undefined}
//     */
//    this.GraphUpdatePosition = function (headX) {
//        if (void 0 == self._bg) {
//            self._bg = self.GetComponentByType("WorkflowDesignerBackground");
//        }
//        self._bg.updatePosition(headX);
//        self.redrawAll();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Refresh = function () {
//        self.designer.refresh();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.onFullScreenClick = function () {
//        if (void 0 !== this.data.__loadParams && this.data.__loadParams.isFullScreen) {
//            this.setFullScreen(false);
//            /** @type {boolean} */
//            this.data.__loadParams.isFullScreen = false;
//        } else {
//            this.setFullScreen(true);
//            if (void 0 === this.data.__loadParams) {
//                this.data.__loadParams = {};
//            }
//            /** @type {boolean} */
//            this.data.__loadParams.isFullScreen = true;
//        }
//        this.redrawAll();
//    };
//    /**
//     * @param {boolean} boolean
//     * @return {undefined}
//     */
//    this.setFullScreen = function (boolean) {
//        var div = $("#" + this.container);
//        if (void 0 == this._toolbar) {
//            this._toolbar = this.GetComponentByType("WorkflowDesignerToolbar");
//        }
//        var _this2 = this._toolbar;
//        if (boolean) {
//            this.originalContainerStyle = div.attr("style");
//            if (void 0 == this.originalContainerStyle) {
//                /** @type {string} */
//                this.originalContainerStyle = "";
//            }
//            this.originalWidth = this.Stage.width();
//            this.originalHeight = this.Stage.height();
//            /** @type {number} */
//            var width = $(window).width() - 2;
//            /** @type {number} */
//            var height = $(window).height() - 2;
//            this.Stage.hide();
//            this.Stage.width(width);
//            this.Stage.height(height);
//            if (void 0 != _this2) {
//                _this2.setItemActive("fullscreen", true);
//                _this2.changeSize(width, height);
//            }
//            div.css({
//                position: "absolute",
//                top: 0,
//                left: 0,
//                width: width,
//                height: height,
//                "z-index": 1e3,
//                background: "white"
//            });
//            this.Stage.show();
//        } else {
//            if (void 0 != this.originalContainerStyle && void 0 != this.originalWidth && void 0 != this.originalHeight) {
//                this.Stage.hide();
//                div.attr("style", this.originalContainerStyle);
//                this.Stage.width(this.originalWidth);
//                this.Stage.height(this.originalHeight);
//                if (void 0 != _this2) {
//                    _this2.setItemActive("fullscreen", false);
//                    _this2.changeSize(this.originalWidth, this.originalHeight);
//                }
//                this.Stage.show();
//            }
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.DeselectAll = function () {
//        self.ComponentsExecute("DeselectAll");
//        self.onSelectionChanged(false);
//        self.redrawAll();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.SelectAll = function () {
//        self.ComponentsExecute("SelectAll");
//        self.onSelectionChanged(false);
//        self.redrawAll();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.redrawAll = function () {
//        if (void 0 == this._toolbal) {
//            this._toolbal = self.GetComponentByType("WorkflowDesignerToolbar");
//        }
//        if (void 0 != this._toolbal) {
//            this._toolbal.draw();
//        }
//        self.Stage.batchDraw();
//    };
//    /**
//     * @param {!Object} side
//     * @param {?} stage
//     * @return {?}
//     */
//    this.CorrectPossition = function (side, stage) {
//        return 0 == stage.getScaleX() || 0 == stage.getScaleY() ? {
//            x: stage.getOffsetX(),
//            y: 0
//        } : {
//                x: side.x / stage.getScaleX() + stage.getOffsetX(),
//                y: side.y / stage.getScaleY() + stage.getOffsetY()
//            };
//    };
//    /**
//     * @return {undefined}
//     */
//    this.DeleteSelected = function () {
//        var self = this;
//        /** @type {!Array} */
//        var t = new Array;
//        this.Components.forEach(function (c) {
//            if (c.GetSelected) {
//                t = t.concat(c.GetSelected());
//            }
//        });
//        if (t.length > 0) {
//            self.confirm(WorkflowDesignerConstants.DeleteConfirm, function () {
//                t.forEach(function (proxy) {
//                    proxy.Delete();
//                });
//                self.onSelectionChanged(false);
//                self.StoreGraphData();
//                self.redrawAll();
//            });
//        }
//    };
//    /**
//     * @param {string} message
//     * @param {!Function} confirmCallback
//     * @return {undefined}
//     */
//    this.confirm = function (message, confirmCallback) {
//        var div = $('<div class="ui mini modal"></div>');
//        div.append($('<div class="content"><p>' + message + "</p></div>"));
//        var fieldsDiv = $('<div class="actions"></div>').append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextYes + "</div>").append('<div class="ui secondary  cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>");
//        div.append(fieldsDiv);
//        WorkflowDesignerCommon.modal(div, {
//            onApprove: function () {
//                confirmCallback();
//            }
//        });
//        WorkflowDesignerCommon.modal(div, "show");
//    };
//    /**
//     * @return {undefined}
//     */
//    this.destroy = function () {
//        if (void 0 != this.originalContainerStyle) {
//            $("#" + this.container).attr("style", this.originalContainerStyle);
//        }
//        if (void 0 != this.data) {
//            if (void 0 == this.data.__loadParams) {
//                this.data.__loadParams = {};
//            }
//            this.data.__loadParams.graphData = this.graphData;
//            this.data.__loadParams.graphDataIndex = this.graphDataIndex;
//        }
//        this.Stage.destroy();
//        this.ComponentsExecute("destroy");
//    };
//    /**
//     * @return {?}
//     */
//    this.GetCurrentActivity = function () {
//        if (void 0 != self.data && void 0 != self.data.AdditionalParams && void 0 != self.data.AdditionalParams.ProcessParameters) {
//            /** @type {number} */
//            var i = 0;
//            for (; i < self.data.AdditionalParams.ProcessParameters.length; i++) {
//                var skill = self.data.AdditionalParams.ProcessParameters[i];
//                if ("CurrentActivity" === skill.Name) {
//                    return skill.Value;
//                }
//            }
//        }
//    };
//    /**
//     * @param {?} family_given
//     * @return {?}
//     */
//    this.isCurrentActivityForSubprocess = function (family_given) {
//        if (void 0 == self.data || void 0 == self.data.AdditionalParams || !Array.isArray(self.data.AdditionalParams.SubprocessCurrentActivities)) {
//            return false;
//        }
//        /** @type {number} */
//        var i = 0;
//        for (; i < self.data.AdditionalParams.SubprocessCurrentActivities.length; i++) {
//            if (family_given === self.data.AdditionalParams.SubprocessCurrentActivities[i]) {
//                return true;
//            }
//        }
//        return false;
//    };
//    /**
//     * @param {?} e
//     * @return {?}
//     */
//    this.IsGroupActive = function (e) {
//        var index = this.GetCurrentActivity();
//        if (void 0 == index) {
//            return false;
//        }
//        /** @type {number} */
//        var name = 0;
//        for (; name < self.data.Activities.length; name++) {
//            var path = self.data.Activities[name];
//            if (index === path.Name) {
//                return self.CheckActive(path, e);
//            }
//        }
//        return false;
//    };
//    /**
//     * @param {!Object} v
//     * @param {?} prop
//     * @return {?}
//     */
//    this.CheckActive = function (v, prop) {
//        var res = this;
//        var p2 = v.DesignerSettings.Group;
//        if (p2 === prop) {
//            return true;
//        }
//        /** @type {null} */
//        var validationVM = null;
//        if (void 0 !== v.DesignerSettings.InlineElementSettings && null !== v.DesignerSettings.InlineElementSettings && void 0 !== v.DesignerSettings.InlineElementSettings.Group && null !== v.DesignerSettings.InlineElementSettings.Group) {
//            /** @type {!Object} */
//            validationVM = v;
//        } else {
//            /** @type {number} */
//            var i = 0;
//            for (; i < res.data.Activities.length; i++) {
//                var v = res.data.Activities[i];
//                if (v.DesignerSettings.Group === p2 && void 0 !== v.DesignerSettings.InlineElementSettings && null !== v.DesignerSettings.InlineElementSettings && void 0 !== v.DesignerSettings.InlineElementSettings.Group && null !== v.DesignerSettings.InlineElementSettings.Group) {
//                    validationVM = v;
//                    break;
//                }
//            }
//        }
//        if (null === validationVM) {
//            return false;
//        }
//        var p1 = validationVM.DesignerSettings.InlineElementSettings.Group;
//        if (p1 === prop) {
//            return true;
//        }
//        /** @type {null} */
//        var val = null;
//        /** @type {number} */
//        i = 0;
//        for (; i < res.data.Activities.length; i++) {
//            var nx = res.data.Activities[i];
//            if (void 0 !== nx.DesignerSettings.InlineElementSettings && null !== nx.DesignerSettings.InlineElementSettings && nx.DesignerSettings.Group === p1) {
//                val = nx;
//                break;
//            }
//        }
//        return null !== val && res.CheckActive(val, prop);
//    };
//    /**
//     * @param {?} name
//     * @param {?} server
//     * @return {?}
//     */
//    this.getActionParameterDefinition = function (name, server) {
//        /** @type {number} */
//        var i = 0;
//        for (; i < self.data.CodeActions.length; i++) {
//            var e = self.data.CodeActions[i];
//            if (e.Type === server && e.Name === name) {
//                if (e.ParameterDefinitions && e.ParameterDefinitions.length > 0) {
//                    return e.ParameterDefinitions;
//                }
//                break;
//            }
//        }
//        return self.getCodeactionParameter(server, name);
//    };
//    /**
//     * @return {?}
//     */
//    this.getActionNames = function () {
//        var geckoTable = this;
//        /** @type {!Array} */
//        var names = new Array;
//        /** @type {number} */
//        var i = 0;
//        for (; i < geckoTable.data.CodeActions.length; i++) {
//            var attr = geckoTable.data.CodeActions[i];
//            if ("action" === attr.Type.toLowerCase()) {
//                names.push(attr.Name);
//            }
//        }
//        return geckoTable.data.AdditionalParams.Actions.concat(names);
//    };
//    /**
//     * @return {?}
//     */
//    this.getConditionNames = function () {
//        var geckoTable = this;
//        /** @type {!Array} */
//        var names = new Array;
//        /** @type {number} */
//        var i = 0;
//        for (; i < geckoTable.data.CodeActions.length; i++) {
//            var attr = geckoTable.data.CodeActions[i];
//            if ("condition" === attr.Type.toLowerCase()) {
//                names.push(attr.Name);
//            }
//        }
//        return geckoTable.data.AdditionalParams.Conditions.concat(names);
//    };
//    /**
//     * @return {?}
//     */
//    this.getActorNames = function () {
//        var results = this;
//        /** @type {!Array} */
//        var result = new Array;
//        /** @type {number} */
//        var specIndex = 0;
//        for (; specIndex < results.data.CodeActions.length; specIndex++) {
//            var spec = results.data.CodeActions[specIndex];
//            if (!("ruleget" !== spec.Type.toLowerCase() && "rulecheck" !== spec.Type.toLowerCase())) {
//                result.push(spec.Name);
//            }
//        }
//        return results.unique(results.data.AdditionalParams.Rules.concat(result));
//    };
//    /**
//     * @return {?}
//     */
//    this.getTypeNames = function () {
//        var self = this;
//        /** @type {!Array} */
//        var res = new Array;
//        /** @type {number} */
//        var i = 0;
//        for (; i < self.data.Parameters.length; i++) {
//            var query = self.data.Parameters[i];
//            res.push(decodeURIComponent(query.Type));
//        }
//        return self.unique(self.data.AdditionalParams.Types.concat(res));
//    };
//    /**
//     * @param {?} name
//     * @param {?} index
//     * @return {?}
//     */
//    this.getCodeactionParameter = function (name, index) {
//        /** @type {null} */
//        var key = null;
//        return void 0 !== this.parametersCache[name] && void 0 !== this.parametersCache[name][index] ? key = this.parametersCache[name][index] : (void 0 === this.parametersCache[name] && (this.parametersCache[name] = new Object), key = this.designer.requestcodeactionparameter(name, index), this.parametersCache[name][index] = key), key;
//    };
//    /**
//     * @param {?} key
//     * @param {?} token
//     * @param {string} i
//     * @return {?}
//     */
//    this.getAutoCompleteSuggestions = function (key, token, i) {
//        var data;
//        return void 0 === token || "" === token ? new Array : (void 0 != this.suggestionsCache[key] && void 0 != this.suggestionsCache[key][token] ? data = this.suggestionsCache[key][token] : (void 0 == this.suggestionsCache[key] && (this.suggestionsCache[key] = new Object), data = this.designer.requestautocompletesuggestions(key, token), this.suggestionsCache[key][token] = data), $.grep(data, function (p_Interval) {
//            return p_Interval.toLowerCase().indexOf(i.toLowerCase()) >= 0;
//        }));
//    };
//    /**
//     * @return {?}
//     */
//    this.getNonSystemParameters = function () {
//        var context = this;
//        /** @type {!Array} */
//        var t = new Array;
//        /** @type {number} */
//        var i = 0;
//        for (; i < context.data.Parameters.length; i++) {
//            var n = context.data.Parameters[i];
//            if ("system" != n.Purpose.toLowerCase()) {
//                t.push(n);
//            }
//        }
//        return t;
//    };
//    /**
//     * @param {?} array
//     * @return {?}
//     */
//    this.unique = function (array) {
//        return $.grep(array, function (elem, index) {
//            return index === $.inArray(elem, array);
//        });
//    };
//    /**
//     * @param {?} filterBySyncano
//     * @return {undefined}
//     */
//    this.setInlinedFlag = function (filterBySyncano) {
//        this.data.CanBeInlined = filterBySyncano;
//        self.StoreGraphData();
//    };
//    /** @type {!Array} */
//    this.graphData = [];
//    /** @type {number} */
//    this.graphDataIndex = -1;
//    /**
//     * @return {undefined}
//     */
//    this.StoreGraphData = function () {
//        var data = void 0;
//        if (void 0 != this.data.__loadParams) {
//            data = this.data.__loadParams.graphData;
//            this.data.__loadParams.graphData = void 0;
//        }
//        /** @type {string} */
//        var resampled = JSON.stringify(this.data);
//        if (void 0 != data && (this.data.__loadParams.graphData = data), this.graphDataIndex < 0 || this.graphData[this.graphDataIndex] != resampled) {
//            this.graphDataIndex++;
//            if (this.graphData.length > this.graphDataIndex) {
//                this.graphData.splice(this.graphDataIndex, this.graphData.length - this.graphDataIndex);
//            }
//            this.graphData.push(resampled);
//            /** @type {number} */
//            var i = 200;
//            if (void 0 != WorkflowDesignerConstants.UndoDepth) {
//                i = WorkflowDesignerConstants.UndoDepth;
//            }
//            if (this.graphData.length > i) {
//                this.graphData.splice(0, 1);
//                this.graphDataIndex--;
//            }
//        }
//        this.\u0441heckToolbarButtonState();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.ClearGraphData = function () {
//        /** @type {!Array} */
//        this.graphData = [];
//        /** @type {number} */
//        this.graphDataIndex = -1;
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Undo = function () {
//        if (this.graphDataIndex > 0) {
//            this.changeGraphDataIndex(this.graphDataIndex - 1);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Redo = function () {
//        if (this.graphData.length > this.graphDataIndex) {
//            this.changeGraphDataIndex(this.graphDataIndex + 1);
//        }
//    };
//    /**
//     * @param {number} column
//     * @return {undefined}
//     */
//    this.changeGraphDataIndex = function (column) {
//        if (this.graphData.length > column) {
//            /** @type {*} */
//            var item = JSON.parse(this.graphData[column]);
//            WorkflowDesignerCommon.DataCorrection(item);
//            /** @type {*} */
//            this.designer.data = item;
//            this.Draw(item);
//            /** @type {number} */
//            this.graphDataIndex = column;
//        }
//        this.\u0441heckToolbarButtonState();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.\u0441heckToolbarButtonState = function () {
//        if (void 0 === this._toolbal) {
//            this._toolbal = self.GetComponentByType("WorkflowDesignerToolbar");
//        }
//        var self = this._toolbal;
//        if (void 0 != self) {
//            self.setItemDisabled("undo", this.graphDataIndex <= 0);
//            self.setItemDisabled("redo", this.graphData.length <= this.graphDataIndex + 1);
//            self.onChangeScheme();
//            self.Layer.batchDraw();
//        }
//    };
//    /**
//     * @param {number} selections
//     * @return {undefined}
//     */
//    this.onSelectionChanged = function (selections) {
//        if (void 0 == this._toolbal) {
//            this._toolbal = self.GetComponentByType("WorkflowDesignerToolbar");
//        }
//        var menu = this._toolbal;
//        if (void 0 != menu) {
//            var savedSelections;
//            if (void 0 == selections) {
//                var c = self.GetComponentByType("WorkflowDesignerActivityManager");
//                var list = self.GetComponentByType("WorkflowDesignerTransitionManager");
//                var expRecords = c.GetSelected();
//                var s = list.GetSelected();
//                /** @type {boolean} */
//                savedSelections = expRecords.length > 0 || s.length > 0;
//            } else {
//                /** @type {number} */
//                savedSelections = selections;
//            }
//            menu.setItemDisabled("copy", !savedSelections);
//            menu.setItemDisabled("delete", !savedSelections);
//        }
//    };
//}
//;

//'use strict';
///**
// * @param {!Object} options
// * @return {undefined}
// */
//function WorkflowDesignerTransitionControl(options) {
//    var data = this;
//    this.manager = options.manager;
//    this.graph = options.graph;
//    this.from = options.from;
//    this.to = options.to;
//    this.item = options.item;
//    this.group = options.group;
//    /**
//     * @param {!Object} val
//     * @return {undefined}
//     */
//    this.setFrom = function (val) {
//        /** @type {!Object} */
//        this.from = val;
//        this.item.From = val.item;
//    };
//    /**
//     * @param {!Object} to
//     * @return {undefined}
//     */
//    this.setTo = function (to) {
//        /** @type {!Object} */
//        this.to = to;
//        this.item.To = to.item;
//    };
//    /**
//     * @return {?}
//     */
//    this.GetName = function () {
//        return this.item.Name;
//    };
//    /**
//     * @param {string} name
//     * @return {undefined}
//     */
//    this.SetName = function (name) {
//        /** @type {string} */
//        this.item.Name = name;
//    };
//    this.control = void 0;
//    this.arrow = void 0;
//    this.line = void 0;
//    if (void 0 != this.item.DesignerSettings && void 0 != this.item.DesignerSettings.X && void 0 != this.item.DesignerSettings.Y) {
//        this.middle = {
//            x: Number(this.item.DesignerSettings.X),
//            y: Number(this.item.DesignerSettings.Y)
//        };
//    }
//    this.from.RegisterTransition(this);
//    this.to.RegisterTransition(this);
//    this.start = void 0;
//    this.end = void 0;
//    this.angle = void 0;
//    this.activePoint = void 0;
//    /** @type {!Array} */
//    this.touchpoints = [];
//    /**
//     * @param {number} t
//     * @param {number} e
//     * @return {undefined}
//     */
//    this.DrawTransition = function (t, e) {
//        var i;
//        var left;
//        var n;
//        var offsetY;
//        var e = this;
//        var fx = this.from.rectangle;
//        var shape = this.to.rectangle;
//        /** @type {number} */
//        i = Number(this.from.getX());
//        /** @type {number} */
//        left = Number(this.from.getY());
//        /** @type {number} */
//        n = Number(this.to.getX());
//        /** @type {number} */
//        offsetY = Number(this.to.getY());
//        /** @type {number} */
//        var step = Number(fx.attrs.width / 2);
//        /** @type {number} */
//        var radius = Number(fx.attrs.height / 2);
//        /** @type {number} */
//        var w = Number(shape.attrs.width / 2);
//        /** @type {number} */
//        var h = Number(shape.attrs.height / 2);
//        /** @type {number} */
//        var start = i + step;
//        /** @type {number} */
//        var x = left + radius;
//        /** @type {number} */
//        var r = n + w;
//        /** @type {number} */
//        var offset = offsetY + h;
//        if (this.direction = {
//            start: 0,
//            end: 0
//        }, this.from == this.to) {
//            this.start = {
//                x: start + step,
//                y: x - radius + 14
//            };
//            this.end = {
//                x: r + w - 25,
//                y: offset - h
//            };
//            /** @type {number} */
//            this.direction.end = 1;
//            if (void 0 == this.middle) {
//                this.middle = {
//                    x: start + step + radius,
//                    y: x - 2 * radius
//                };
//            }
//        } else {
//            /** @type {boolean} */
//            var v = false;
//            if (void 0 == this.middle) {
//                /** @type {boolean} */
//                v = true;
//                this.middle = {
//                    x: (start + r) / 2,
//                    y: (x + offset) / 2
//                };
//            }
//            /** @type {number} */
//            var i = start;
//            /** @type {number} */
//            var y = x;
//            /** @type {number} */
//            var l = r;
//            /** @type {number} */
//            var j = offset;
//            if (x - radius - 25 > this.middle.y && offset - h - 25 > this.middle.y ? (y = x - radius, j = offset - h, this.direction.start = 1, this.direction.end = 1) : x + radius + 25 < this.middle.y && offset + h + 25 < this.middle.y ? (y = x + radius, j = offset + h, this.direction.start = 1, this.direction.end = 1) : start - step - 25 > this.middle.x && r - w - 25 > this.middle.x ? (i = start - step, l = r - w) : start + step + 25 < this.middle.x && r + w + 25 < this.middle.x ? (i = start + step,
//                l = r + w) : (start + step + 25 < this.middle.x ? i = i + step : start - step - 25 > this.middle.x ? i = i - step : x + radius + 25 < this.middle.y ? (y = y + radius, this.direction.start = 1) : x - radius - 25 > this.middle.y ? (y = y - radius, this.direction.start = 1) : i <= this.middle.x ? i = i + step : i = i - step, r + w + 25 < this.middle.x ? l = l + w : r - w - 25 > this.middle.x ? l = l - w : offset + h + 25 < this.middle.y ? (j = j + h, this.direction.end = 1) : offset - h - 25 >
//                    this.middle.y ? (j = j - h, this.direction.end = 1) : (y >= this.middle.y ? j = j + h : j = j - h, this.direction.end = 1)), void 0 != t && (i = t.x, y = t.y, v = true), void 0 != e && (l = e.x, j = e.y, v = true), this.start = {
//                        x: i,
//                        y: y
//                    }, this.end = {
//                        x: l,
//                        y: j
//                    }, v) {
//                this.middle = {
//                    x: (i + l) / 2,
//                    y: (y + j) / 2
//                };
//                /** @type {number} */
//                var linkCnt = 0;
//                for (; linkCnt < e.manager.ItemControls.length; linkCnt++) {
//                    var l = e.manager.ItemControls[linkCnt];
//                    if (l != e && l.middle.x == e.middle.x && l.middle.y == e.middle.y) {
//                        if (0 == e.direction.start) {
//                            e.middle.y += 40;
//                        } else {
//                            e.middle.x += 40;
//                        }
//                    }
//                }
//            }
//            if (void 0 == t) {
//                if (0 == this.direction.start) {
//                    if (this.middle.y > y + radius - 7) {
//                        y = y + (radius - 7);
//                    } else {
//                        if (this.middle.y < y - radius + 7) {
//                            /** @type {number} */
//                            y = y - (radius - 7);
//                        } else {
//                            /** @type {number} */
//                            y = this.middle.y;
//                        }
//                    }
//                } else {
//                    if (this.middle.x > i + step - 10) {
//                        i = i + (step - 10);
//                    } else {
//                        if (this.middle.x < i - step + 10) {
//                            /** @type {number} */
//                            i = i - (step - 10);
//                        } else {
//                            /** @type {number} */
//                            i = this.middle.x;
//                        }
//                    }
//                }
//            }
//            if (void 0 == e) {
//                if (0 == this.direction.end) {
//                    if (this.middle.y > j + h - 7) {
//                        j = j + (h - 7);
//                    } else {
//                        if (this.middle.y < j - h + 7) {
//                            /** @type {number} */
//                            j = j - (h - 7);
//                        } else {
//                            /** @type {number} */
//                            j = this.middle.y;
//                        }
//                    }
//                } else {
//                    if (this.middle.x > l + w - 10) {
//                        l = l + (w - 10);
//                    } else {
//                        if (this.middle.x < l - w + 10) {
//                            /** @type {number} */
//                            l = l - (w - 10);
//                        } else {
//                            /** @type {number} */
//                            l = this.middle.x;
//                        }
//                    }
//                }
//            }
//            this.start = {
//                x: i,
//                y: y
//            };
//            this.end = {
//                x: l,
//                y: j
//            };
//        }
//        this.points = this.GetPoints([this.start.x, this.start.y, this.middle.x, this.middle.y, this.end.x, this.end.y], this.direction);
//        var color = this.GetColor();
//        if (this.angle = Math.atan2(this.points[this.points.length - 1] - this.points[this.points.length - 3], this.points[this.points.length - 2] - this.points[this.points.length - 4]), void 0 == this.control) {
//            this.control = new Konva.Group({
//                x: 0,
//                y: 0,
//                rotation: 0
//            });
//            this.arrow = WorkflowDesignerCommon.createArrowByAngle(this.end.x, this.end.y, this.angle, 15, color);
//            var options = {
//                points: this.points,
//                stroke: color,
//                strokeWidth: 2,
//                lineCap: "round",
//                lineJoin: "round"
//            };
//            if (this.item.IsFork) {
//                /** @type {!Array} */
//                options.dash = [10, 10];
//            }
//            this.line = new Konva.Line(options);
//            this.control.add(this.line);
//            this.control.add(this.arrow);
//            this.manager.Layer.add(this.control);
//        } else {
//            WorkflowDesignerCommon.updateArrowByAngle(this.arrow, this.end.x, this.end.y, this.angle, 15, color);
//            this.line.setPoints(this.points);
//        }
//    };
//    /**
//     * @param {!Array} chars
//     * @param {!Object} tokenRange
//     * @return {?}
//     */
//    this.GetPoints = function (chars, tokenRange) {
//        if (chars[0] == chars[2] == chars[4] || chars[1] == chars[3] == chars[5]) {
//            return chars;
//        }
//        /** @type {!Array} */
//        var array = new Array;
//        return chars[0] == chars[2] || chars[1] == chars[3] ? array.push(chars[0], chars[1], chars[2], chars[3]) : (array.push(chars[0], chars[1]), 0 == tokenRange.start ? array.push(chars[2], chars[1]) : array.push(chars[0], chars[3]), array.push(chars[2], chars[3])), 0 == tokenRange.end && array[array.length - 2] != chars[4] ? array.push(array[array.length - 2], chars[5]) : 1 == tokenRange.end && array[array.length - 1] != chars[5] && array.push(chars[4], array[array.length - 1]), array.push(chars[4],
//            chars[5]), array;
//    };
//    /**
//     * @return {?}
//     */
//    this.GetColor = function () {
//        var y = void 0 == this.item.Classifier ? "notspecified" : this.item.Classifier.toLowerCase();
//        return "notspecified" == y ? "#7F8C8D" : "direct" == y ? "#27AE60" : "#2980B9";
//    };
//    /**
//     * @return {undefined}
//     */
//    this.DrawActivePoint = function () {
//        if (this.activePoint) {
//            this._moveActivePoint(this.middle.x, this.middle.y);
//        } else {
//            var entrytwo = void 0;
//            if (void 0 != this.graph.Settings.drawElements && void 0 != this.graph.Settings.drawElements.transitionActivePoint) {
//                entrytwo = this.graph.Settings.drawElements.transitionActivePoint(this, this.middle.x, this.middle.y);
//            }
//            if (!entrytwo) {
//                entrytwo = this.graph.Settings.transitionActivePointOldStyle ? this._createActivePointOld(this.middle.x, this.middle.y, this.control) : this._createActivePoint(this.middle.x, this.middle.y, this.control);
//            }
//            data.manager.APLayer.add(entrytwo);
//            this.activePoint = entrytwo;
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.DrawTouchPoints = function () {
//        this._getLineLength(this.start.x, this.start.y, this.end.x, this.end.y);
//        if (void 0 == this.touchpoints[0] || this.touchpoints[0].isdestroyed) {
//            var points = this._createTouchPoint(this.points, this.control, false);
//            data.manager.APLayer.add(points);
//            this.touchpoints[0] = points;
//        } else {
//            this._moveTouchPoints(this.touchpoints[0], this.points, false);
//        }
//        if (void 0 == this.touchpoints[1] || this.touchpoints[1].isdestroyed) {
//            var points = this._createTouchPoint(this.points, this.control, true);
//            data.manager.APLayer.add(points);
//            this.touchpoints[1] = points;
//        } else {
//            this._moveTouchPoints(this.touchpoints[1], this.points, true);
//        }
//    };
//    /**
//     * @param {undefined} e
//     * @param {undefined} delta
//     * @return {undefined}
//     */
//    this.Draw = function (e, delta) {
//        this.DrawTransition(e, delta);
//        this.DrawActivePoint();
//        if (!this.graph.Settings.readonly) {
//            this.DrawTouchPoints();
//        }
//    };
//    /**
//     * @param {boolean} canCreateDiscussions
//     * @return {undefined}
//     */
//    this.DeleteTouchPoint = function (canCreateDiscussions) {
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.touchpoints.length; i++) {
//            if (this.touchpoints[i].isend === canCreateDiscussions) {
//                this.touchpoints[i].destroy();
//                /** @type {boolean} */
//                this.touchpoints[i].isdestroyed = true;
//            }
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Delete = function () {
//        this.from.UnregisterTransition(this);
//        this.to.UnregisterTransition(this);
//        this.control.destroy();
//        if (void 0 != this.activePoint.ToolTip) {
//            this.activePoint.ToolTip.destroy();
//        }
//        this.activePoint.destroy();
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.touchpoints.length; i++) {
//            this.touchpoints[i].destroy();
//        }
//        var container = this.graph.data.Transitions.indexOf(this.item);
//        if (container >= 0) {
//            this.graph.data.Transitions.splice(container, 1);
//        }
//        container = this.manager.ItemControls.indexOf(this);
//        if (container >= 0) {
//            this.manager.ItemControls.splice(container, 1);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this._onDelete = function () {
//        data.graph.confirm(WorkflowDesignerConstants.DeleteConfirmCurrent, function () {
//            data.Delete();
//            data.graph.onSelectionChanged();
//            data.graph.redrawAll();
//            data.graph.StoreGraphData();
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Select = function () {
//        if (1 != this.selected) {
//            var self = this;
//            if (self.oldstroke = this.line.getStroke(), self.line.setStroke(WorkflowDesignerConstants.SelectColor), self.line.setStrokeWidth(3), void 0 == self.bar) {
//                var path = self.graph.Settings.imagefolder;
//                /** @type {number} */
//                var audioOffsetX = -15;
//                /** @type {!Array} */
//                var payload = [];
//                if (!self.graph.Settings.notshowwindows) {
//                    payload.push({
//                        img: path + "wfe.settings.png",
//                        click: function () {
//                            self.ShowProperties();
//                        }
//                    });
//                }
//                if (!self.graph.Settings.readonly) {
//                    payload.push({
//                        img: path + "wfe.delete.png",
//                        click: function () {
//                            self._onDelete();
//                        }
//                    });
//                    /** @type {number} */
//                    audioOffsetX = -30;
//                }
//                if (payload.length > 0) {
//                    self.bar = WorkflowDesignerBar(self.manager.APLayer, payload, {
//                        x: audioOffsetX,
//                        y: -50
//                    });
//                    self.activePoint.add(self.bar);
//                }
//            } else {
//                this.bar.show();
//            }
//            /** @type {boolean} */
//            self.selected = true;
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Deselect = function () {
//        if (0 != this.selected) {
//            this.line.setStrokeWidth(2);
//            if (void 0 != this.oldstroke) {
//                this.line.setStroke(this.oldstroke);
//            }
//            if (void 0 != this.bar) {
//                this.bar.hide();
//            }
//            /** @type {boolean} */
//            this.selected = false;
//        }
//    };
//    /**
//     * @param {!Object} o
//     * @param {!Array} value
//     * @param {boolean} inverted
//     * @return {undefined}
//     */
//    this._moveTouchPoints = function (o, value, inverted) {
//        /** @type {({x: ?, y: ?})} */
//        var pos = inverted ? {
//            x: value[value.length - 2],
//            y: value[value.length - 1]
//        } : {
//                x: value[0],
//                y: value[1]
//            };
//        /** @type {({x: ?, y: ?})} */
//        var to = inverted ? {
//            x: value[value.length - 4],
//            y: value[value.length - 3]
//        } : {
//                x: value[2],
//                y: value[3]
//            };
//        var point = {
//            x: 0,
//            y: 0
//        };
//        /** @type {number} */
//        var offset = inverted ? 24 : 10;
//        if (pos.x == to.x) {
//            if (pos.y < to.y) {
//                /** @type {number} */
//                point.y = offset;
//            } else {
//                /** @type {number} */
//                point.y = -offset;
//            }
//        } else {
//            if (pos.y == to.y) {
//                if (pos.x < to.x) {
//                    /** @type {number} */
//                    point.x = offset;
//                } else {
//                    /** @type {number} */
//                    point.x = -offset;
//                }
//            }
//        }
//        o.setPosition(pos);
//        o.circle.setPosition(point);
//    };
//    /**
//     * @param {!Array} rect
//     * @param {string} value
//     * @param {boolean} inverted
//     * @return {?}
//     */
//    this._createTouchPoint = function (rect, value, inverted) {
//        var self = this;
//        /** @type {({x: ?, y: ?})} */
//        var a = inverted ? {
//            x: rect[rect.length - 2],
//            y: rect[rect.length - 1]
//        } : {
//                x: rect[0],
//                y: rect[1]
//            };
//        /** @type {({x: ?, y: ?})} */
//        var b = inverted ? {
//            x: rect[rect.length - 4],
//            y: rect[rect.length - 3]
//        } : {
//                x: rect[2],
//                y: rect[3]
//            };
//        var point = {
//            x: 0,
//            y: 0
//        };
//        /** @type {number} */
//        var offset = inverted ? 24 : 10;
//        if (a.x == b.x) {
//            if (a.y < b.y) {
//                /** @type {number} */
//                point.y = offset;
//            } else {
//                /** @type {number} */
//                point.y = -offset;
//            }
//        } else {
//            if (a.y == b.y) {
//                if (a.x < b.x) {
//                    /** @type {number} */
//                    point.x = offset;
//                } else {
//                    /** @type {number} */
//                    point.x = -offset;
//                }
//            }
//        }
//        var group = new Konva.Group({
//            x: a.x,
//            y: a.y,
//            draggable: true
//        });
//        /** @type {boolean} */
//        group.isend = inverted;
//        var color = this.GetColor();
//        var circle = new Konva.Circle({
//            x: point.x,
//            y: point.y,
//            radius: 5,
//            fill: color
//        });
//        group.add(circle);
//        group.circle = circle;
//        /** @type {string} */
//        group.transition = value;
//        /**
//         * @return {undefined}
//         */
//        var update = function () {
//            var e = self.graph.CorrectPossition(circle.getAbsolutePosition(), self.manager.Layer);
//            if (inverted) {
//                self.DrawTransition(void 0, e);
//            } else {
//                self.DrawTransition(e, void 0);
//            }
//            self.DrawActivePoint();
//            self.DeleteTouchPoint(!inverted);
//            self.manager.batchDraw();
//        };
//        return group.on("dragmove", function () {
//            update();
//        }), group.on("dragend", function () {
//            var xkcd_source = circle.getAbsolutePosition();
//            var x = self.manager.getIntersectingActivity(xkcd_source);
//            if (!(void 0 == x || x.group)) {
//                self.middle = void 0;
//                self.Sync();
//                if (inverted) {
//                    self.to.UnregisterTransition(self);
//                    self.setTo(x);
//                    self.to.RegisterTransition(self);
//                } else {
//                    self.from.UnregisterTransition(self);
//                    self.setFrom(x);
//                    self.from.RegisterTransition(self);
//                }
//                self.graph.StoreGraphData();
//            }
//            self.Draw();
//            self.manager.batchDraw();
//        }), group;
//    };
//    /**
//     * @param {number} response
//     * @param {string} t
//     * @return {undefined}
//     */
//    this._moveActivePoint = function (response, t) {
//        this.activePoint.setPosition({
//            x: response,
//            y: t
//        });
//    };
//    /**
//     * @param {number} xRel
//     * @param {string} yRel
//     * @param {string} transition
//     * @return {?}
//     */
//    this._createActivePoint = function (xRel, yRel, transition) {
//        var self = this;
//        /** @type {boolean} */
//        var draggable = !self.graph.Settings.disableobjectmovements;
//        var circle = new Konva.Group({
//            x: xRel,
//            y: yRel,
//            draggable: draggable
//        });
//        /** @type {string} */
//        var value = "";
//        /** @type {boolean} */
//        isTimer = false;
//        var undefined = this.item.Trigger.Type.toLowerCase();
//        if ("auto" === undefined) {
//            value = WorkflowDesignerConstants.TransitionAuto;
//            if (void 0 == value) {
//                /** @type {string} */
//                value = "Auto";
//            }
//        } else {
//            if ("command" === undefined) {
//                if (this.item.Trigger && this.item.Trigger.Command && this.item.Trigger.Command.Name) {
//                    value = this.item.Trigger.Command.Name;
//                    if (value.length > 15) {
//                        /** @type {string} */
//                        value = value.substr(0, 15) + "...";
//                    }
//                }
//            } else {
//                if ("timer" === undefined) {
//                    /** @type {boolean} */
//                    isTimer = true;
//                    if (this.item.Trigger && this.item.Trigger.Timer && this.item.Trigger.Timer.Name) {
//                        value = this.item.Trigger.Timer.Name;
//                        if (value.length > 15) {
//                            /** @type {string} */
//                            value = value.substr(0, 15) + "...";
//                        }
//                    }
//                }
//            }
//        }
//        /** @type {!Array} */
//        var item = [];
//        /** @type {!Array} */
//        var values = [];
//        if (false) {
//            item.push(this.manager.ImageTimer);
//        }
//        if (Array.isArray(this.item.Restrictions) && this.item.Restrictions.length > 0) {
//            values.push(this.manager.ImageActor);
//        }
//        var wait_error = this.item.Conditions[0].Type.toLowerCase();
//        if ("action" === wait_error) {
//            values.push(this.manager.ImageCondition);
//        } else {
//            if ("otherwise" === wait_error) {
//                values.push(this.manager.ImageOtherwise);
//            }
//        }
//        var TITLE_AREA_Y = WorkflowDesignerCommon.getTextWidth(value, "bold 12px arial") + 2;
//        /** @type {number} */
//        var sitesowners = 15 * item.length;
//        /** @type {number} */
//        var siteName = 15 * values.length;
//        /** @type {number} */
//        var locContentSizeHeight = (TITLE_AREA_Y + sitesowners + siteName) / 2;
//        var neededWidth = TITLE_AREA_Y + sitesowners + siteName + 10;
//        var handler1 = new Konva.Text({
//            x: -locContentSizeHeight + sitesowners + 1,
//            y: -5,
//            text: value,
//            fontSize: 12,
//            fontFamily: "Arial",
//            fill: "#FFFFFF",
//            fontStyle: "bold"
//        });
//        var figure = new Konva.Rect({
//            x: -locContentSizeHeight - 5,
//            y: -12,
//            width: neededWidth,
//            height: 25,
//            fill: self.GetColor(),
//            cornerRadius: 15
//        });
//        circle.add(figure);
//        /** @type {number} */
//        var i = 0;
//        for (; i < item.length; i++) {
//            circle.add(new Konva.Image({
//                x: -locContentSizeHeight + 12 * i + 2,
//                y: -5,
//                image: item[i],
//                width: 10,
//                height: 10,
//                strokeWidth: 0
//            }));
//        }
//        /** @type {number} */
//        i = 0;
//        for (; i < values.length; i++) {
//            circle.add(new Konva.Image({
//                x: -locContentSizeHeight + 2 + sitesowners + TITLE_AREA_Y + 12 * i,
//                y: -5,
//                image: values[i],
//                width: 10,
//                height: 10,
//                strokeWidth: 0
//            }));
//        }
//        circle.add(handler1);
//        /** @type {string} */
//        circle.transition = transition;
//        /**
//         * @param {boolean} n2
//         * @param {?} text
//         * @return {undefined}
//         */
//        var add = function (n2, text) {
//            var pressed = self.graph.CorrectPossition(circle.getAbsolutePosition(), self.manager.Layer);
//            self.middle = pressed;
//            self.DrawTransition();
//            if (!self.graph.Settings.readonly) {
//                self.DrawTouchPoints();
//            }
//            if (n2) {
//                self.DrawActivePoint();
//                self.Sync();
//            }
//            self.manager.batchDraw();
//        };
//        /**
//         * @param {!MouseEvent} event
//         * @return {undefined}
//         */
//        var render = function (event) {
//            if (!self.graph.Settings.disableobjectmovements) {
//                var sel = self.selected;
//                if (!event.evt.ctrlKey) {
//                    self.graph.DeselectAll();
//                }
//                if (sel) {
//                    self.Deselect();
//                } else {
//                    self.Select();
//                }
//                if (void 0 != self.activePoint.ToolTip) {
//                    self.activePoint.ToolTip.hide();
//                }
//                self.graph.onSelectionChanged();
//                self.manager.batchDraw();
//            }
//        };
//        if (circle.on("click", render), circle.on("touchend", render), circle.on("dblclick", function () {
//            self.graph.DeselectAll();
//            self.Select();
//            self.manager.batchDraw();
//            if (!self.graph.Settings.notshowwindows) {
//                self.ShowProperties();
//            }
//        }), circle.on("dragstart", function () {
//            if (!self.graph.Settings.disableobjectmovements) {
//                if (void 0 != self.activePoint.ToolTip) {
//                    self.activePoint.ToolTip.hide();
//                }
//            }
//        }), circle.on("dragmove", function () {
//            if (!self.graph.Settings.disableobjectmovements) {
//                add(false);
//            }
//        }), circle.on("dragend", function () {
//            if (!self.graph.Settings.disableobjectmovements) {
//                add(true);
//            }
//        }), 1 == self.graph.getParam("exinfo")) {
//            self.createExInfo(circle);
//        } else {
//            var baseClass = this.item.Trigger.Type;
//            if (void 0 != self.item.Trigger && void 0 != self.item.Trigger.Command && "Command" === self.item.Trigger.Type) {
//                /** @type {string} */
//                baseClass = baseClass + (" " + self.item.Trigger.Command.Name);
//            }
//            if (void 0 != self.item.Trigger && void 0 != self.item.Trigger.Timer && "Timer" === self.item.Trigger.Type) {
//                /** @type {string} */
//                baseClass = baseClass + (" " + self.item.Trigger.Timer.Name);
//            }
//            /** @type {string} */
//            baseClass = baseClass + ("\r\n" + this.item.Conditions[0].Type);
//            if (void 0 != self.item.Conditions[0] && "Action" === self.item.Conditions[0].Type) {
//                /** @type {string} */
//                baseClass = baseClass + (" " + self.item.Conditions[0].Action.ActionName);
//            }
//            WorkflowDesignerTooltip(self.manager.APLayer, circle, baseClass, 17);
//        }
//        return circle;
//    };
//    /**
//     * @param {string} xRel
//     * @param {string} yRel
//     * @param {string} transition
//     * @return {?}
//     */
//    this._createActivePointOld = function (xRel, yRel, transition) {
//        var self = this;
//        /** @type {boolean} */
//        var draggable = !self.graph.Settings.disableobjectmovements;
//        var circle = new Konva.Group({
//            x: xRel,
//            y: yRel,
//            draggable: draggable
//        });
//        /** @type {string} */
//        var string = "";
//        var undefined = this.item.Trigger.Type.toLowerCase();
//        if ("auto" === undefined) {
//            /** @type {string} */
//            string = string + "A";
//        } else {
//            if ("command" === undefined) {
//                /** @type {string} */
//                string = string + "C";
//            } else {
//                if ("timer" === undefined) {
//                    /** @type {string} */
//                    string = string + "T";
//                }
//            }
//        }
//        var wait_error = this.item.Conditions[0].Type.toLowerCase();
//        if ("always" === wait_error) {
//            /** @type {string} */
//            string = string + "A";
//        } else {
//            if ("action" === wait_error) {
//                /** @type {string} */
//                string = string + "C";
//            } else {
//                if ("otherwise" === wait_error) {
//                    /** @type {string} */
//                    string = string + "O";
//                }
//            }
//        }
//        if (Array.isArray(this.item.Restrictions) && this.item.Restrictions.length > 0) {
//            /** @type {string} */
//            string = string + "R";
//        }
//        var handler1 = new Konva.Rect({
//            x: 3 == string.length ? -22 : -16,
//            y: -15,
//            width: 3 == string.length ? 47 : 34,
//            height: 30,
//            fill: self.GetColor(),
//            cornerRadius: 15
//        });
//        circle.add(handler1);
//        var figure = new Konva.Text({
//            x: 3 == string.length ? -16 : -10,
//            y: -7,
//            text: string,
//            fontSize: 16,
//            fontFamily: "Arial",
//            fill: "#FFFFFF",
//            fontStyle: "bold"
//        });
//        circle.add(figure);
//        /** @type {string} */
//        circle.transition = transition;
//        /**
//         * @param {boolean} n2
//         * @param {?} text
//         * @return {undefined}
//         */
//        var add = function (n2, text) {
//            var pressed = self.graph.CorrectPossition(circle.getAbsolutePosition(), self.manager.Layer);
//            self.middle = pressed;
//            self.DrawTransition();
//            if (!self.graph.Settings.readonly) {
//                self.DrawTouchPoints();
//            }
//            if (n2) {
//                self.DrawActivePoint();
//                self.Sync();
//            }
//            self.manager.batchDraw();
//        };
//        /**
//         * @param {!MouseEvent} event
//         * @return {undefined}
//         */
//        var render = function (event) {
//            if (!self.graph.Settings.disableobjectmovements) {
//                var sel = self.selected;
//                if (!event.evt.ctrlKey) {
//                    self.graph.DeselectAll();
//                }
//                if (sel) {
//                    self.Deselect();
//                } else {
//                    self.Select();
//                }
//                if (void 0 != self.activePoint.ToolTip) {
//                    self.activePoint.ToolTip.hide();
//                }
//                self.graph.onSelectionChanged();
//                self.manager.batchDraw();
//            }
//        };
//        if (circle.on("click", render), circle.on("touchend", render), circle.on("dblclick", function () {
//            self.graph.DeselectAll();
//            self.Select();
//            self.manager.batchDraw();
//            if (!self.graph.Settings.notshowwindows) {
//                self.ShowProperties();
//            }
//        }), circle.on("dragstart", function () {
//            if (!self.graph.Settings.disableobjectmovements) {
//                if (void 0 != self.activePoint.ToolTip) {
//                    self.activePoint.ToolTip.hide();
//                }
//            }
//        }), circle.on("dragmove", function () {
//            if (!self.graph.Settings.disableobjectmovements) {
//                add(false);
//            }
//        }), circle.on("dragend", function () {
//            if (!self.graph.Settings.disableobjectmovements) {
//                add(true);
//            }
//        }), 1 == self.graph.getParam("exinfo")) {
//            self.createExInfo(circle);
//        } else {
//            var baseClass = this.item.Trigger.Type;
//            if (void 0 != self.item.Trigger && void 0 != self.item.Trigger.Command && "Command" === self.item.Trigger.Type) {
//                /** @type {string} */
//                baseClass = baseClass + (" " + self.item.Trigger.Command.Name);
//            }
//            if (void 0 != self.item.Trigger && void 0 != self.item.Trigger.Timer && "Timer" === self.item.Trigger.Type) {
//                /** @type {string} */
//                baseClass = baseClass + (" " + self.item.Trigger.Timer.Name);
//            }
//            /** @type {string} */
//            baseClass = baseClass + ("\r\n" + this.item.Conditions[0].Type);
//            if (void 0 != self.item.Conditions[0] && "Action" === self.item.Conditions[0].Type) {
//                /** @type {string} */
//                baseClass = baseClass + (" " + self.item.Conditions[0].Action.ActionName);
//            }
//            WorkflowDesignerTooltip(self.manager.APLayer, circle, baseClass, 17);
//        }
//        return circle;
//    };
//    /**
//     * @param {?} surface
//     * @return {undefined}
//     */
//    this.createExInfo = function (surface) {
//        /** @type {string} */
//        var url = "";
//        if (void 0 != data.item.Trigger && void 0 != data.item.Trigger.Command && "Command" === data.item.Trigger.Type && (Array.isArray(data.item.Restrictions) && data.item.Restrictions.length > 0 && data.item.Restrictions.forEach(function (attendee) {
//            if (void 0 != attendee.Actor) {
//                var id = attendee.Actor.Name;
//                if ("Restrict" == attendee.Type) {
//                    /** @type {string} */
//                    id = "(" + id + ")";
//                }
//                if (url.length > 0) {
//                    url = url + ", ";
//                }
//                url = url + id;
//            }
//        }), url.length > 0 && (url = url + " -> "), url = url + data.item.Trigger.Command.Name), void 0 != data.item.Trigger && void 0 != data.item.Trigger.Timer && "Timer" === data.item.Trigger.Type) {
//            var time = data.item.Trigger.Timer.Value;
//            if (void 0 != time && "" != time) {
//                url = url + (" " + time);
//            }
//        }
//        if (url.length > 0) {
//            var rect = new Konva.Text({
//                x: 0,
//                y: -30,
//                text: url,
//                fontFamily: "Arial",
//                fontSize: 12,
//                fill: "#4A4A4A",
//                fontStyle: "bold"
//            });
//            rect.setX(-Number(rect.getWidth() / 2));
//            surface.add(rect);
//        }
//        /** @type {string} */
//        var i = "";
//        if (Array.isArray(data.item.Conditions) && data.item.Conditions.length > 0 && data.item.Conditions.forEach(function (dockerEvent) {
//            if (void 0 != dockerEvent.Action) {
//                var GROUPSIZE = dockerEvent.Action.ActionName;
//                if (1 == dockerEvent.ConditionInversion) {
//                    /** @type {string} */
//                    GROUPSIZE = "(" + GROUPSIZE + ")";
//                }
//                if (i.length > 0) {
//                    i = i + ", ";
//                }
//                i = i + GROUPSIZE;
//            }
//        }), i.length > 0) {
//            rect = new Konva.Text({
//                x: 0,
//                y: 20,
//                text: i,
//                fontFamily: "Arial",
//                fontSize: 12,
//                fill: "#4A4A4A",
//                fontStyle: "bold"
//            });
//            rect.setX(-Number(rect.getWidth() / 2));
//            surface.add(rect);
//        }
//    };
//    /**
//     * @param {number} t
//     * @param {number} p
//     * @param {number} s
//     * @param {number} num
//     * @return {?}
//     */
//    this._getLineLength = function (t, p, s, num) {
//        return Math.sqrt(Math.pow(s - t, 2) + Math.pow(num - p, 2));
//    };
//    /**
//     * @param {number} r
//     * @param {number} x
//     * @param {number} i
//     * @param {number} w
//     * @param {number} t
//     * @param {number} d
//     * @return {?}
//     */
//    this._getBendingKoeff = function (r, x, i, w, t, d) {
//        /** @type {number} */
//        var tx = x - w;
//        /** @type {number} */
//        var s = i - r;
//        /** @type {number} */
//        var sx = r * w - i * x;
//        if (s <= 0) {
//            /** @type {number} */
//            tx = -tx;
//            /** @type {number} */
//            s = -s;
//            /** @type {number} */
//            sx = -sx;
//        }
//        /** @type {number} */
//        var c = -(sx + tx * t) / s;
//        /** @type {number} */
//        var tickSplit = c < d ? -1 : 1;
//        var f = this._getLineLength(r, x, i, w);
//        /** @type {number} */
//        var transform = (r + i) / 2;
//        /** @type {number} */
//        var n = (x + w) / 2;
//        var g = this._getLineLength(transform, n, t, d);
//        /** @type {number} */
//        var l = g / f * tickSplit;
//        return 0 == s && (l = -l), l;
//    };
//    /**
//     * @param {?} p
//     * @return {?}
//     */
//    this.getIntersectingRect = function (p) {
//        var normalized = this.activePoint.getAbsolutePosition();
//        return normalized.x >= p.xl && normalized.x < p.xr && normalized.y >= p.yl && normalized.y < p.yr;
//    };
//    /**
//     * @return {undefined}
//     */
//    this.ShowProperties = function () {
//        var filter = WorkflowDesignerConstants.TransitionFormLabel;
//        var options = {
//            name: filter.From,
//            field: "From.Name",
//            type: "select",
//            displayfield: "Name",
//            datasource: data.graph.data.Activities,
//            width: "100%"
//        };
//        if (void 0 != this.item.From && "Inline" === this.item.From.ActivityType) {
//            options = {
//                type: "group",
//                width: "100%",
//                elements: [options, {
//                    name: filter.InlinedFinalActivityName,
//                    field: "InlinedFinalActivityName",
//                    type: "input",
//                    width: "100%"
//                }]
//            };
//        }
//        var context = {
//            type: "form",
//            title: filter.Title,
//            data: this.item,
//            readonly: this.graph.Settings.readonly,
//            elements: [{
//                type: "group",
//                elements: [{
//                    name: filter.Name,
//                    field: "Name",
//                    type: "input",
//                    width: "100%"
//                }, {
//                    name: filter.Classifier,
//                    field: "Classifier",
//                    type: "select",
//                    width: "100%",
//                    datasource: ["Direct", "Reverse", "NotSpecified"]
//                }]
//            }, {
//                type: "group",
//                elements: [options, {
//                    name: filter.To,
//                    field: "To.Name",
//                    type: "select",
//                    displayfield: "Name",
//                    datasource: data.graph.data.Activities,
//                    width: "100%"
//                }]
//            }, {
//                field: "Trigger",
//                code: "trigger",
//                type: "form",
//                datadefault: {
//                    Type: "Command"
//                },
//                elements: [{
//                    type: "group",
//                    elements: [{
//                        name: filter.Trigger,
//                        code: "triggertype",
//                        field: "Type",
//                        type: "select",
//                        datasource: ["Auto", "Command", "Timer"]
//                    }, {
//                        name: filter.TriggerCommand,
//                        code: "triggercommand",
//                        field: "Command.Name",
//                        type: "select",
//                        displayfield: "Name",
//                        datasource: data.graph.data.Commands
//                    }, {
//                        name: filter.TriggerTimer,
//                        code: "triggertimer",
//                        field: "Timer.Name",
//                        type: "select",
//                        displayfield: "Name",
//                        datasource: data.graph.data.Timers
//                    }]
//                }]
//            }, {
//                type: "group",
//                elements: [{
//                    name: filter.IsFork,
//                    field: "IsFork",
//                    code: "isfork",
//                    type: "checkbox"
//                }, {
//                    name: filter.MergeViaSetState,
//                    field: "MergeViaSetState",
//                    code: "mergeviasetstate",
//                    type: "checkbox"
//                }, {
//                    name: filter.DisableParentStateControl,
//                    field: "DisableParentStateControl",
//                    code: "disableparentstatecontrol",
//                    type: "checkbox"
//                }]
//            }, {
//                name: filter.Restrictions,
//                field: "Restrictions",
//                code: "restrictions",
//                type: "table",
//                datadefault: {
//                    Type: "Allow"
//                },
//                elements: [{
//                    name: filter.RestrictionsType,
//                    code: "resttype",
//                    field: "Type",
//                    type: "select",
//                    datasource: ["Allow", "Restrict"]
//                }, {
//                    name: filter.RestrictionsActor,
//                    code: "restactor",
//                    field: "Actor.Name",
//                    type: "select",
//                    displayfield: "Name",
//                    datasource: data.graph.data.Actors
//                }]
//            }, {
//                type: "group",
//                elements: [{
//                    name: filter.AllowConcatenationType,
//                    field: "AllowConcatenationType",
//                    type: "select",
//                    datasource: ["And", "Or"]
//                }, {
//                    name: filter.RestrictConcatenationType,
//                    field: "RestrictConcatenationType",
//                    type: "select",
//                    datasource: ["And", "Or"]
//                }]
//            }, {
//                name: filter.Condition,
//                field: "Conditions",
//                code: "condition",
//                type: "table",
//                datadefault: {
//                    Type: "Always",
//                    ResultOnPreExecution: "Null"
//                },
//                elements: [{
//                    name: filter.ConditionType,
//                    code: "conditiontype",
//                    field: "Type",
//                    type: "select",
//                    datasource: ["Always", "Action", "Otherwise"]
//                }, {
//                    name: filter.ConditionAction,
//                    code: "conditionaction",
//                    field: "Action.ActionName",
//                    type: "select",
//                    datasource: data.graph.getConditionNames(),
//                    onchange: function (e) {
//                        var t = $(e);
//                        var jQScrollable = t.closest("tr").find("[name=conditionactionparameter]").closest("td");
//                        var arr = jQScrollable.children();
//                        var id = arr[0].rebuild($(e).val(), arr.find("input").val());
//                        arr.remove();
//                        jQScrollable.append(id);
//                    }
//                }, {
//                    name: filter.ConditionActionParameter,
//                    code: "conditionactionparameter",
//                    field: "Action.ActionParameter",
//                    type: "jsonparameter",
//                    graph: data.graph,
//                    parametertype: "Condition",
//                    openautocompleteonclick: true,
//                    datasource: function (source, require) {
//                        var detailsTr = $(this).closest("tr");
//                        var _name = detailsTr.find("[name=conditionaction]")[0].value;
//                        require(data.graph.getAutoCompleteSuggestions("conditionparameter", _name, source));
//                    }
//                }, {
//                    name: filter.ConditionInversion,
//                    code: "conditioninversion",
//                    field: "ConditionInversion",
//                    type: "checkbox"
//                }, {
//                    name: filter.ResultOnPreExecution,
//                    code: "conditionresult",
//                    field: "ResultOnPreExecution",
//                    type: "select",
//                    datasource: ["True", "False"]
//                }],
//                onrowadded: function ($tabSelector) {
//                    var controls = $tabSelector.find("[name=conditiontype]");
//                    var $innerblock = $tabSelector.find("[name=conditionaction]");
//                    var searchContactPanel = $tabSelector.find("[name=conditionresult]");
//                    var rebaseBtn = $tabSelector.find("[name=conditionactionparameter]").parent().parent();
//                    var rebaseSuccessBtn = $tabSelector.find("[name=conditioninversion]").parent();
//                    /**
//                     * @return {undefined}
//                     */
//                    var action = function () {
//                        if ("Action" === controls[0].value) {
//                            $innerblock.show();
//                            searchContactPanel.show();
//                            rebaseBtn.show();
//                            rebaseSuccessBtn.show();
//                        } else {
//                            $innerblock.hide();
//                            searchContactPanel.hide();
//                            rebaseBtn.hide();
//                            rebaseSuccessBtn.hide();
//                        }
//                    };
//                    controls.on("change", action);
//                    action();
//                }
//            }, {
//                type: "group",
//                elements: [{
//                    name: filter.ConditionsConcatenationType,
//                    field: "ConditionsConcatenationType",
//                    type: "select",
//                    datasource: ["And", "Or"]
//                }]
//            }, {
//                name: filter.Annotations,
//                type: "table",
//                field: "Annotations",
//                keyproperty: "Name",
//                elements: [{
//                    name: filter.AnnotationName,
//                    field: "Name",
//                    type: "input"
//                }, {
//                    name: filter.AnnotationValue,
//                    field: "JsonValue",
//                    type: "json"
//                }]
//            }],
//            renderFinalFunc: function (mb, me) {
//                var $innerblock = mb.find("[name=restrictions]").parent();
//                var $this = mb.find("[name=triggertype]");
//                var modeControl = mb.find("[name=isfork]");
//                var sRight = mb.find("[name=triggercommand]");
//                var self = mb.find("[name=triggertimer]");
//                var $icm = mb.find("[name=AllowConcatenationType]").parent().parent();
//                var $video_capture = mb.find("[name=ConditionsConcatenationType]").parent().parent();
//                var searchContactPanel = mb.find("[name=mergeviasetstate]").parent().parent();
//                var rebaseBtn = mb.find("[name=disableparentstatecontrol]").parent().parent();
//                /**
//                 * @return {undefined}
//                 */
//                var init = function () {
//                    /**
//                     * @param {!Object} context
//                     * @return {?}
//                     */
//                    var jQuery = function (context) {
//                        return context.prev();
//                    };
//                    var vulnData = $this[0].value;
//                    if ("Command" == vulnData) {
//                        sRight.show();
//                        jQuery(sRight).show();
//                        self.hide();
//                        jQuery(self).hide();
//                        $innerblock.show();
//                    } else {
//                        if ("Timer" == vulnData) {
//                            sRight.hide();
//                            jQuery(sRight).hide();
//                            self.show();
//                            jQuery(self).show();
//                            $innerblock.hide();
//                            $icm.hide();
//                        } else {
//                            sRight.hide();
//                            jQuery(sRight).hide();
//                            self.hide();
//                            jQuery(self).hide();
//                            $innerblock.hide();
//                            $icm.hide();
//                        }
//                    }
//                    WorkflowDesignerCommon.modal(me.window, "refresh");
//                };
//                $this.on("change", init);
//                init();
//                /**
//                 * @return {undefined}
//                 */
//                var toggleEmptySectionOverlay = function () {
//                    if (modeControl[0].checked) {
//                        searchContactPanel.show();
//                        rebaseBtn.show();
//                    } else {
//                        searchContactPanel.hide();
//                        rebaseBtn.hide();
//                    }
//                };
//                modeControl.on("change", toggleEmptySectionOverlay);
//                toggleEmptySectionOverlay();
//                var charCode = $icm.find("[name=AllowConcatenationType]")[0].value.toLowerCase();
//                var operator = $icm.find("[name=RestrictConcatenationType]")[0].value.toLowerCase();
//                var id = $video_capture.find("[name=ConditionsConcatenationType]")[0].value.toLowerCase();
//                if ("and" === charCode && "and" === operator) {
//                    $icm.hide();
//                }
//                var keyCell = mb.find("[name=restrictions]").parent();
//                var l = $('<a class="btnConcatParameters"></a>');
//                l[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters;
//                l.on("click", function () {
//                    if ($icm.is(":visible")) {
//                        $icm.hide();
//                        l[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters;
//                    } else {
//                        $icm.show();
//                        l[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.HideConcatParameters;
//                    }
//                    WorkflowDesignerCommon.modal(me.window, "refresh");
//                });
//                keyCell.append("&nbsp;");
//                keyCell.append(l);
//                if ("and" === id) {
//                    $video_capture.hide();
//                }
//                var $select = mb.find("[name=condition]").parent();
//                var links = $('<a class="btnConcatParameters"></a>');
//                links[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters;
//                links.on("click", function () {
//                    if ($video_capture.is(":visible")) {
//                        $video_capture.hide();
//                        links[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.ShowConcatParameters;
//                    } else {
//                        $video_capture.show();
//                        links[0].innerText = WorkflowDesignerConstants.TransitionFormLabel.HideConcatParameters;
//                    }
//                    WorkflowDesignerCommon.modal(me.window, "refresh");
//                });
//                $select.append("&nbsp;");
//                $select.append(links);
//                WorkflowDesignerCommon.modal(me.window, "refresh");
//            },
//            graph: data.graph,
//            saveFunc: function (params) {
//                data.item.Name = params.Name;
//                data.item.From = {
//                    Name: params.From.Name
//                };
//                data.item.InlinedFinalActivityName = params.InlinedFinalActivityName;
//                data.item.To = {
//                    Name: params.To.Name
//                };
//                data.item.Classifier = params.Classifier;
//                data.item.Restrictions = params.Restrictions;
//                data.item.Trigger = params.Trigger;
//                data.item.Conditions = params.Conditions;
//                data.item.IsFork = params.IsFork;
//                data.item.MergeViaSetState = params.MergeViaSetState;
//                data.item.DisableParentStateControl = params.DisableParentStateControl;
//                data.item.ConditionsConcatenationType = params.ConditionsConcatenationType;
//                data.item.AllowConcatenationType = params.AllowConcatenationType;
//                data.item.RestrictConcatenationType = params.RestrictConcatenationType;
//                data.item.Annotations = params.Annotations;
//                WorkflowDesignerCommon.DataCorrection(data.graph.data);
//                data.graph.Draw(data.graph.data);
//                data.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.transition) {
//            this.graph.Settings.forms.transition(context);
//        } else {
//            var scope = new WorkflowDesignerForm(context);
//            /**
//             * @param {?} test
//             * @param {!Object} task
//             * @return {?}
//             */
//            var render = function (test, task) {
//                /** @type {boolean} */
//                var valid = true;
//                /** @type {number} */
//                valid = valid & test.CheckRequired([task], ["Name"], WorkflowDesignerConstants.FieldIsRequired);
//                /** @type {number} */
//                valid = valid & test.CheckRequired([task], ["Classifier"], WorkflowDesignerConstants.FieldIsRequired);
//                /** @type {!Array} */
//                var date = ["Type"];
//                if ("Command" == task.Trigger.Type) {
//                    date.push("Command.Name");
//                } else {
//                    if ("Timer" == task.Trigger.Type) {
//                        date.push("Timer.Name");
//                    }
//                }
//                /** @type {number} */
//                valid = valid & test.CheckRequired([task.Trigger], date, WorkflowDesignerConstants.FieldIsRequired);
//                task.Conditions.forEach(function (b) {
//                    /** @type {!Array} */
//                    date = ["Type"];
//                    if ("Action" == b.Type) {
//                        date.push("Action.ActionName");
//                    }
//                    /** @type {number} */
//                    valid = valid & test.CheckRequired([b], date, WorkflowDesignerConstants.FieldIsRequired);
//                    if ("Always" == b.Type && task.Conditions.length > 1) {
//                        /** @type {boolean} */
//                        valid = false;
//                        test.ControlAddError(b.control_Type, WorkflowDesignerConstants.AlwaysConditionShouldBeSingle);
//                    } else {
//                        if ("Otherwise" == b.Type && task.Conditions.length > 1) {
//                            /** @type {boolean} */
//                            valid = false;
//                            test.ControlAddError(b.control_Type, WorkflowDesignerConstants.OtherwiseConditionShouldBeSingle);
//                        }
//                    }
//                });
//                var item = task.control_Conditions.parent().children("h4");
//                return !task.Conditions.length > 0 ? (item.attr("title", WorkflowDesignerConstants.TransitionFormLabel.ConditionsListShouldNotBeEmpty), item.css("cssText", "color: red !important;"), valid = false) : (item.attr("title", void 0), item.css("color", "")), data.graph.data.Transitions.forEach(function (result) {
//                    if (result != data.item && result.Name == task.Name) {
//                        /** @type {boolean} */
//                        valid = false;
//                        test.ControlAddError(task.control_Name, WorkflowDesignerConstants.FieldMustBeUnique);
//                    }
//                }), test.CheckRequired(task.Restrictions, ["Type", "Actor.Name"], WorkflowDesignerConstants.FieldIsRequired) || (valid = false), test.CheckRequired(task.Annotations, ["Name"], WorkflowDesignerConstants.FieldIsRequired) || (valid = false), test.CheckUnique(task.Annotations, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique) || (valid = false), valid;
//            };
//            /**
//             * @param {!Object} cb
//             * @return {?}
//             */
//            var show = function (cb) {
//                return !!render(scope, cb) && (scope.ClearTempField(cb), scope.parameters.saveFunc(cb), true);
//            };
//            scope.showModal(show);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Sync = function () {
//        if (!this.group) {
//            data.item.DesignerSettings.Bending = data.bending;
//            if (void 0 != data.middle) {
//                data.item.DesignerSettings.X = data.middle.x;
//                data.item.DesignerSettings.Y = data.middle.y;
//            }
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.destroy = function () {
//        this.control.destroy();
//        this.activePoint.destroy();
//        this.touchpoints.forEach(function (anAlertDialog) {
//            anAlertDialog.destroy();
//        });
//        if (void 0 != this.bar) {
//            this.bar.destroy();
//        }
//    };
//}
//;
//'use strict';
///**
// * @param {!Object} e
// * @return {undefined}
// */
//function WorkflowDesignerTransitionManagerTempControl(e) {
//    this.x = e.x;
//    this.y = e.y;
//    this.manager = e.manager;
//    this.control = void 0;
//    /**
//     * @param {?} x
//     * @param {?} y
//     * @return {undefined}
//     */
//    this.Draw = function (x, y) {
//        this.control = new Konva.Group({
//            x: 0,
//            y: 0,
//            rotation: 0
//        });
//        this.line = new Konva.Line({
//            points: [this.x, this.y, x, y],
//            stroke: "#FFCC99",
//            strrokeWidth: 1
//        });
//        /** @type {number} */
//        var spriteKey = Math.atan2(y - this.y, x - this.x);
//        this.arrow = WorkflowDesignerCommon.createArrowByAngle(x, y, spriteKey, 20, "#FFCC99");
//        this.control.add(this.line);
//        this.control.add(this.arrow);
//        this.manager.Layer.add(this.control);
//    };
//    /**
//     * @param {!Object} actionBody
//     * @return {undefined}
//     */
//    this.Redraw = function (actionBody) {
//        this.line.setPoints([this.x, this.y, actionBody.x, actionBody.y]);
//        /** @type {number} */
//        var artistTrack = Math.atan2(actionBody.y - this.y, actionBody.x - this.x);
//        WorkflowDesignerCommon.updateArrowByAngle(this.arrow, actionBody.x, actionBody.y, artistTrack, 20, "#FFCC99");
//    };
//    /**
//     * @return {undefined}
//     */
//    this.Delete = function () {
//        this.control.destroy();
//    };
//}
//;

//'use strict';
///**
// * @return {undefined}
// */
//function WorkflowDesignerActivityManager() {
//    /** @type {string} */
//    this.type = "WorkflowDesignerActivityManager";
//    /**
//     * @param {!Object} src
//     * @return {undefined}
//     */
//    this.init = function (src) {
//        /** @type {!Object} */
//        this.graph = src;
//        this.Layer = new Konva.Layer;
//        this.graph.Stage.add(this.Layer);
//        this.Layer.setZIndex(1);
//    };
//    /** @type {!Array} */
//    this.ItemControls = new Array;
//    /**
//     * @return {undefined}
//     */
//    this.draw = function () {
//        if (null != this.ItemControls) {
//            this.ItemControls.forEach(function (anAlertDialog) {
//                anAlertDialog.destroy();
//            });
//        }
//        /** @type {!Array} */
//        this.ItemControls = new Array;
//        var options = this;
//        if (void 0 != this.graph.data.Activities) {
//            this.graph.data.Activities.forEach(function (line) {
//                var i;
//                var j;
//                var L = void 0;
//                if (options.graph.Settings.group != line.DesignerSettings.Group) {
//                    if (void 0 != line.DesignerSettings.InlineElementSettings && line.DesignerSettings.InlineElementSettings.Group == options.graph.Settings.group) {
//                        if ("" != line.DesignerSettings.InlineElementSettings.X && "" != line.DesignerSettings.InlineElementSettings.Y) {
//                            /** @type {number} */
//                            i = Number(line.DesignerSettings.InlineElementSettings.X);
//                            /** @type {number} */
//                            j = Number(line.DesignerSettings.InlineElementSettings.Y);
//                        } else {
//                            var lastMove = options.GetDefaultPosition();
//                            i = lastMove.x;
//                            j = lastMove.y;
//                        }
//                        L = new WorkflowDesignerActivityControl({
//                            x: i,
//                            y: j,
//                            item: line,
//                            graph: options.graph,
//                            manager: options,
//                            group: true
//                        });
//                    }
//                } else {
//                    if ("" != line.DesignerSettings.X && "" != line.DesignerSettings.Y) {
//                        /** @type {number} */
//                        i = Number(line.DesignerSettings.X);
//                        /** @type {number} */
//                        j = Number(line.DesignerSettings.Y);
//                    } else {
//                        lastMove = options.GetDefaultPosition();
//                        i = lastMove.x;
//                        j = lastMove.y;
//                    }
//                    L = new WorkflowDesignerActivityControl({
//                        x: i,
//                        y: j,
//                        item: line,
//                        graph: options.graph,
//                        manager: options
//                    });
//                }
//                if (void 0 != L) {
//                    options.ItemControls.push(L);
//                    L.Draw();
//                    L.Sync();
//                }
//            });
//        }
//        this.Layer.batchDraw();
//    };
//    /**
//     * @param {number} pos
//     * @param {!Object} d
//     * @return {?}
//     */
//    this.CreateNewActivity = function (pos, d) {
//        if (void 0 == pos) {
//            pos = this.GetDefaultPosition();
//        }
//        if (void 0 == d) {
//            d = {
//                IsAutoSchemeUpdate: true,
//                IsForSetState: true
//            };
//        }
//        if (void 0 == d.Name) {
//            d.Name = this.GetDefaultName();
//        }
//        if (0 == this.graph.data.Activities.length) {
//            /** @type {boolean} */
//            d.IsInitial = true;
//        }
//        if (d.DesignerSettings) {
//            d.DesignerSettings = new {
//                X: pos.x,
//                Y: pos.y
//            };
//        }
//        var L = new WorkflowDesignerActivityControl({
//            x: pos.x,
//            y: pos.y,
//            item: d,
//            graph: this.graph,
//            manager: this
//        });
//        return this.graph.data.Activities.push(d), this.ItemControls.push(L), L.Draw(), L.Sync(), L;
//    };
//    /**
//     * @param {number} p
//     * @param {!Object} i
//     * @return {?}
//     */
//    this.CreateNewInline = function (p, i) {
//        if (void 0 == p) {
//            p = this.GetDefaultPosition();
//        }
//        if (void 0 == i) {
//            i = {
//                IsAutoSchemeUpdate: false,
//                IsForSetState: false,
//                ActivityType: "Inline"
//            };
//        }
//        if (void 0 == i.Name) {
//            i.Name = this.GetDefaultName();
//        }
//        if (0 == this.graph.data.Activities.length) {
//            /** @type {boolean} */
//            i.IsInitial = true;
//        }
//        if (i.DesignerSettings) {
//            i.DesignerSettings = new {
//                X: p.x,
//                Y: p.y
//            };
//        }
//        var e = new WorkflowDesignerActivityControl({
//            x: p.x,
//            y: p.y,
//            item: i,
//            graph: this.graph,
//            manager: this
//        });
//        return this.graph.data.Activities.push(i), this.ItemControls.push(e), e.Draw(), e.Sync(), e;
//    };
//    /**
//     * @return {?}
//     */
//    this.GetDefaultName = function () {
//        var e = WorkflowDesignerConstants.ActivityNamePrefix;
//        /** @type {number} */
//        var On = 1;
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.graph.data.Activities.length; i++) {
//            if (this.graph.data.Activities[i].Name == e + On) {
//                On++;
//                /** @type {number} */
//                i = -1;
//            }
//        }
//        return e + On;
//    };
//    /**
//     * @return {?}
//     */
//    this.GetDefaultPosition = function () {
//        var realVector = this.graph.CorrectPossition({
//            x: 60,
//            y: 100
//        }, this.Layer);
//        /** @type {number} */
//        var mergeAxisLength = 2 * this.graph.Settings.DefaultMoveStep / this.Layer.getScaleX();
//        /** @type {number} */
//        var i = 0;
//        for (; i < this.ItemControls.length; i++) {
//            var mv = this.ItemControls[i].control.getPosition();
//            if (mv.x == realVector.x && mv.y == realVector.y) {
//                realVector.x += mergeAxisLength;
//                realVector.y += mergeAxisLength;
//                /** @type {number} */
//                i = -1;
//            }
//        }
//        return realVector;
//    };
//    /**
//     * @param {!Object} name
//     * @return {?}
//     */
//    this.find = function (name) {
//        if ("object" == typeof name && void 0 != name.Name) {
//            return this.find(name.Name);
//        }
//        /** @type {number} */
//        var kfruit = 0;
//        for (; kfruit < this.ItemControls.length; kfruit++) {
//            if (this.ItemControls[kfruit].item.Name === name) {
//                return this.ItemControls[kfruit];
//            }
//        }
//    };
//    /**
//     * @param {?} allGroups
//     * @param {?} allFolders
//     * @return {?}
//     */
//    this.findGroup = function (allGroups, allFolders) {
//        /** @type {number} */
//        var name = 0;
//        for (; name < this.graph.data.Activities.length; name++) {
//            var spec = this.graph.data.Activities[name];
//            if (spec.DesignerSettings.Group == allGroups && void 0 != spec.DesignerSettings.InlineElementSettings && spec.DesignerSettings.InlineElementSettings.Group == allFolders) {
//                return this.find(spec.Name);
//            }
//        }
//    };
//    /**
//     * @param {?} sphereList
//     * @return {?}
//     */
//    this.getIntersectingActivity = function (sphereList) {
//        /** @type {number} */
//        var layer_i = 0;
//        for (; layer_i < this.ItemControls.length; layer_i++) {
//            var layer = this.ItemControls[layer_i];
//            if (layer.getIntersectingActivity(sphereList)) {
//                return layer;
//            }
//        }
//    };
//    /**
//     * @param {?} pt
//     * @return {undefined}
//     */
//    this.LayerSetOffset = function (pt) {
//        this.Layer.setOffset(pt);
//    };
//    /**
//     * @param {!Object} prop
//     * @return {undefined}
//     */
//    this.LayerScale = function (prop) {
//        var sinHalfOffset = (prop.scale, prop.delta);
//        this.Layer.setScale({
//            x: this.Layer.getScale().x + sinHalfOffset,
//            y: this.Layer.getScale().y + sinHalfOffset
//        });
//    };
//    /**
//     * @param {?} canCreateDiscussions
//     * @return {undefined}
//     */
//    this.LayerScaleNorm = function (canCreateDiscussions) {
//        this.Layer.setScale({
//            x: 1,
//            y: 1
//        });
//        this.Layer.setOffset({
//            x: 0,
//            y: 0
//        });
//    };
//    /**
//     * @return {?}
//     */
//    this.redrawTransitions = function () {
//        return void 0 == this.cTransition && (this.cTransition = this.graph.GetComponentByType("WorkflowDesignerTransitionManager")), this.cTransition.batchDraw();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.batchDraw = function () {
//        this.Layer.batchDraw();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.SelectAll = function () {
//        this.ItemControls.forEach(function (global) {
//            global.Select();
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this.DeselectAll = function () {
//        this.ItemControls.forEach(function (self) {
//            self.Deselect();
//        });
//    };
//    /**
//     * @param {!Object} cr
//     * @return {?}
//     */
//    this.GetSizeForSaveAsImage = function (cr) {
//        /** @type {number} */
//        var lyr = 0;
//        for (; lyr < this.ItemControls.length; lyr++) {
//            var obj = this.ItemControls[lyr];
//            var invalidationEvent = obj.rectangle.getAbsolutePosition();
//            var x = invalidationEvent.x;
//            var y = invalidationEvent.y;
//            var vx2 = x + obj.rectangle.getWidth() * this.Layer.getScaleX();
//            var vy2 = y + obj.rectangle.getHeight() * this.Layer.getScaleX();
//            if (x < cr.x1) {
//                cr.x1 = x;
//            }
//            if (y < cr.y1) {
//                cr.y1 = y;
//            }
//            if (vx2 > cr.x2) {
//                cr.x2 = vx2;
//            }
//            if (vy2 > cr.y2) {
//                cr.y2 = vy2;
//            }
//        }
//        return cr;
//    };
//    /**
//     * @return {?}
//     */
//    this.GetSelected = function () {
//        /** @type {!Array} */
//        var wordsList = new Array;
//        return this.ItemControls.forEach(function (t) {
//            if (t.selected) {
//                wordsList.push(t);
//            }
//        }), wordsList;
//    };
//    /**
//     * @param {?} retypeQuestion
//     * @return {undefined}
//     */
//    this.SelectByPosition = function (retypeQuestion) {
//        this.ItemControls.forEach(function (ui) {
//            if (ui.getIntersectingActivityRect(retypeQuestion)) {
//                ui.Select();
//            }
//        });
//    };
//    /**
//     * @param {?} region
//     * @return {undefined}
//     */
//    this.SelectByItem = function (region) {
//        this.ItemControls.forEach(function (ui) {
//            if (ui.item == region) {
//                ui.Select();
//            }
//        });
//    };
//    /**
//     * @param {!Object} data
//     * @return {undefined}
//     */
//    this.ObjectMove = function (data) {
//        this.ItemControls.forEach(function (text) {
//            if (text.selected && data.sender != text) {
//                text.ObjectMove(data.changepos);
//            }
//        });
//        this.redrawTransitions();
//    };
//    /**
//     * @param {!Object} self
//     * @return {undefined}
//     */
//    this.createTransitionAndActivity = function (self) {
//        var target = {
//            x: self.control.getX() + self.rectangle.attrs.width + 100,
//            y: self.control.getY()
//        };
//        var targetNewKey = this.CreateNewActivity(target);
//        this.graph.GetComponentByType("WorkflowDesignerTransitionManager").CreateNewTransition(self, targetNewKey);
//        this.graph.redrawAll();
//    };
//    /**
//     * @param {?} name
//     * @return {?}
//     */
//    this.createTransition = function (name) {
//        return this.graph.GetComponentByType("WorkflowDesignerTransitionManager").CreateNewTransition(name);
//    };
//    /**
//     * @param {!Object} error
//     * @return {undefined}
//     */
//    this.Clone = function (error) {
//        /** @type {*} */
//        var t = JSON.parse(JSON.stringify(error.item));
//        t.DesignerSettings.Y += 160;
//        t.Name = this.CopySelectedGenUniqueValue(t.Name, this.graph.data.Activities, "Name");
//        this.graph.data.Activities.push(t);
//        this.graph.Draw(this.graph.data);
//        this.SelectByItem(t);
//    };
//    /**
//     * @param {string} fileName
//     * @param {!NodeList} source
//     * @param {string} field
//     * @return {?}
//     */
//    this.CopySelectedGenUniqueValue = function (fileName, source, field) {
//        /** @type {string} */
//        var tempName = fileName;
//        /** @type {number} */
//        var i = 1;
//        for (; true; i++) {
//            /** @type {boolean} */
//            var o = false;
//            /** @type {number} */
//            var index = 0;
//            for (; index < source.length; index++) {
//                if (source[index][field] == tempName) {
//                    /** @type {boolean} */
//                    o = true;
//                    break;
//                }
//            }
//            if (!o) {
//                break;
//            }
//            /** @type {string} */
//            tempName = fileName + "_" + i;
//        }
//        return tempName;
//    };
//}
//;

//'use strict';
///**
// * @return {undefined}
// */
//function WorkflowDesignerBackground() {
//    /** @type {string} */
//    this.type = "WorkflowDesignerBackground";
//    /**
//     * @param {!Object} src
//     * @return {undefined}
//     */
//    this.init = function (src) {
//        var $window = this;
//        /** @type {!Object} */
//        this.graph = src;
//        this.BackgroundLayer = new Konva.Layer;
//        this.graph.Stage.add(this.BackgroundLayer);
//        this.BackgroundLayer.setZIndex(0);
//        this.SelectionLayer = new Konva.Layer;
//        this.graph.Stage.add(this.SelectionLayer);
//        this.SelectionLayer.setZIndex(1);
//        WorkflowDesignerCommon.loadImage(this.graph.Settings.imagefolder + "wfe.grid.png", function (imageObj) {
//            $window.RectBG.setFillPatternImage(imageObj);
//            $window.BackgroundLayer.batchDraw();
//        });
//        this.RectBG = new Konva.Rect({
//            x: 0,
//            y: 0,
//            width: 5e3,
//            height: 5e3,
//            draggable: false,
//            dragBoundFunc: function (pos) {
//                /** @type {number} */
//                var grid = $window.graph.Settings.DefaultMoveStep * $window.BackgroundLayer.getScaleX();
//                /** @type {number} */
//                var ratio = $window.graph.Settings.DefaultMoveStep * $window.BackgroundLayer.getScaleY();
//                var leftRenderRect = {
//                    x: Math.round(pos.x / grid) * grid,
//                    y: Math.round(pos.y / ratio) * ratio
//                };
//                var width = $window.BackgroundLayer.getScaleX();
//                var canvasHeight = $window.BackgroundLayer.getScaleY();
//                /** @type {number} */
//                var padding = $window.graph.Stage.width() / width;
//                /** @type {number} */
//                var headerHeight = $window.graph.Stage.height() / canvasHeight;
//                return $window.RectBG.width() + pos.x / width - padding < 0 && $window.RectBG.width($window.RectBG.width() + padding), $window.RectBG.height() + pos.y / canvasHeight - headerHeight < 0 && $window.RectBG.height($window.RectBG.height() + headerHeight), $window.graph.GraphLayerSetOffset(-leftRenderRect.x / width, -leftRenderRect.y / canvasHeight), leftRenderRect;
//            },
//            designerparam: "background"
//        });
//        this.BackgroundLayer.add(this.RectBG);
//        this.BackgroundLayer.batchDraw();
//        this.graph.Stage.on("mousedown.background", function (event) {
//            if ("background" === event.target.attrs.designerparam) {
//                if (1 != $window._movemodeenabled) {
//                    $window._mousedownpos = $window.graph.CorrectPossition({
//                        x: event.evt.offsetX,
//                        y: event.evt.offsetY
//                    }, $window.SelectionLayer);
//                } else {
//                    $window.graph.DeselectAll();
//                }
//            }
//        });
//        this.graph.Stage.on("mousemove.background", function (event) {
//            if (1 != $window._movemodeenabled && void 0 != $window._mousedownpos) {
//                var lastTimeoutId = $window.graph.CorrectPossition({
//                    x: event.evt.offsetX,
//                    y: event.evt.offsetY
//                }, $window.SelectionLayer);
//                $window.DrawSelectionRect(lastTimeoutId);
//            }
//        });
//        this.graph.Stage.on("mouseup.background", function (event) {
//            if (!$window._movemodeenabled && void 0 != $window._mousedownpos) {
//                var ret = $window.getSelectionRectPos();
//                if (void 0 == ret) {
//                    if (!event.evt.ctrlKey) {
//                        $window.graph.DeselectAll();
//                    }
//                } else {
//                    if (Math.abs(ret.xl - ret.xr) > 10 || Math.abs(ret.yl - ret.yr) > 10) {
//                        $window.graph.DeselectAll();
//                        $window.graph.ComponentsExecute("SelectByPosition", ret);
//                        $window.graph.onSelectionChanged();
//                    }
//                }
//            }
//            $window._mousedownpos = void 0;
//            $window.DeleteSelectionRect();
//        });
//    };
//    /**
//     * @param {?} includeDamp
//     * @return {undefined}
//     */
//    this.setMoveModeEnabled = function (includeDamp) {
//        /** @type {boolean} */
//        this._movemodeenabled = Boolean(includeDamp);
//        this.RectBG.setDraggable(this._movemodeenabled);
//        this.graph.setParam("movemodeenabled", this._movemodeenabled);
//    };
//    /**
//     * @param {!Object} options
//     * @return {undefined}
//     */
//    this.updatePosition = function (options) {
//        var xhair = this.RectBG.getPosition();
//        var currentScrollPos = {
//            x: -xhair.x - options.x,
//            y: -xhair.y - options.y
//        };
//        this.RectBG.setPosition({
//            x: -currentScrollPos.x,
//            y: -currentScrollPos.y
//        });
//        this.graph.ComponentsExecute("LayerSetOffset", {
//            x: currentScrollPos.x,
//            y: currentScrollPos.y
//        });
//    };
//    /**
//     * @param {!Object} position
//     * @return {undefined}
//     */
//    this.setPosition = function (position) {
//        this.RectBG.setPosition({
//            x: -position.x,
//            y: -position.y
//        });
//        this.graph.ComponentsExecute("LayerSetOffset", {
//            x: position.x,
//            y: position.y
//        });
//    };
//    /**
//     * @param {!Object} prop
//     * @return {undefined}
//     */
//    this.LayerScale = function (prop) {
//        var sinHalfOffset = (prop.scale, prop.delta);
//        this.BackgroundLayer.setScale({
//            x: this.BackgroundLayer.getScale().x + sinHalfOffset,
//            y: this.BackgroundLayer.getScale().y + sinHalfOffset
//        });
//    };
//    /**
//     * @return {undefined}
//     */
//    this.LayerScaleNorm = function () {
//        this.BackgroundLayer.setScale({
//            x: 1,
//            y: 1
//        });
//        this.SelectionLayer.setScale({
//            x: 1,
//            y: 1
//        });
//        this.RectBG.setPosition({
//            x: 0,
//            y: 0
//        });
//    };
//    /**
//     * @param {!Object} absoluteMousePosition
//     * @return {undefined}
//     */
//    this.DrawSelectionRect = function (absoluteMousePosition) {
//        if (void 0 == this.RectSelection) {
//            this.RectSelection = new Konva.Rect({
//                x: this._mousedownpos.x,
//                y: this._mousedownpos.y,
//                width: absoluteMousePosition.x - this._mousedownpos.x,
//                height: absoluteMousePosition.y - this._mousedownpos.y,
//                draggable: false,
//                fill: "#66CCFF",
//                opacity: .2
//            });
//            this.SelectionLayer.add(this.RectSelection);
//        } else {
//            this.RectSelection.setWidth(absoluteMousePosition.x - this._mousedownpos.x);
//            this.RectSelection.setHeight(absoluteMousePosition.y - this._mousedownpos.y);
//        }
//        this.SelectionLayer.batchDraw();
//    };
//    /**
//     * @param {?} canCreateDiscussions
//     * @return {undefined}
//     */
//    this.DeleteSelectionRect = function (canCreateDiscussions) {
//        if (this.RectSelection) {
//            this.RectSelection.destroy();
//            this.RectSelection = void 0;
//            this.SelectionLayer.batchDraw();
//        }
//    };
//    /**
//     * @return {?}
//     */
//    this.getSelectionRectPos = function () {
//        if (void 0 != this.RectSelection) {
//            var scales = this.RectSelection.getAbsolutePosition();
//            var i = scales.x;
//            var Y = scales.y;
//            var rx2 = i + this.RectSelection.getWidth() * this.SelectionLayer.getScaleX();
//            var tB1x = Y + this.RectSelection.getHeight() * this.SelectionLayer.getScaleX();
//            return {
//                xl: Math.min(i, rx2),
//                yl: Math.min(Y, tB1x),
//                xr: Math.max(i, rx2),
//                yr: Math.max(Y, tB1x)
//            };
//        }
//    };
//}
//;

//'use strict';
///**
// * @param {?} start
// * @param {!Object} container
// * @param {string} blob
// * @param {?} w
// * @param {number} key
// * @param {number} value
// * @return {undefined}
// */
//function WorkflowDesignerTooltip(start, container, blob, w, key, value) {
//    /**
//     * @param {!Object} scale
//     * @param {?} stage
//     * @return {?}
//     */
//    var position = function (scale, stage) {
//        if (0 == stage.getScaleX() || 0 == stage.getScaleY()) {
//            return {
//                x: stage.getOffsetX(),
//                y: 0
//            };
//        }
//        var newElKey = void 0 == key ? 0 : key;
//        return {
//            x: scale.x / stage.getScaleX() + stage.getOffsetX() + newElKey,
//            y: scale.y / stage.getScaleY() + stage.getOffsetY()
//        };
//    };
//    container.on("mouseover", function () {
//        if (void 0 != container.ToolTip) {
//            var pos = position(container.getAbsolutePosition(), start);
//            container.ToolTip.position({
//                x: pos.x + container.getWidth() / 2,
//                y: pos.y + w,
//                opacity: 1
//            });
//            container.ToolTip.show();
//        } else {
//            pos = position(container.getAbsolutePosition(), start);
//            var build = new Konva.Label({
//                x: pos.x + container.getWidth() / 2,
//                y: pos.y + w,
//                opacity: 1
//            });
//            build.add(new Konva.Tag({
//                fill: "#3D4D59",
//                pointerDirection: void 0 == value ? "up" : value,
//                pointerWidth: 13,
//                pointerHeight: 7,
//                lineJoin: "round",
//                shadowColor: "#3D4D59",
//                shadowBlur: 10,
//                shadowOffset: 10,
//                shadowOpacity: 0,
//                cornerRadius: 5
//            }));
//            build.add(new Konva.Text({
//                text: blob,
//                fontFamily: "Arial",
//                fontSize: 12,
//                padding: 5,
//                fill: "white"
//            }));
//            start.add(build);
//            container.ToolTip = build;
//        }
//        start.batchDraw();
//    });
//    container.on("mouseleave", function () {
//        if (void 0 != container.ToolTip) {
//            container.ToolTip.hide();
//            start.batchDraw();
//        }
//    });
//}
//;

//'use strict';
///**
// * @param {!Object} s
// * @param {!Array} klass
// * @param {!Object} p
// * @param {string} f
// * @return {?}
// */
//function WorkflowDesignerBar(s, klass, p, f) {
//    /** @type {boolean} */
//    var v = "v" === f;
//    var row = new Konva.Group({
//        x: p.x,
//        y: p.y
//    });
//    var r = new Konva.Rect({
//        x: 0,
//        y: 0,
//        width: v ? 30 : 30 * klass.length,
//        height: v ? 30 * klass.length : 30,
//        fill: WorkflowDesignerConstants.BarColor,
//        cornerRadius: 5
//    });
//    row.add(r);
//    /** @type {number} */
//    var o = 0;
//    return klass.forEach(function (obj) {
//        if (obj.offset = o, obj.separator) {
//            o = o + 10;
//            /** @type {!Array} */
//            var value = v ? [5, obj.offset + 5, 25, obj.offset + 5] : [obj.offset + 5, 5, obj.offset + 5, 25];
//            obj.cObject = new Konva.Line({
//                points: value,
//                stroke: WorkflowDesignerConstants.BarSeparatorColor,
//                strokeWidth: 2
//            });
//            row.add(obj.cObject);
//        } else {
//            o = o + 30;
//            WorkflowDesignerCommon.loadImage(obj.img, function (multimedia_existing_image) {
//                if (!s.destroyed) {
//                    /** @type {({x: ?, y: number}|{x: number, y: ?})} */
//                    var x2 = v ? {
//                        x: 5,
//                        y: obj.offset + 5
//                    } : {
//                            x: 5 + obj.offset,
//                            y: 5
//                        };
//                    obj.offset;
//                    obj.offset;
//                    obj.group = new Konva.Group({
//                        x: x2.x - 5,
//                        y: x2.y - 5,
//                        width: 30,
//                        height: 30
//                    });
//                    obj.bg = new Konva.Rect({
//                        x: 0,
//                        y: 0,
//                        width: 30,
//                        height: 30,
//                        cornerRadius: 5
//                    });
//                    if (1 == obj.active) {
//                        obj.bg.setFill(WorkflowDesignerConstants.ButtonActive);
//                    }
//                    obj.group.add(obj.bg);
//                    obj.cImageToolbar = new Konva.Image({
//                        x: 5,
//                        y: 5,
//                        image: multimedia_existing_image,
//                        width: 20,
//                        height: 20,
//                        strokeWidth: 0
//                    });
//                    obj.group.add(obj.cImageToolbar);
//                    /**
//                     * @return {undefined}
//                     */
//                    var clickHandler = function () {
//                        if (void 0 != obj.cImageToolbar.ToolTip) {
//                            obj.cImageToolbar.ToolTip.hide();
//                        }
//                        if (void 0 != obj.click) {
//                            obj.click();
//                        }
//                    };
//                    obj.group.on("click", clickHandler);
//                    obj.group.on("touchend", clickHandler);
//                    obj.group.on("mouseover", function () {
//                        obj.bg.setFill(WorkflowDesignerConstants.ButtonActive);
//                        s.batchDraw();
//                    });
//                    obj.group.on("mouseleave", function () {
//                        if (!(void 0 != obj.active && 0 != obj.active)) {
//                            obj.bg.setFill("");
//                            s.batchDraw();
//                        }
//                    });
//                    obj.group.add(obj.cImageToolbar);
//                    row.add(obj.group);
//                    if (void 0 != obj.title && "" != obj.title) {
//                        WorkflowDesignerTooltip(s, obj.cImageToolbar, obj.title, 30);
//                    }
//                    s.batchDraw();
//                }
//            });
//        }
//    }), 1 == v ? r.setHeight(o) : r.setWidth(o), row;
//}
//;

//'use strict';
///**
// * @return {undefined}
// */
//function WorkflowDesignerToolbar() {
//    /** @type {string} */
//    this.type = "WorkflowDesignerToolbar";
//    this.graph = void 0;
//    var $ = this;
//    /**
//     * @param {!Object} src
//     * @return {undefined}
//     */
//    this.init = function (src) {
//        /** @type {!Object} */
//        this.graph = src;
//        this.Layer = new Konva.Layer;
//        this.graph.Stage.add(this.Layer);
//        this.Layer.setZIndex(10);
//        this.InitItems();
//        this.MainToolbarDraw(20, 20);
//        this.SideToolbarDraw($.graph.Settings.graphwidth - 70, 90);
//        if (!this.graph.Settings.hideInfoBlock) {
//            this.CreateInfoBlock();
//        }
//        var jsPlumb = this.GetWorkflowDesignerBackground();
//        if (void 0 != jsPlumb) {
//            jsPlumb.RectBG.setDraggable(false);
//        }
//        if (this.graph.getParam("movemodeenabled")) {
//            $.ToolbarMovePress();
//        }
//        if (this.graph.getParam("exinfo")) {
//            $.ToolbarExInfoPress();
//        }
//    };
//    /**
//     * @param {number} i
//     * @param {number} extras
//     * @return {undefined}
//     */
//    this.MainToolbarDraw = function (i, extras) {
//        /** @type {number} */
//        var e = 0;
//        var key;
//        for (key in this.Items) {
//            if (Array.isArray(this.Items[key]) && this.Items[key].length > 0) {
//                e = this.ToolbarDraw(this.Items[key], i + e, extras);
//                e = e + 10;
//            }
//        }
//    };
//    /**
//     * @param {number} yValue
//     * @param {number} i
//     * @return {undefined}
//     */
//    this.SideToolbarDraw = function (yValue, i) {
//        var pipelets = this.SideItems;
//        var options = new Konva.Group({
//            x: yValue,
//            y: i
//        });
//        var box = new Konva.Rect({
//            x: 0,
//            y: 0,
//            width: 50,
//            fill: "#FFFFFF",
//            shadowEnabled: true,
//            shadowBlur: 10,
//            shadowOpacity: .3,
//            cornerRadius: 4
//        });
//        options.add(box);
//        /** @type {number} */
//        var offset = 0;
//        pipelets.forEach(function (state) {
//            state.offset = offset;
//            if (1 == state.separator) {
//                offset = offset + 1;
//                state.cObject = new Konva.Line({
//                    points: [10, state.offset + 3, 40, state.offset + 3],
//                    stroke: WorkflowDesignerConstants.BarSeparatorColor,
//                    strokeWidth: 2
//                });
//                options.add(state.cObject);
//            } else {
//                offset = offset + 45;
//                $.loadImageHandler(void 0, {
//                    item: state,
//                    x: 0,
//                    y: state.offset,
//                    container: options,
//                    tooltipX: 25,
//                    tooltipY: -25,
//                    direction: "right"
//                });
//                WorkflowDesignerCommon.loadImage(state.img, function (posterUrl, editor) {
//                    editor.container.image(posterUrl);
//                    if (!this.Layer.destroyed) {
//                        this.Layer.batchDraw();
//                    }
//                }.bind($), {
//                        container: state.cImageToolbar
//                    });
//            }
//        });
//        options.add(new Konva.Line({
//            points: [10, offset + 3, 40, offset + 3],
//            stroke: WorkflowDesignerConstants.BarSeparatorColor,
//            strokeWidth: 2
//        }));
//        this.scaleText = new Konva.Text({
//            text: "100%",
//            fontFamily: "Arial",
//            fontStyle: "Bold",
//            fontSize: 12,
//            padding: 5,
//            fill: "black",
//            x: 4,
//            y: offset + 16,
//            align: "center",
//            width: 41
//        });
//        options.add(this.scaleText);
//        offset = offset + 40;
//        box.height(offset + 5);
//        this.Layer.add(options);
//        this.SideToolbar = options;
//    };
//    /**
//     * @param {!Array} around
//     * @param {number} i
//     * @param {number} s
//     * @return {?}
//     */
//    this.ToolbarDraw = function (around, i, s) {
//        var a = new Konva.Group({
//            x: i,
//            y: s
//        });
//        var t = new Konva.Rect({
//            x: 0,
//            y: 0,
//            height: 50,
//            fill: "#FFFFFF",
//            shadowEnabled: true,
//            shadowBlur: 10,
//            shadowOpacity: .3,
//            cornerRadius: 4
//        });
//        a.add(t);
//        /** @type {number} */
//        var size = 0;
//        return around.forEach(function (state) {
//            state.offset = size;
//            if (1 == state.separator) {
//                size = size + 1;
//                state.cObject = new Konva.Line({
//                    points: [state.offset + 3, 10, state.offset + 3, 40],
//                    stroke: WorkflowDesignerConstants.BarSeparatorColor,
//                    strokeWidth: 2
//                });
//                a.add(state.cObject);
//            } else {
//                size = size + 45;
//                $.loadImageHandler(void 0, {
//                    item: state,
//                    x: state.offset,
//                    y: 0,
//                    container: a
//                });
//                WorkflowDesignerCommon.loadImage(state.img, function (posterUrl, editor) {
//                    editor.container.image(posterUrl);
//                    if (!this.Layer.destroyed) {
//                        this.Layer.batchDraw();
//                    }
//                }.bind($), {
//                        container: state.cImageToolbar
//                    });
//            }
//        }), t.width(size + 5), this.Layer.add(a), i + size;
//    };
//    /**
//     * @param {!Object} data
//     * @param {!Object} state
//     * @return {undefined}
//     */
//    this.loadImageHandler = function (data, state) {
//        var self = state.item;
//        self.group = new Konva.Group({
//            x: state.x,
//            y: state.y,
//            width: 40,
//            height: 40
//        });
//        self.bg = new Konva.Rect({
//            x: 5,
//            y: 5,
//            width: 40,
//            height: 40,
//            cornerRadius: 4
//        });
//        self.group.add(self.bg);
//        if (1 == self.active) {
//            self.bg.setFill(WorkflowDesignerConstants.ButtonActive);
//        }
//        self.cImageToolbar = new Konva.Image({
//            x: 15,
//            y: 15,
//            image: data,
//            width: 20,
//            height: 20,
//            strokeWidth: 0
//        });
//        if (1 == self.disabled) {
//            self.cImageToolbar.opacity(.3);
//        }
//        self.group.add(self.cImageToolbar);
//        self.group.on("click", function () {
//            if (self.disabled !== true && void 0 != self.click) {
//                self.click(self);
//            }
//        });
//        self.group.on("touchend", function () {
//            if (self.disabled !== true && void 0 != self.click) {
//                self.click(self);
//            }
//        });
//        self.group.on("mouseover", function () {
//            if (1 != self.disabled) {
//                self.bg.setFill(WorkflowDesignerConstants.ButtonActive);
//                $.Layer.batchDraw();
//            }
//        });
//        self.group.on("mouseleave", function () {
//            if (!(void 0 != self.active && 0 != self.active)) {
//                self.bg.setFill("");
//                $.Layer.batchDraw();
//            }
//        });
//        state.container.add(self.group);
//        WorkflowDesignerTooltip(this.Layer, self.group, self.title, void 0 == state.tooltipX ? 55 : state.tooltipX, void 0 == state.tooltipY ? 5 : state.tooltipY, state.direction);
//        this.Layer.batchDraw();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.draw = function () {
//        this.GraphRedrawAll();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.GraphRedrawAll = function () {
//        this.UpdateInfoBlock();
//        this.Layer.batchDraw();
//    };
//    /**
//     * @param {number} w
//     * @param {number} h
//     * @return {undefined}
//     */
//    this.changeSize = function (w, h) {
//        if (void 0 != this.info) {
//            this.info.position({
//                x: w - 320,
//                y: h - 70
//            });
//        }
//        if (void 0 != this.SideToolbar) {
//            this.SideToolbar.position({
//                x: w - 70,
//                y: 90
//            });
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.CreateInfoBlock = function () {
//        var prefix = this.graph.Settings.imagefolder;
//        /** @type {string} */
//        var filename = prefix + "wfe.add.png";
//        /** @type {string} */
//        var url = prefix + "wfe.transitons2.png";
//        /** @type {string} */
//        var name = prefix + "wfe.commands.png";
//        var opts = {
//            x: 0,
//            y: 0
//        };
//        this.info = new Konva.Group(opts);
//        var content = new Konva.Rect({
//            x: 0,
//            y: 0,
//            height: 50,
//            width: 300,
//            fill: "#FFFFFF",
//            shadowEnabled: true,
//            shadowBlur: 10,
//            shadowOpacity: .3,
//            cornerRadius: 4
//        });
//        this.info.add(content);
//        /** @type {number} */
//        var x = 5;
//        this.infoText1 = new Konva.Text({
//            fontFamily: "Arial",
//            fontStyle: "Bold",
//            fontSize: 12,
//            padding: 5,
//            fill: "black",
//            x: x,
//            y: 16,
//            align: "center",
//            width: 60
//        });
//        this.info.add(this.infoText1);
//        x = x + (this.infoText1.width() + 5);
//        WorkflowDesignerCommon.loadImage(filename, function (multimedia_existing_image, t) {
//            t.container.add(new Konva.Image({
//                x: t.x,
//                y: t.y,
//                image: multimedia_existing_image,
//                width: 20,
//                height: 20,
//                strokeWidth: 0
//            }));
//        }, {
//                container: this.info,
//                x: x,
//                y: 15
//            });
//        x = x + 30;
//        this.info.add(new Konva.Line({
//            points: [x, 10, x, 40],
//            stroke: WorkflowDesignerConstants.BarSeparatorColor,
//            strokeWidth: 2
//        }));
//        x = x + 5;
//        this.infoText2 = new Konva.Text({
//            fontFamily: "Arial",
//            fontStyle: "Bold",
//            fontSize: 12,
//            padding: 5,
//            fill: "black",
//            x: x,
//            y: 16,
//            align: "center",
//            width: 60
//        });
//        this.info.add(this.infoText2);
//        x = x + (this.infoText2.width() + 5);
//        WorkflowDesignerCommon.loadImage(url, function (multimedia_existing_image, t) {
//            t.container.add(new Konva.Image({
//                x: t.x,
//                y: t.y,
//                image: multimedia_existing_image,
//                width: 20,
//                height: 20,
//                strokeWidth: 0
//            }));
//        }, {
//                container: this.info,
//                x: x,
//                y: 15
//            });
//        x = x + 30;
//        this.info.add(new Konva.Line({
//            points: [x, 10, x, 40],
//            stroke: WorkflowDesignerConstants.BarSeparatorColor,
//            strokeWidth: 2
//        }));
//        x = x + 5;
//        this.infoText3 = new Konva.Text({
//            fontFamily: "Arial",
//            fontStyle: "Bold",
//            fontSize: 12,
//            padding: 5,
//            fill: "black",
//            x: x,
//            y: 16,
//            align: "center",
//            width: 60
//        });
//        this.info.add(this.infoText3);
//        x = x + (this.infoText3.width() + 5);
//        WorkflowDesignerCommon.loadImage(name, function (multimedia_existing_image, t) {
//            t.container.add(new Konva.Image({
//                x: t.x,
//                y: t.y,
//                image: multimedia_existing_image,
//                width: 20,
//                height: 20,
//                strokeWidth: 0
//            }));
//        }, {
//                container: this.info,
//                x: x,
//                y: 15
//            });
//        x = x + 30;
//        content.width(x);
//        this.UpdateInfoBlock();
//        opts = {
//            x: this.graph.Settings.graphwidth - 320,
//            y: this.graph.Settings.graphheight - 70
//        };
//        this.info.position(opts);
//        this.Layer.add(this.info);
//    };
//    /**
//     * @return {undefined}
//     */
//    this.UpdateInfoBlock = function () {
//        var result = this.GetInfoBlockTextValue();
//        if (void 0 != this.infoText1) {
//            /** @type {string} */
//            var value = String(result.activity);
//            /** @type {string} */
//            var color = "black";
//            if (void 0 != result.activityLimit) {
//                /** @type {string} */
//                value = value + ("/" + result.activityLimit);
//                if (result.activityLimit < result.activity) {
//                    /** @type {string} */
//                    color = "#C0392B";
//                }
//            }
//            this.infoText1.setText(value);
//            this.infoText1.setFill(color);
//        }
//        if (void 0 != this.infoText2) {
//            /** @type {string} */
//            var value = String(result.transition);
//            /** @type {string} */
//            color = "black";
//            if (void 0 != result.transitionLimit) {
//                /** @type {string} */
//                value = value + ("/" + result.transitionLimit);
//                if (result.transitionLimit < result.transition) {
//                    /** @type {string} */
//                    color = "#C0392B";
//                }
//            }
//            this.infoText2.setText(value);
//            this.infoText2.setFill(color);
//        }
//        if (void 0 != this.infoText3) {
//            /** @type {string} */
//            var template = String(result.command);
//            /** @type {string} */
//            color = "black";
//            if (void 0 != result.commandLimit) {
//                /** @type {string} */
//                template = template + ("/" + result.commandLimit);
//                if (result.commandLimit < result.command) {
//                    /** @type {string} */
//                    color = "#C0392B";
//                }
//            }
//            this.infoText3.setText(template);
//            this.infoText3.setFill(color);
//        }
//    };
//    /**
//     * @return {?}
//     */
//    this.GetInfoBlockTextValue = function () {
//        var options = {
//            activity: 0,
//            transition: 0,
//            command: 0,
//            activityLimit: void 0,
//            transitionLimit: void 0,
//            commandLimit: void 0
//        };
//        if (void 0 != this.graph.data && (options.activity = this.graph.data.Activities.length, options.transition = this.graph.data.Transitions.length, options.command = this.graph.data.Commands.length, void 0 != this.graph.data.AdditionalParams)) {
//            var DeleteTreeControl = this.graph.data.AdditionalParams;
//            if (void 0 != DeleteTreeControl.MaxNumberOfActivities && DeleteTreeControl.MaxNumberOfActivities != -1) {
//                options.activityLimit = DeleteTreeControl.MaxNumberOfActivities;
//            }
//            if (void 0 != DeleteTreeControl.MaxNumberOfTransitions && DeleteTreeControl.MaxNumberOfTransitions != -1) {
//                options.transitionLimit = DeleteTreeControl.MaxNumberOfTransitions;
//            }
//            if (void 0 != DeleteTreeControl.MaxNumberOfCommands && DeleteTreeControl.MaxNumberOfCommands != -1) {
//                options.commandLimit = DeleteTreeControl.MaxNumberOfCommands;
//            }
//        }
//        return options;
//    };
//    /**
//     * @return {undefined}
//     */
//    this.ToolbarMovePress = function () {
//        var e = this.GetWorkflowDesignerBackground();
//        e.setMoveModeEnabled(!e._movemodeenabled);
//        var self = this.GetItemByCode("move");
//        if (e._movemodeenabled) {
//            /** @type {boolean} */
//            self.active = true;
//            if (void 0 != self.bg) {
//                self.bg.setFill(WorkflowDesignerConstants.ButtonActive);
//            }
//        } else {
//            self.active = void 0;
//            if (void 0 != self.bg) {
//                self.bg.setFill("");
//            }
//        }
//        this.Layer.batchDraw();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.ToolbarExInfoPress = function () {
//        var self = this.GetItemByCode("exinfo");
//        if (this.exinfo) {
//            self.active = void 0;
//            if (void 0 != self.bg) {
//                self.bg.setFill("");
//            }
//            /** @type {boolean} */
//            this.exinfo = false;
//            this.graph.setParam("exinfo", false);
//        } else {
//            /** @type {boolean} */
//            self.active = true;
//            if (void 0 != self.bg) {
//                self.bg.setFill(WorkflowDesignerConstants.ButtonActive);
//            }
//            /** @type {boolean} */
//            this.exinfo = true;
//            this.graph.setParam("exinfo", true);
//        }
//        if (void 0 != this.graph.Draw) {
//            this.graph.Draw(this.graph.data);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.ToolbarInlinePress = function () {
//        if (this.graph.data.CanBeInlined) {
//            this.graph.setInlinedFlag(false);
//        } else {
//            this.graph.setInlinedFlag(true);
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.onChangeScheme = function () {
//        var that = this.GetItemByCode("inline");
//        if (void 0 != that && void 0 != that.cImageToolbar) {
//            var MuteButtonSkin = this.graph.data.CanBeInlined ? that.img2 : that.img;
//            WorkflowDesignerCommon.loadImage(MuteButtonSkin, function (posterUrl, editor) {
//                editor.container.image(posterUrl);
//                if (!this.Layer.destroyed) {
//                    this.Layer.batchDraw();
//                }
//            }.bind($), {
//                    container: that.cImageToolbar
//                });
//        }
//    };
//    /**
//     * @return {?}
//     */
//    this.GetWorkflowDesignerBackground = function () {
//        return this.graph.GetComponentByType("WorkflowDesignerBackground");
//    };
//    /**
//     * @return {undefined}
//     */
//    this.CreateActivity = function () {
//        this.graph.GetComponentByType("WorkflowDesignerActivityManager").CreateNewActivity();
//        this.graph.redrawAll();
//        this.graph.StoreGraphData();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.CreateInline = function () {
//        this.graph.GetComponentByType("WorkflowDesignerActivityManager").CreateNewInline();
//        this.graph.redrawAll();
//        this.graph.StoreGraphData();
//    };
//    /**
//     * @return {undefined}
//     */
//    this.AutoArrangement = function () {
//        if (0 != $.graph.data.Activities.length) {
//            /** @type {!Array} */
//            var row = new Array;
//            /** @type {!Array} */
//            var a = new Array;
//            if ($.graph.data.Activities.forEach(function (ol) {
//                if (void 0 == ol.DesignerSettings || ol.DesignerSettings.Group == $.graph.Settings.group || void 0 != ol.DesignerSettings.InlineElementSettings && ol.DesignerSettings.InlineElementSettings.Group == $.graph.Settings.group) {
//                    row.push(ol);
//                    if (ol.IsInitial) {
//                        a.push(ol);
//                    }
//                }
//            }), 0 != row.length) {
//                row.forEach(function (note) {
//                    if (!note.IsInitial) {
//                        /** @type {boolean} */
//                        var n = true;
//                        /** @type {number} */
//                        var i = 0;
//                        for (; i < $.graph.data.Transitions.length; i++) {
//                            var body = $.graph.data.Transitions[i];
//                            if ("Direct" == body.Classifier && body.To == note) {
//                                /** @type {boolean} */
//                                n = false;
//                                break;
//                            }
//                        }
//                        if (n) {
//                            a.push(note);
//                        }
//                    }
//                });
//                if (0 == a.length) {
//                    a.push(row[0]);
//                }
//                var where = {
//                    x: 80,
//                    y: 120
//                };
//                var b = {
//                    x: 300,
//                    y: 140
//                };
//                /** @type {!Array} */
//                var userList = Array();
//                /**
//                 * @param {!Array} t
//                 * @param {!Object} data
//                 * @param {boolean} ttl
//                 * @return {?}
//                 */
//                var add = function (t, data, ttl) {
//                    var a = {
//                        x: data.x,
//                        y: data.y
//                    };
//                    if (!ttl) {
//                        a.x += b.x;
//                    }
//                    /** @type {!Array} */
//                    var l = new Array;
//                    /** @type {number} */
//                    var k = 0;
//                    for (; k < t.length; k++) {
//                        var v = t[k];
//                        if (void 0 == v.DesignerSettings) {
//                            v.DesignerSettings = {};
//                        }
//                        if (!(!ttl && $.inArray(v, userList) >= 0)) {
//                            if (v.DesignerSettings.Group == $.graph.Settings.group) {
//                                v.DesignerSettings.X = a.x;
//                            } else {
//                                if (void 0 != v.DesignerSettings.InlineElementSettings && v.DesignerSettings.InlineElementSettings.Group == $.graph.Settings.group) {
//                                    v.DesignerSettings.InlineElementSettings.X = a.x;
//                                }
//                            }
//                            userList.push(v);
//                            l.push(v);
//                        }
//                    }
//                    /** @type {number} */
//                    k = 0;
//                    for (; k < l.length; k++) {
//                        v = l[k];
//                        if (k > 0) {
//                            a.y += b.y;
//                        }
//                        /** @type {!Array} */
//                        var h = new Array;
//                        $.graph.data.Transitions.forEach(function (opts) {
//                            if ("Direct" == opts.Classifier && opts.From == v) {
//                                h.push(opts.To);
//                            }
//                        });
//                        if (v.DesignerSettings.Group == $.graph.Settings.group) {
//                            v.DesignerSettings.Y = a.y;
//                        } else {
//                            if (void 0 != v.DesignerSettings.InlineElementSettings && v.DesignerSettings.InlineElementSettings.Group == $.graph.Settings.group) {
//                                v.DesignerSettings.InlineElementSettings.Y = a.y;
//                            }
//                        }
//                        var t = add(h, {
//                            x: a.x,
//                            y: a.y
//                        });
//                        a.y = t.y;
//                    }
//                    return {
//                        x: a.x,
//                        y: a.y
//                    };
//                };
//                add(a, where, true);
//                $.graph.data.Transitions.forEach(function (opts) {
//                    if (void 0 == opts.DesignerSettings) {
//                        opts.DesignerSettings = {};
//                    }
//                    if (!(void 0 != opts.From.DesignerSettings && void 0 != opts.To.DesignerSettings && opts.From.DesignerSettings.Group != $.graph.Settings.group && opts.To.DesignerSettings.Group != $.graph.Settings.group)) {
//                        opts.DesignerSettings.X = void 0;
//                        opts.DesignerSettings.Y = void 0;
//                    }
//                });
//                $.graph.Draw($.graph.data);
//                this.graph.StoreGraphData();
//            }
//        }
//    };
//    /**
//     * @param {string} fileName
//     * @param {!NodeList} source
//     * @param {string} field
//     * @return {?}
//     */
//    this.CopySelectedGenUniqueValue = function (fileName, source, field) {
//        /** @type {string} */
//        var tempName = fileName;
//        /** @type {number} */
//        var i = 1;
//        for (; true; i++) {
//            /** @type {boolean} */
//            var o = false;
//            /** @type {number} */
//            var index = 0;
//            for (; index < source.length; index++) {
//                if (source[index][field] == tempName) {
//                    /** @type {boolean} */
//                    o = true;
//                    break;
//                }
//            }
//            if (!o) {
//                break;
//            }
//            /** @type {string} */
//            tempName = fileName + "_" + i;
//        }
//        return tempName;
//    };
//    /**
//     * @return {undefined}
//     */
//    this.CopySelected = function () {
//        var list = this.graph.GetComponentByType("WorkflowDesignerActivityManager");
//        var c = this.graph.GetComponentByType("WorkflowDesignerTransitionManager");
//        var deprecatedStylingMethods = list.GetSelected();
//        var metasNeeded = c.GetSelected();
//        if (0 != deprecatedStylingMethods.length || 0 != metasNeeded.length) {
//            /** @type {!Array} */
//            var o = [];
//            deprecatedStylingMethods.forEach(function (e) {
//                if (!e.group) {
//                    /** @type {*} */
//                    var value = JSON.parse(JSON.stringify(e.item));
//                    value.DesignerSettings.Y += 160;
//                    value.Name = $.CopySelectedGenUniqueValue(value.Name, $.graph.data.Activities, "Name");
//                    o.push({
//                        oldItem: e.item,
//                        newItem: value
//                    });
//                    $.graph.data.Activities.push(value);
//                }
//            });
//            /** @type {!Array} */
//            var failureRecaps = [];
//            metasNeeded.forEach(function (event) {
//                var from = event.item.From;
//                var number = event.item.To;
//                /** @type {number} */
//                var oo = 0;
//                for (; oo < o.length; oo++) {
//                    if (from == o[oo].oldItem) {
//                        from = o[oo].newItem;
//                    }
//                    if (number == o[oo].oldItem) {
//                        number = o[oo].newItem;
//                    }
//                }
//                /** @type {*} */
//                var data = JSON.parse(JSON.stringify(event.item));
//                data.Name = $.CopySelectedGenUniqueValue(data.Name, $.graph.data.Transitions, "Name");
//                data.From = from;
//                data.To = number;
//                failureRecaps.push({
//                    oldItem: event.item,
//                    newItem: data
//                });
//                $.graph.data.Transitions.push(data);
//            });
//            WorkflowDesignerCommon.DataCorrection($.graph.data);
//            $.graph.Draw($.graph.data);
//            o.forEach(function (a) {
//                list.SelectByItem(a.newItem);
//            });
//            failureRecaps.forEach(function (track) {
//                c.SelectByItem(track.newItem);
//            });
//            this.graph.StoreGraphData();
//            this.graph.onSelectionChanged(true);
//        }
//    };
//    /**
//     * @return {?}
//     */
//    this.EditLocalization = function () {
//        var $ = this;
//        var filter = WorkflowDesignerConstants.LocalizationFormLabel;
//        var data = {
//            type: "table",
//            title: filter.Title,
//            width: "800px",
//            data: this.graph.data.Localization,
//            datadefault: {
//                Culture: WorkflowDesignerConstants.DefaultCulture,
//                Type: "State"
//            },
//            elements: [{
//                name: filter.ObjectName,
//                field: "ObjectName",
//                type: "input"
//            }, {
//                name: filter.Type,
//                field: "Type",
//                type: "select",
//                displayfield: "Name",
//                valuefield: "Value",
//                datasource: [{
//                    Name: filter.Types[0],
//                    Value: "Command"
//                }, {
//                    Name: filter.Types[1],
//                    Value: "State"
//                }, {
//                    Name: filter.Types[2],
//                    Value: "Parameter"
//                }]
//            }, {
//                name: filter.IsDefault,
//                field: "IsDefault",
//                type: "checkbox"
//            }, {
//                name: filter.Culture,
//                field: "Culture",
//                type: "input"
//            }, {
//                name: filter.Value,
//                field: "Value",
//                type: "input"
//            }],
//            readonly: this.graph.Settings.readonly,
//            saveFunc: function (name) {
//                $.SyncTable($.graph.data.Localization, name, data);
//                $.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.localization) {
//            return void this.graph.Settings.forms.localization(data);
//        }
//        var scope = new WorkflowDesignerForm(data);
//        /**
//         * @param {(Node|string)} el
//         * @param {?} t
//         * @return {?}
//         */
//        var build = function (el, t) {
//            return !(!scope.CheckRequired(el, ["ObjectName", "Type", "Culture", "Value"], WorkflowDesignerConstants.FieldIsRequired) || !scope.CheckUnique(el, ["ObjectName", "Type", "Culture"], WorkflowDesignerConstants.FieldMustBeUnique)) && (scope.ClearTempField(el), scope.parameters.saveFunc(el), true);
//        };
//        scope.showModal(build);
//    };
//    /**
//     * @return {?}
//     */
//    this.EditParameters = function () {
//        var layer = WorkflowDesignerConstants.ParameterFormLabel;
//        var $scope = this;
//        /**
//         * @param {!Object} _
//         * @param {string} e
//         * @param {string} id
//         * @return {undefined}
//         */
//        var prepare_draw = function (_, e, id) {
//            var title = void 0;
//            var crossfilterable_layers = _.getEditData(_.parameters);
//            /** @type {number} */
//            var layer_i = 0;
//            for (; layer_i < crossfilterable_layers.length; layer_i++) {
//                var layer = crossfilterable_layers[layer_i];
//                if (layer.control_InitialValue.id === e.id) {
//                    title = layer.Type;
//                    break;
//                }
//            }
//            if (void 0 != title) {
//                $scope.graph.designer.getemptytype(encodeURIComponent(title), id);
//            }
//        };
//        var params = {
//            type: "table",
//            title: layer.Title,
//            data: this.graph.data.Parameters,
//            datadefault: {
//                Purpose: "Persistence"
//            },
//            keyproperty: "Name",
//            elements: [{
//                name: layer.Name,
//                field: "Name",
//                type: "input"
//            }, {
//                name: layer.Type,
//                field: "Type",
//                type: "input",
//                datasource: this.graph.getTypeNames(),
//                width: "35%"
//            }, {
//                name: layer.Purpose,
//                field: "Purpose",
//                type: "select",
//                displayfield: "Name",
//                datasource: [{
//                    Name: "Temporary"
//                }, {
//                    Name: "Persistence"
//                }, {
//                    Name: "System"
//                }]
//            }, {
//                name: layer.InitialValue,
//                field: "InitialValue",
//                type: "json",
//                width: "25%",
//                getemptytype: prepare_draw
//            }],
//            top: $('<div style="float: right; margin-bottom: 15px;"></div>'),
//            beforerowadded: function (media) {
//                if (void 0 != media.Type) {
//                    /** @type {string} */
//                    media.Type = decodeURIComponent(media.Type);
//                }
//            },
//            onrowadded: function (e) {
//                var items = e.find("[name=Purpose]");
//                var foundItem = items[0];
//                items.change(function () {
//                    callback(e);
//                });
//                if (void 0 != foundItem && "System" !== foundItem.value) {
//                    e.find('[name=Purpose] option[value="System"]').remove();
//                }
//                callback(e);
//            },
//            graph: $scope.graph,
//            readonly: this.graph.Settings.readonly,
//            saveFunc: function (name) {
//                $scope.SyncTable($scope.graph.data.Parameters, name, params);
//                /** @type {number} */
//                var i = 0;
//                for (; i < $scope.graph.data.Parameters.length; i++) {
//                    var t = $scope.graph.data.Parameters[i].Type;
//                    /** @type {string} */
//                    $scope.graph.data.Parameters[i].Type = encodeURIComponent(t);
//                }
//                $scope.graph.Draw($scope.graph.data);
//                $scope.graph.StoreGraphData();
//            },
//            cancelFunc: function (a22) {
//                /** @type {number} */
//                var i = 0;
//                for (; i < $scope.graph.data.Parameters.length; i++) {
//                    var t = $scope.graph.data.Parameters[i].Type;
//                    /** @type {string} */
//                    $scope.graph.data.Parameters[i].Type = encodeURIComponent(t);
//                }
//            }
//        };
//        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.parameters) {
//            return void this.graph.Settings.forms.parameters(params);
//        }
//        /**
//         * @return {undefined}
//         */
//        var exit = function () {
//            var kvDocsRes = $(self.window.find(".WorkflowDesignerTable"))[0];
//            /** @type {number} */
//            var i = 0;
//            for (; i < kvDocsRes.rows.length; i++) {
//                var searchContactPanel = $(kvDocsRes.rows[i]);
//                var tblr = searchContactPanel.find("[name=Purpose]")[0];
//                if (void 0 != tblr && "System" === tblr.value) {
//                    searchContactPanel.hide();
//                }
//            }
//        };
//        /**
//         * @return {undefined}
//         */
//        var start = function () {
//            var kvDocsRes = $(self.window.find(".WorkflowDesignerTable"))[0];
//            /** @type {number} */
//            var i = 0;
//            for (; i < kvDocsRes.rows.length; i++) {
//                var searchContactPanel = $(kvDocsRes.rows[i]);
//                var tblr = searchContactPanel.find("[name=Purpose]")[0];
//                if (void 0 != tblr && "System" === tblr.value) {
//                    searchContactPanel.show();
//                }
//            }
//        };
//        /**
//         * @param {!Object} o
//         * @return {undefined}
//         */
//        var callback = function (o) {
//            var tblr = o.find("[name=Purpose]")[0];
//            if (void 0 != tblr && "System" === tblr.value) {
//                o.find(":input").attr("readonly", true);
//                o.find("[name=Purpose]").attr("disabled", true);
//                o.find("[name=InitialValue]").val("");
//                o.find(".btnDelete").remove();
//            } else {
//                if (void 0 != tblr && "Temporary" === tblr.value) {
//                    o.find("[name=InitialValue]").attr("readonly", true);
//                    o.find("[name=InitialValue]").val("");
//                } else {
//                    if (void 0 != tblr && "Persistence" === tblr.value) {
//                        o.find("[name=InitialValue]").attr("readonly", false);
//                    }
//                }
//            }
//        };
//        /**
//         * @return {undefined}
//         */
//        var constructFrames = function () {
//            var kvDocsRes = $(self.window.find(".WorkflowDesignerTable"))[0];
//            /** @type {number} */
//            var i = 0;
//            for (; i < kvDocsRes.rows.length; i++) {
//                callback($(kvDocsRes.rows[i]));
//            }
//        };
//        /**
//         * @param {(Node|string)} name
//         * @param {?} varDef
//         * @return {?}
//         */
//        var validate = function (name, varDef) {
//            return !(!self.CheckRequired(name, ["Name", "Type", "Purpose", "Parameter"], WorkflowDesignerConstants.FieldIsRequired) || !self.CheckUnique(name, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (self.ClearTempField(name), self.parameters.saveFunc(name), true);
//        };
//        /**
//         * @param {?} e
//         * @param {?} enabled
//         * @return {undefined}
//         */
//        var shown = function (e, enabled) {
//            self.parameters.cancelFunc(e);
//        };
//        var self = new WorkflowDesignerForm(params);
//        var linkCont = $('<div class="ui slider checkbox"></div>');
//        var input_upload_type_file = $('<input type="checkbox" />');
//        input_upload_type_file.click(function (canCreateDiscussions, isSlidingUp) {
//            if (input_upload_type_file[0].checked) {
//                start();
//            } else {
//                exit();
//            }
//            WorkflowDesignerCommon.modal(self.window, "refresh");
//        });
//        linkCont.append(input_upload_type_file);
//        linkCont.append("<label>" + WorkflowDesignerConstants.ParameterFormLabel.ShowSystemParameters + "</label>");
//        params.top.append(linkCont);
//        self.showModal(validate, false, shown);
//        exit();
//        constructFrames();
//        WorkflowDesignerCommon.modal(self.window, "refresh");
//    };
//    /**
//     * @param {!Array} groups
//     * @param {!NodeList} items
//     * @return {?}
//     */
//    this.getGlobalCodeActionsForDelete = function (groups, items) {
//        /** @type {!Array} */
//        var result = [];
//        return groups.forEach(function (track) {
//            if (track.IsGlobal) {
//                /** @type {boolean} */
//                var a = false;
//                /** @type {number} */
//                var i = 0;
//                for (; i < groups.length; i++) {
//                    if (track.Name == groups[i].Name && track.IsGlobal != groups[i].IsGlobal) {
//                        /** @type {boolean} */
//                        a = true;
//                        break;
//                    }
//                }
//                /** @type {boolean} */
//                var r = false;
//                /** @type {number} */
//                i = 0;
//                for (; i < items.length; i++) {
//                    if (1 == a) {
//                        if (track.Name == items[i].Name && items[i].IsGlobal) {
//                            /** @type {boolean} */
//                            r = true;
//                            break;
//                        }
//                    } else {
//                        if (track.Name == items[i].Name) {
//                            /** @type {boolean} */
//                            r = true;
//                            break;
//                        }
//                    }
//                }
//                if (0 == r) {
//                    result.push(track.Name);
//                }
//            }
//        }), result;
//    };
//    /**
//     * @return {?}
//     */
//    this.EditProcessInfo = function () {
//        /**
//         * @param {!Object} f
//         * @return {?}
//         */
//        function callback(f) {
//            return $.extend({
//                type: "table",
//                elements: [{
//                    name: e.ParametersNameLabel,
//                    field: "Name",
//                    type: "input"
//                }, {
//                    name: e.ParametersValueLabel,
//                    field: "Value",
//                    type: "json"
//                }]
//            }, f);
//        }
//        /**
//         * @param {!Array} shape
//         * @param {!Array} p
//         * @param {?} cache
//         * @return {undefined}
//         */
//        function get(shape, p, cache) {
//            $.each(cache, function (i, outline) {
//                if ("System" === outline.Purpose) {
//                    shape.push(outline);
//                } else {
//                    p.push(outline);
//                }
//            });
//        }
//        /**
//         * @return {?}
//         */
//        function setSize() {
//            return m ? {
//                type: "accordion",
//                data: me.systemParameters,
//                elements: [callback({
//                    name: e.SystemParametersTabName
//                })]
//            } : callback({
//                data: me.systemParameters,
//                name: e.SystemParametersTabName
//            });
//        }
//        /**
//         * @return {?}
//         */
//        function _destroy() {
//            return m ? {
//                type: "accordion",
//                name: e.ProcessParametersTabName,
//                data: me.processParameters,
//                tabKey: "ProcessParameters",
//                elements: [callback(null)]
//            } : callback({
//                data: me.processParameters,
//                name: e.ProcessParametersTabName,
//                tabKey: "ProcessParameters"
//            });
//        }
//        /**
//         * @param {string} i
//         * @param {string} options
//         * @param {string} name
//         * @param {!Array} n
//         * @return {?}
//         */
//        function select(i, options, name, n) {
//            /**
//             * @param {!Array} arr
//             * @param {!Object} post
//             * @return {?}
//             */
//            function filter(arr, post) {
//                return $.extend({
//                    type: "table",
//                    elements: arr
//                }, post);
//            }
//            if (m) {
//                var r = {};
//                return r[e.RootProcess] = data.graph.data.AdditionalParams[i], $.each(data.graph.data.AdditionalParams.SubprocessInfo, function (axis, data) {
//                    r[axis] = data[i];
//                }), {
//                        type: "accordion",
//                        name: options,
//                        data: r,
//                        tabKey: name,
//                        elements: [filter(n, null)]
//                    };
//            }
//            return filter(n, {
//                data: data.graph.data.AdditionalParams[i],
//                name: options,
//                tabKey: name
//            });
//        }
//        var e = WorkflowDesignerConstants.ProcessInfoFormLabel;
//        var m = this.graph.data.AdditionalParams.SubprocessCurrentActivities.length;
//        var me = {
//            systemParameters: {},
//            processParameters: {}
//        };
//        if (m) {
//            /** @type {!Array} */
//            me.systemParameters[e.RootProcess] = new Array;
//            /** @type {!Array} */
//            me.processParameters[e.RootProcess] = new Array;
//            get(me.systemParameters[e.RootProcess], me.processParameters[e.RootProcess], this.graph.data.AdditionalParams.ProcessParameters);
//            $.each(this.graph.data.AdditionalParams.SubprocessInfo, function (i, state) {
//                /** @type {!Array} */
//                me.systemParameters[i] = new Array;
//                /** @type {!Array} */
//                me.processParameters[i] = new Array;
//                get(me.systemParameters[i], me.processParameters[i], state.ProcessParameters);
//            });
//        } else {
//            /** @type {!Array} */
//            me.systemParameters = new Array;
//            /** @type {!Array} */
//            me.processParameters = new Array;
//            get(me.systemParameters, me.processParameters, this.graph.data.AdditionalParams.ProcessParameters);
//        }
//        var data = this;
//        var result = {
//            type: "tabs",
//            title: e.Title,
//            width: "95%",
//            readonly: true,
//            graph: data.graph,
//            elements: [{
//                name: e.SystemParametersTabName,
//                type: "form",
//                tabKey: "SystemParameters",
//                data: this.graph.data.AdditionalParams,
//                elements: [{
//                    name: e.IsObsolete,
//                    field: "IsObsolete",
//                    type: "checkbox"
//                }, {
//                    name: e.DefiningParameters,
//                    field: "DefiningParameters",
//                    type: "textarea"
//                }, setSize()]
//            }, _destroy(), select("ProcessHistory", e.HistoryTabName, "History", [{
//                name: e.HistoryTabFromLabel,
//                field: "FromActivityName",
//                type: "input"
//            }, {
//                name: e.HistoryTabFromStateLabel,
//                field: "FromStateName",
//                type: "input"
//            }, {
//                name: e.HistoryTabToLabel,
//                field: "ToActivityName",
//                type: "input"
//            }, {
//                name: e.HistoryTabToStateLabel,
//                field: "ToStateName",
//                type: "input"
//            }, {
//                name: e.HistoryTabExecutorIdLabel,
//                field: "ExecutorIdentityId",
//                type: "input"
//            }, {
//                name: e.HistoryTabActorIdLabel,
//                field: "ActorIdentityId",
//                type: "input"
//            }, {
//                name: e.HistoryTabTimeLabel,
//                field: "TransitionTime",
//                type: "input"
//            }, {
//                name: e.HistoryTabTriggerNameLabel,
//                field: "TriggerName",
//                type: "input"
//            }, {
//                name: e.HistoryTabTransitionClassifierNameLabel,
//                field: "TransitionClassifier",
//                type: "transitionclassifier"
//            }]), select("ProcessTimers", e.TimersTabName, "Timers", [{
//                name: e.TimersTabNameLabel,
//                field: "Name",
//                type: "input"
//            }, {
//                name: e.TimersTabValueLabel,
//                field: "NextExecutionDateTime",
//                type: "input"
//            }])]
//        };
//        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.processinfo) {
//            return void this.graph.Settings.forms.processinfo(result);
//        }
//        var popup = new WorkflowDesignerForm(result);
//        /**
//         * @param {?} data
//         * @param {?} instance
//         * @return {?}
//         */
//        var id = function (data, instance) {
//            return true;
//        };
//        popup.showModal(id);
//    };
//    this.Items = {
//        First: [],
//        Second: [],
//        Third: []
//    };
//    /** @type {!Array} */
//    this.SideItems = [];
//    /**
//     * @return {undefined}
//     */
//    this.InitItems = function () {
//        var path = this.graph.Settings.imagefolder;
//        if (!this.graph.Settings.readonly) {
//            this.Items.First.push({
//                code: "undo",
//                title: WorkflowDesignerConstants.ToolbarLabel.Undo,
//                img: path + "wfe.undo.png",
//                click: function () {
//                    $.graph.Undo();
//                }
//            });
//            this.Items.First.push({
//                code: "redo",
//                title: WorkflowDesignerConstants.ToolbarLabel.Redo,
//                img: path + "wfe.redo.png",
//                click: function () {
//                    $.graph.Redo();
//                }
//            });
//            this.Items.First.push({
//                separator: true
//            });
//            this.Items.First.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.CreateActivity,
//                img: path + "wfe.add.png",
//                click: function () {
//                    $.CreateActivity();
//                }
//            });
//            this.Items.First.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.CreateInline,
//                img: path + "wfe.inline.png",
//                click: function () {
//                    $.CreateInline();
//                }
//            });
//            this.Items.First.push({
//                code: "copy",
//                disabled: true,
//                title: WorkflowDesignerConstants.ToolbarLabel.CopySelected,
//                img: path + "wfe.copy.png",
//                click: function () {
//                    $.CopySelected();
//                }
//            });
//            this.Items.First.push({
//                code: "delete",
//                disabled: true,
//                title: WorkflowDesignerConstants.ToolbarLabel.Delete,
//                img: path + "wfe.remove.png",
//                click: function () {
//                    $.graph.DeleteSelected();
//                }
//            });
//        }
//        if (!(this.graph.Settings.hideElementsToolbar || this.graph.Settings.notshowwindows)) {
//            this.Items.Second.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.Actors,
//                img: path + "wfe.actors.png",
//                click: function () {
//                    WorkflowDesignerWindows.EditActors($);
//                }
//            });
//            this.Items.Second.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.Commands,
//                img: path + "wfe.commands.png",
//                click: function () {
//                    WorkflowDesignerWindows.EditCommands($);
//                }
//            });
//            this.Items.Second.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.Timers,
//                img: path + "wfe.timers.png",
//                click: function () {
//                    WorkflowDesignerWindows.EditTimer($);
//                }
//            });
//            if (this.graph.Settings.disableCodeActions !== true) {
//                this.Items.Second.push({
//                    title: WorkflowDesignerConstants.ToolbarLabel.CodeActions,
//                    img: path + "wfe.codeactions.png",
//                    click: function () {
//                        WorkflowDesignerWindows.EditCodeActions($);
//                    }
//                });
//            }
//            this.Items.Second.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.Parameters,
//                img: path + "wfe.parameters.png",
//                click: function () {
//                    $.EditParameters();
//                }
//            });
//            this.Items.Second.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.Localization,
//                img: path + "wfe.localization.png",
//                click: function () {
//                    $.EditLocalization();
//                }
//            });
//            if (this.graph.designer && this.graph.designer.data && this.graph.designer.data.AdditionalParams && this.graph.designer.data.AdditionalParams.ProcessParameters) {
//                this.Items.Second.push({
//                    title: WorkflowDesignerConstants.ToolbarLabel.ProcessInfo,
//                    img: path + "wfe.context.png",
//                    click: function () {
//                        $.EditProcessInfo();
//                    }
//                });
//            }
//        }
//        if (!this.graph.Settings.readonly) {
//            this.Items.Second.push({
//                code: "inline",
//                title: WorkflowDesignerConstants.ToolbarLabel.Inline,
//                img: path + "wfe.inline.off.png",
//                img2: path + "wfe.inline.on.png",
//                click: function () {
//                    $.ToolbarInlinePress();
//                }
//            });
//        }
//        if (void 0 != this.graph.Settings.apiurl) {
//            this.Items.Third.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.Refresh,
//                img: path + "wfe.refresh.png",
//                click: function () {
//                    $.graph.Refresh();
//                }
//            });
//        }
//        if (!this.graph.Settings.disableobjectmovements) {
//            this.Items.Third.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.AutoArrangement,
//                img: path + "wfe.autoarrangment.png",
//                click: function () {
//                    $.AutoArrangement();
//                }
//            });
//        }
//        if (this.Items.Third.length > 0) {
//            this.Items.Third.push({
//                separator: true
//            });
//        }
//        this.Items.Third.push({
//            code: "exinfo",
//            title: WorkflowDesignerConstants.ToolbarLabel.Info,
//            img: path + "wfe.information.png",
//            click: function () {
//                $.ToolbarExInfoPress();
//            }
//        });
//        if (!this.graph.Settings.hideLegend) {
//            this.Items.Third.push({
//                title: WorkflowDesignerConstants.ToolbarLabel.Legend,
//                img: path + "wfe.help.png",
//                click: function () {
//                    $.ShowLegend();
//                }
//            });
//        }
//        /** @type {!Array} */
//        this.SideItems = [{
//            code: "move",
//            title: WorkflowDesignerConstants.ToolbarLabel.Move,
//            img: path + "wfe.move.png",
//            click: function () {
//                $.ToolbarMovePress();
//            }
//        }, {
//            separator: true
//        }];
//        if (void 0 == this.graph.Settings.group) {
//            this.SideItems.push({
//                code: "fullscreen",
//                title: WorkflowDesignerConstants.ToolbarLabel.FullScreen,
//                img: path + "wfe.fullscreen.png",
//                click: function () {
//                    $.graph.onFullScreenClick();
//                }
//            });
//        }
//        this.SideItems.push({
//            title: WorkflowDesignerConstants.ToolbarLabel.ZoomPositionDefault,
//            img: path + "wfe.defaultzoom.png",
//            click: function () {
//                $.graph.GraphLayerScaleNorm();
//            }
//        });
//        this.SideItems.push({
//            title: WorkflowDesignerConstants.ToolbarLabel.ZoomIn,
//            img: path + "wfe.zoomin.png",
//            click: function () {
//                $.graph.GraphLayerScale(.1);
//            }
//        });
//        this.SideItems.push({
//            title: WorkflowDesignerConstants.ToolbarLabel.ZoomOut,
//            img: path + "wfe.zoomout.png",
//            click: function () {
//                $.graph.GraphLayerScale(-.1);
//            }
//        });
//        $.graph.Stage.getContent().addEventListener("wheel", function (event) {
//            var des = $.GetWorkflowDesignerBackground();
//            var zoom = des.BackgroundLayer.scaleX();
//            var centerPx = {
//                x: event.offsetX / zoom - des.RectBG.x(),
//                y: event.offsetY / zoom - des.RectBG.y()
//            };
//            /** @type {number} */
//            var S = event.deltaY > 0 ? -.1 : .1;
//            var scale = zoom + S;
//            var out = {
//                x: centerPx.x - centerPx.x / scale,
//                y: centerPx.y - centerPx.y / scale
//            };
//            var currentPoint = {
//                x: ((1 - zoom) * event.offsetX / zoom - des.RectBG.x()) / scale,
//                y: ((1 - zoom) * event.offsetY / zoom - des.RectBG.y()) / scale
//            };
//            out.x += currentPoint.x;
//            out.y += currentPoint.y;
//            $.graph.GraphLayerScale(S, out);
//        });
//    };
//    /**
//     * @param {undefined} tResult
//     * @return {undefined}
//     */
//    this.LayerScaleNorm = function (tResult) {
//        this.updateScaleText(tResult);
//    };
//    /**
//     * @param {!Object} context
//     * @return {undefined}
//     */
//    this.LayerScale = function (context) {
//        var scale = context.scale;
//        var delta = context.delta;
//        this.updateScaleText(scale + delta);
//    };
//    /**
//     * @param {number} t
//     * @return {undefined}
//     */
//    this.updateScaleText = function (t) {
//        if (void 0 != $.graph._bg) {
//            this.scaleText.text(Math.floor(100 * t) + "%");
//        }
//    };
//    /**
//     * @param {string} name
//     * @return {?}
//     */
//    this.GetItemByCode = function (name) {
//        var i;
//        for (i in this.Items) {
//            /** @type {number} */
//            var key = 0;
//            for (; key < this.Items[i].length; key++) {
//                var svc = this.Items[i][key];
//                if (svc.code == name) {
//                    return svc;
//                }
//            }
//        }
//        /** @type {number} */
//        key = 0;
//        for (; key < this.SideItems.length; key++) {
//            svc = this.SideItems[key];
//            if (svc.code == name) {
//                return svc;
//            }
//        }
//    };
//    /**
//     * @param {!Array} data
//     * @param {!NodeList} value
//     * @param {!Object} options
//     * @return {undefined}
//     */
//    this.SyncTable = function (data, value, options) {
//        if (void 0 == options.keyproperty) {
//            data.splice(0, data.length);
//            /** @type {number} */
//            var i = 0;
//            for (; i < value.length; i++) {
//                var entity = {};
//                options.elements.forEach(function (options) {
//                    entity[options.field] = value[i][options.field];
//                });
//                data.push(entity);
//            }
//        } else {
//            /** @type {number} */
//            i = data.length - 1;
//            for (; i >= 0; i--) {
//                var rows = $.grep(value, function (canCreateDiscussions) {
//                    return data[i][options.keyproperty] == canCreateDiscussions.keyproperty;
//                });
//                if (0 == rows.length) {
//                    data.splice(i, 1);
//                } else {
//                    options.elements.forEach(function (col) {
//                        data[i][col.field] = rows[0][col.field];
//                    });
//                }
//            }
//            /** @type {number} */
//            i = 0;
//            for (; i < value.length; i++) {
//                rows = $.grep(data, function (ghostItem) {
//                    return value[i][options.keyproperty] == ghostItem[options.keyproperty];
//                });
//                if (0 == rows.length) {
//                    entity = {};
//                    options.elements.forEach(function (options) {
//                        entity[options.field] = value[i][options.field];
//                    });
//                    data.push(entity);
//                }
//            }
//        }
//    };
//    /**
//     * @return {?}
//     */
//    this.ShowLegend = function () {
//        if (void 0 != this.graph.Settings.forms && void 0 != this.graph.Settings.forms.legend) {
//            return void this.graph.Settings.forms.legend();
//        }
//        var e = this.graph.Settings.imagefolder;
//        var sparklineElement = $('<image src="' + e + 'wfe.legend.png" height="' + .7 * this.graph.Stage.getHeight() + '"/>');
//        var option = $('<div class="ui modal"></div>').append($('<div class="content" style="text-align: center;"></div>').append(sparklineElement));
//        WorkflowDesignerCommon.modal(option, "show");
//    };
//    /**
//     * @param {?} name
//     * @param {string} disabled
//     * @return {undefined}
//     */
//    this.setItemDisabled = function (name, disabled) {
//        var i;
//        for (i in this.Items) {
//            /** @type {number} */
//            var index = 0;
//            for (; index < this.Items[i].length; index++) {
//                var input = this.Items[i][index];
//                if (input.code == name) {
//                    /** @type {string} */
//                    input.disabled = disabled;
//                    if (void 0 != input.cImageToolbar) {
//                        input.cImageToolbar.opacity(disabled ? .3 : 1);
//                    }
//                    break;
//                }
//            }
//        }
//        /** @type {number} */
//        index = 0;
//        for (; index < this.SideItems.length; index++) {
//            if (this.SideItems[index].code == name) {
//                /** @type {string} */
//                this.SideItems[index].disabled = disabled;
//                if (void 0 != this.Items[index].cImageToolbar) {
//                    this.Items[index].cImageToolbar.opacity(disabled ? .3 : 1);
//                }
//                break;
//            }
//        }
//    };
//    /**
//     * @param {?} name
//     * @param {string} index
//     * @return {undefined}
//     */
//    this.setItemActive = function (name, index) {
//        var i;
//        for (i in this.Items) {
//            /** @type {number} */
//            var j = 0;
//            for (; j < this.Items[i].length; j++) {
//                var s = this.Items[i][j];
//                if (s.code == name) {
//                    /** @type {string} */
//                    s.active = index;
//                    if (void 0 != s.bg) {
//                        s.bg.setFill(index ? WorkflowDesignerConstants.ButtonActive : "");
//                    }
//                    break;
//                }
//            }
//        }
//        /** @type {number} */
//        j = 0;
//        for (; j < this.SideItems.length; j++) {
//            if (this.SideItems[j].code == name) {
//                /** @type {string} */
//                this.SideItems[j].active = index;
//                if (void 0 != this.SideItems[j].bg) {
//                    this.SideItems[j].bg.setFill(index ? WorkflowDesignerConstants.ButtonActive : "");
//                }
//                break;
//            }
//        }
//    };
//    /**
//     * @return {undefined}
//     */
//    this.destroy = function () {
//        /** @type {boolean} */
//        this.Layer.destroyed = true;
//        if (void 0 !== $) {
//            if (void 0 !== $.Layer && null !== $.Layer) {
//                $.Layer.destroy();
//            }
//            $ = void 0;
//        }
//    };
//}
//;

//'use strict';
///**
// * @return {undefined}
// */
//function WorkflowDesignerKeyboard() {
//  /** @type {string} */
//  this.type = "WorkflowDesignerKeyboard";
//  /**
//   * @param {!Object} src
//   * @return {undefined}
//   */
//  this.init = function(src) {
//    /** @type {!Object} */
//    this.graph = src;
//    this.subscribe();
//  };
//  /**
//   * @return {undefined}
//   */
//  this.destroy = function() {
//    this.unsubscribe();
//  };
//  /**
//   * @return {undefined}
//   */
//  this.subscribe = function() {
//    var div = this.graph.container;
//    /** @type {(Element|null)} */
//    var treeBuffObject = document.getElementById(div);
//    /** @type {boolean} */
//    this.ev = false;
//    var e = this;
//    /**
//     * @return {undefined}
//     */
//    treeBuffObject.onmouseover = function() {
//      /** @type {boolean} */
//      e.ev = true;
//    };
//    /**
//     * @return {undefined}
//     */
//    treeBuffObject.onmouseout = function() {
//      /** @type {boolean} */
//      e.ev = false;
//    };
//    /**
//     * @param {!Event} j
//     * @return {undefined}
//     */
//    this._keyProcessing = function(j) {
//      e.keyProcessing(j);
//    };
//    document.addEventListener("keydown", this._keyProcessing, false);
//  };
//  /**
//   * @return {undefined}
//   */
//  this.unsubscribe = function() {
//    var div = this.graph.container;
//    /** @type {(Element|null)} */
//    var treeBuffObject = document.getElementById(div);
//    if (void 0 != treeBuffObject) {
//      treeBuffObject.onmouseover = void 0;
//      treeBuffObject.onmouseout = void 0;
//    }
//    document.removeEventListener("keydown", this._keyProcessing);
//  };
//  /**
//   * @param {!Event} e
//   * @return {?}
//   */
//  this.keyProcessing = function(e) {
//    if (this.ev !== false) {
//      const undefined = e.key;
//      if ("Control" !== undefined) {
//        /** @type {boolean} */
//        var i = false;
//        return e.ctrlKey ? "a" == undefined ? this.graph.SelectAll() : "c" == undefined ? this.toolbarExec("CopySelected") : "e" != undefined || this.graph.Settings.readonly ? "i" == undefined ? this.toolbarExec("ToolbarExInfoPress") : "m" == undefined ? this.toolbarExec("ToolbarMovePress") : "y" != undefined || this.graph.Settings.readonly ? "z" != undefined || this.graph.Settings.readonly ? i = true : this.graph.Undo() : this.graph.Redo() : this.toolbarExec("CreateActivity") : e.altKey && "Enter" == 
//        undefined ? this.graph.onFullScreenClick() : "Delete" != undefined || this.graph.Settings.readonly ? "ArrowUp" == undefined ? this.objectsMove(0, -1) : "ArrowDown" == undefined ? this.objectsMove(0, 1) : "ArrowLeft" == undefined ? this.objectsMove(-1, 0) : "ArrowRight" == undefined ? this.objectsMove(1, 0) : i = true : this.graph.DeleteSelected(), 0 == i ? void e.preventDefault() : void 0;
//      }
//    }
//  };
//  /**
//   * @param {number} pos
//   * @param {number} delta
//   * @return {undefined}
//   */
//  this.objectsMove = function(pos, delta) {
//    var list = this.graph.GetComponentByType("WorkflowDesignerActivityManager");
//    if (void 0 != list) {
//      var scale = this.graph.Settings.DefaultMoveStep;
//      if (0 == list.GetSelected().length) {
//        this.graph.GraphUpdatePosition({
//          x : pos * scale,
//          y : delta * scale
//        });
//      } else {
//        list.ObjectMove({
//          changepos : {
//            x : pos * scale,
//            y : delta * scale
//          }
//        });
//        list.batchDraw();
//      }
//    }
//  };
//  /**
//   * @param {string} wikiId
//   * @return {undefined}
//   */
//  this.toolbarExec = function(wikiId) {
//    var subwikiListsCache = this.graph.GetComponentByType("WorkflowDesignerToolbar");
//    if (void 0 != subwikiListsCache && void 0 != subwikiListsCache[wikiId]) {
//      subwikiListsCache[wikiId]();
//    }
//  };
//}
//;
//'use strict';
///**
// * @param {string} parentForm
// * @return {undefined}
// */
//function ParametersControl(parentForm) {
//    /** @type {string} */
//    this.parentForm = parentForm;
//}
///**
// * @param {string} fn
// * @param {!Object} param
// * @param {boolean} prefix
// * @return {undefined}
// */
//function DefaultValueControl(fn, param, prefix) {
//    /** @type {string} */
//    this.parentForm = fn;
//    /** @type {boolean} */
//    this.prefix = prefix;
//    /** @type {!Object} */
//    this.parameter = param;
//}
///**
// * @param {string} fn
// * @param {!Object} param
// * @param {boolean} prefix
// * @return {undefined}
// */
//function JsonControl(fn, param, prefix) {
//    /** @type {string} */
//    this.parentForm = fn;
//    /** @type {boolean} */
//    this.prefix = prefix;
//    /** @type {!Object} */
//    this.parameter = param;
//}
///**
// * @param {string} value
// * @return {undefined}
// */
//function InputControl(value) {
//    /** @type {string} */
//    this.parentForm = value;
//}
///**
// * @param {?} delegate
// * @return {undefined}
// */
//function CheckboxControl(delegate) {
//    this.parentForm = delegate;
//}
///**
// * @param {?} readOnly
// * @return {undefined}
// */
//function SelectControl(readOnly) {
//    this.parentForm = readOnly;
//}
//var WorkflowDesignerConstants = {
//    ActivityColor: "#ECF0F1",
//    ActivityTextColor: "#2D3436",
//    ActivityInitialColor: "#27AE60",
//    ActivityInitialTextColor: "#FFFFFF",
//    ActivityFinalColor: "#2980B9",
//    ActivityFinalTextColor: "#FFFFFF",
//    ActivityShape: "#CECECE",
//    SelectColor: "#F39C12",
//    SelectTextColor: "#FFFFFF",
//    SelectSubProcessColor: "#e3b015",
//    SelectSubProcessTextColor: "#FFFFFF",
//    ButtonActive: "#D4D8D9",
//    BarColor: "#EDF1F2",
//    BarSeparatorColor: "#D9DEE0",
//    DeleteConfirm: "Are you sure you want to delete selected item(s)?",
//    DeleteConfirmCurrent: "Are you sure you want to delete this item?",
//    FieldIsRequired: "Field is required!",
//    FieldMustBeUnique: "Field must be unique!",
//    ButtonTextDelete: "Delete",
//    ButtonTextCreate: "Create",
//    ButtonTextSave: "Save",
//    ButtonTextYes: "Yes",
//    ButtonTextNo: "No",
//    ButtonTextCancel: "Cancel",
//    ButtonTextClose: "Close",
//    ButtonTextUndo: "Undo",
//    ButtonTextRedo: "Redo",
//    SaveConfirm: "Save changes?",
//    CloseWithoutSaving: "Close without saving?",
//    TransitionAuto: "Auto",
//    DialogConfirmText: "Question",
//    None: "None",
//    Warning: "Warning",
//    InfoBlockLabel: {
//        Activity: "Activities: ",
//        Transition: "Transitions: ",
//        Command: "Commands: "
//    },
//    ActivityNamePrefix: "Activity_",
//    ActivityFormLabel: {
//        Title: "Activity",
//        TitleForInline: "Activity Inline",
//        Name: "Name",
//        State: "State",
//        IsInitial: "Initial",
//        IsFinal: "Final",
//        IsForSetState: "For set state",
//        IsAutoSchemeUpdate: "Auto scheme update",
//        Implementation: "Implementation",
//        PreExecutionImplementation: "PreExecution Implementation",
//        ImpOrder: "Order",
//        ImpAction: "Action",
//        ImpActionParameter: "Action parameter",
//        AlwaysConditionShouldBeSingle: "Always condition should be single",
//        OtherwiseConditionShouldBeSingle: "Otherwise condition should be single",
//        Annotations: "Annotations",
//        AnnotationName: "Name",
//        AnnotationValue: "Value",
//        Scheme: "Inline scheme"
//    },
//    TransitionFormLabel: {
//        Title: "Transition",
//        Name: "Name",
//        From: "From activity",
//        To: "To activity",
//        Classifier: "Classifier",
//        Restrictions: "Restrictions",
//        RestrictionsType: "Type",
//        RestrictionsActor: "Actor",
//        Condition: "Condition",
//        ConditionType: "Type",
//        ConditionAction: "Action",
//        ResultOnPreExecution: "Result on PreExecution",
//        Trigger: "Trigger",
//        TriggerType: "Type",
//        TriggerCommand: "Command",
//        TriggerTimer: "Timer",
//        ConditionActionParameter: "Action parameter",
//        ConditionInversion: "Invert action result",
//        ConditionsConcatenationType: "Conditions concatenation type",
//        AllowConcatenationType: "Concat allow as",
//        RestrictConcatenationType: "Concat restrict as",
//        ConditionsListShouldNotBeEmpty: "Conditions list should not be empty",
//        IsFork: "Is fork",
//        MergeViaSetState: "Merge subprocess via set state",
//        DisableParentStateControl: "Disable parent process control",
//        ShowConcatParameters: "Show concatenation",
//        HideConcatParameters: "Hide concatenation",
//        Annotations: "Annotations",
//        AnnotationName: "Name",
//        AnnotationValue: "Value",
//        InlinedFinalActivityName: "Inlined Final Activity Name"
//    },
//    LocalizationFormLabel: {
//        Title: "Localization",
//        ObjectName: "ObjectName",
//        Type: "Type",
//        IsDefault: "IsDefault",
//        Culture: "Culture",
//        Value: "Value",
//        Types: ["Command", "State", "Parameter"]
//    },
//    TimerFormLabel: {
//        Title: "Timers",
//        Name: "Name",
//        Type: "Type",
//        Value: "Value",
//        Types: ["Command", "State", "Parameter"],
//        NotOverrideIfExists: "Do not override timer if exists"
//    },
//    ParameterFormLabel: {
//        Title: "Parameters",
//        Name: "Name",
//        Type: "Type",
//        Purpose: "Purpose",
//        Value: "Value",
//        InitialValue: "InitialValue",
//        ShowSystemParameters: "Show system parameters"
//    },
//    ActorFormLabel: {
//        Title: "Actors",
//        Name: "Name",
//        Rule: "Rule",
//        Value: "Value"
//    },
//    CommandFormLabel: {
//        Title: "Command",
//        Name: "Name",
//        InputParameters: "Input Parameters",
//        InputParametersName: "Name",
//        InputParametersIsRequired: "Required",
//        InputParametersParameter: "Parameter",
//        InputParametersDefaultValue: "Default"
//    },
//    ProcessInfoFormLabel: {
//        Title: "Additional Parameters",
//        IsObsolete: "IsObsolete",
//        DefiningParameters: "Defining parameters",
//        ProcessParameters: "Process parameters",
//        SystemParametersTabName: "System Parameters",
//        ProcessParametersTabName: "Process Parameters",
//        HistoryTabName: "History",
//        TimersTabName: "Timers",
//        HistoryTabFromLabel: "From",
//        HistoryTabFromStateLabel: "From State",
//        HistoryTabToLabel: "To",
//        HistoryTabToStateLabel: "To State",
//        HistoryTabExecutorIdLabel: "Executor Id",
//        HistoryTabActorIdLabel: "Actor Id",
//        HistoryTabTimeLabel: "Time",
//        HistoryTabTriggerNameLabel: "Trigger Name",
//        HistoryTabTransitionClassifierNameLabel: "",
//        ParametersNameLabel: "Name",
//        ParametersValueLabel: "Value",
//        TimersTabNameLabel: "Name",
//        TimersTabValueLabel: "Value",
//        RootProcess: "Root Process"
//    },
//    CodeActionsFormLabel: {
//        Title: "Code actions",
//        Name: "Name",
//        ActionCode: "Action code",
//        IsGlobal: "Is global",
//        IsAsync: "Async",
//        Type: "Type",
//        GlobalDeleteMessage: "You've deleted the Global CodeAction.<br/><b>Other schemes won't be able to call this CodeAction!</b>",
//        UnGlobalMessage: "You've changed the state of the global flag.<br/>There will be created a Local CodeAction based on this Global CodeAction after saving this scheme.",
//        EditParameters: "Edit parameters",
//        Parameters: "Parameters",
//        Text: "Text",
//        Number: "Number",
//        Checkbox: "Checkbox",
//        Dropdown: "Dropdown",
//        DateTime: "Date/Time",
//        Values: "Values",
//        DropdownName: "Name",
//        DropdownValue: "Value",
//        DropdownShouldContainValues: "Dropdown should contain values",
//        IsRequired: "Required",
//        DefaultValue: "Default value",
//        Json: "Json"
//    },
//    EditParametersFormlabel: {
//        Title: "Edit parameter values",
//        NumberRequired: "Should be a numeric value",
//        DateShouldBeInISOFormat: "Date/Time parameter should be in ISO8601 format",
//        SwitchToJson: "Switch to JSON editor",
//        SwitchToConstructor: "Switch to parameter values editor",
//        InvalidJson: "JSON object is invalid or does not match the model"
//    },
//    ToolbarLabel: {
//        CreateActivity: "Create activity",
//        CreateInline: "Create inline (template)",
//        CopySelected: "Copy selected",
//        Undo: "Undo",
//        Redo: "Redo",
//        Move: "Move",
//        ZoomIn: "Zoom In",
//        ZoomOut: "Zoom Out",
//        ZoomPositionDefault: "Zoom default",
//        FullScreen: "Full Screen",
//        Refresh: "Refresh",
//        AutoArrangement: "Auto arrangement",
//        Actors: "Actors",
//        Commands: "Commands",
//        Parameters: "Parameters",
//        Localization: "Localization",
//        Timers: "Timers",
//        AdditionalParameters: "Additional Parameters",
//        CodeActions: "Code actions",
//        Info: "Extended info",
//        Delete: "Delete",
//        Clone: "Clone",
//        Settings: "Settings",
//        CreateTransition: "Create a transition",
//        CreateActivityTransition: "Create an activity and a transition",
//        Legend: "Legend",
//        ProcessInfo: "Process Info",
//        Inline: "The scheme can be inlined"
//    },
//    ErrorActivityIsInitialCountText: "One element must be marked flag Initial",
//    ErrorActivityIsFinalCountText: "This scheme is Inlined. One or more elements must be marked flag Final",
//    ErrorReadOnlySaveText: "The Designer in ReadOnly mode, you can't save it.",
//    ErrorInvalidObjectsSaveText: function (canCreateDiscussions) {
//        return "Can't save the schema. Those objects are in invalid state: " + canCreateDiscussions;
//    },
//    BrokenReferencesDialogText: "This schema contains references to Actions, Conditions or Rules that aren't defined by this schema or current action providers. Do you want to keep them?",
//    FormMaxHeight: 700,
//    EditCodeSettings: {
//        Height: 600,
//        Width: 1e3,
//        CodeHeight: 390,
//        MessageBoxHeight: 400,
//        MessageBoxWidth: 600,
//        SuccessBoxHeight: 150,
//        SuccessBoxWidth: 300
//    },
//    EditCodeLabel: {
//        Title: "Edit code",
//        EditCodeButton: "Edit code",
//        Usings: "Usings",
//        Compile: "Compile",
//        CompileSucceeded: "Compilation succeeded.",
//        Success: "Success",
//        Error: "Error",
//        OK: "OK",
//        ShowUsings: "Show usings",
//        HideUsings: "Hide usings"
//    },
//    EditJSONSettings: {
//        Height: 600,
//        Width: 1e3,
//        CodeHeight: 480
//    },
//    EditJSONLabel: {
//        Title: "Edit value in JSON",
//        CreateEmptyType: "Create",
//        Format: "Format"
//    },
//    OverviewMap: {
//        show: true,
//        width: 300,
//        height: 150
//    },
//    UndoDepth: 200,
//    DefaultCulture: "en-US"
//};
//var WorkflowDesignerCommon = {
//    modal: function ($el, option) {
//        var pluginName = void 0;
//        if (void 0 != $el.semanticmodal) {
//            /** @type {string} */
//            pluginName = "semanticmodal";
//        } else {
//            if (void 0 != $el.modal) {
//                /** @type {string} */
//                pluginName = "modal";
//            } else {
//                console.error("SemanticUI is not defined!");
//            }
//        }
//        if (void 0 != pluginName) {
//            $el[pluginName](option);
//            if (!(void 0 == option || void 0 == option.onApprove && void 0 == option.onDeny)) {
//                if (void 0 != $el.keyup) {
//                    $el.keyup(function (event) {
//                        if (13 === event.keyCode) {
//                            if (null !== event.originalEvent && void 0 !== event.originalEvent && event.currentTarget !== event.originalEvent.target) {
//                                return;
//                            }
//                            if (void 0 != option.onApprove && 0 != option.onApprove()) {
//                                $el[pluginName]("hide");
//                            }
//                        } else {
//                            if (27 === event.keyCode) {
//                                if (void 0 != option.onDeny) {
//                                    if (0 != option.onDeny()) {
//                                        $el[pluginName]("hide");
//                                    }
//                                } else {
//                                    $el[pluginName]("hide");
//                                }
//                            }
//                        }
//                    });
//                }
//            }
//        }
//    },
//    createArrowByAngle: function (response, t, val, size, color) {
//        return void 0 == color && (color = "red"), new Konva.Wedge({
//            x: response,
//            y: t,
//            radius: size,
//            angle: 40,
//            fill: color,
//            rotation: 180 * val / Math.PI - 200
//        });
//    },
//    updateArrowByAngle: function (me, key, clas, val, r, color) {
//        if (void 0 == color) {
//            /** @type {string} */
//            color = "red";
//        }
//        me.setPosition({
//            x: key,
//            y: clas
//        });
//        me.setRadius(r);
//        me.setFill(color);
//        me.setRotation(180 * val / Math.PI - 200);
//    },
//    createUUID: function () {
//        /** @type {!Array} */
//        var uuid = [];
//        /** @type {string} */
//        var relativeFromCwd = "0123456789abcdef";
//        /** @type {number} */
//        var i = 0;
//        for (; i < 36; i++) {
//            /** @type {string} */
//            uuid[i] = relativeFromCwd.substr(Math.floor(16 * Math.random()), 1);
//        }
//        return uuid[14] = "4", uuid[19] = relativeFromCwd.substr(3 & uuid[19] | 8, 1), uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-", uuid.join("");
//    },
//    DataCorrection: function (data) {
//        if (void 0 == data.AdditionalParams) {
//            data.AdditionalParams = {};
//        }
//        if (void 0 == data.AdditionalParams.Actions) {
//            /** @type {!Array} */
//            data.AdditionalParams.Actions = [];
//        }
//        if (void 0 == data.AdditionalParams.Conditions) {
//            /** @type {!Array} */
//            data.AdditionalParams.Conditions = [];
//        }
//        if (void 0 == data.AdditionalParams.Rules) {
//            /** @type {!Array} */
//            data.AdditionalParams.Rules = [];
//        }
//        /**
//         * @param {number} end
//         * @param {number} value
//         * @param {string} text
//         * @return {?}
//         */
//        var trim = function (end, value, text) {
//            if (void 0 != end && void 0 != value) {
//                var replaceArr = $.grep(value, function (params) {
//                    return end == params[text];
//                });
//                return replaceArr.length > 0 ? replaceArr[0] : void 0;
//            }
//        };
//        data.Transitions.forEach(function (message) {
//            if (void 0 != message.From) {
//                message.From = trim(message.From.Name, data.Activities, "Name");
//            }
//            if (void 0 != message.To) {
//                message.To = trim(message.To.Name, data.Activities, "Name");
//            }
//            if (void 0 != message.Restrictions) {
//                message.Restrictions.forEach(function (message) {
//                    if (message.Actor) {
//                        message.Actor = trim(message.Actor.Name, data.Actors, "Name");
//                    }
//                });
//            }
//            if (void 0 != message.Trigger && void 0 != message.Trigger.Command) {
//                message.Trigger.Command = trim(message.Trigger.Command.Name, data.Commands, "Name");
//                if (!message.Trigger.Command) {
//                    /** @type {null} */
//                    message.Trigger.NameRef = null;
//                }
//            }
//            if (void 0 != message.Trigger && void 0 != message.Trigger.Timer) {
//                message.Trigger.Timer = trim(message.Trigger.Timer.Name, data.Timers, "Name");
//                if (!message.Trigger.Timer) {
//                    /** @type {null} */
//                    message.Trigger.NameRef = null;
//                }
//            }
//        });
//        data.Commands.forEach(function (egProgram) {
//            if (void 0 != egProgram.InputParameters) {
//                egProgram.InputParameters.forEach(function (message) {
//                    message.Parameter = trim(message.Parameter.Name, data.Parameters, "Name");
//                });
//            }
//        });
//    },
//    download: function (fn, data, type) {
//        if (fn && data) {
//            /** @type {!Array} */
//            var n = new Array;
//            data.forEach(function (e) {
//                var t = $('<input type="hidden"/>');
//                t.attr("name", e.name);
//                t.attr("value", e.value);
//                n.push(t);
//            });
//            var a = $('<form action="' + fn + '" method="' + (type || "post") + '"></form>');
//            a.append(n);
//            a.appendTo("body").submit().remove();
//        }
//    },
//    defineLocalStorage: function () {
//        Object.defineProperty(window, "localStorage", new function () {
//            /** @type {!Array} */
//            var args = [];
//            var o = {};
//            Object.defineProperty(o, "getItem", {
//                value: function (v) {
//                    return v ? this[v] : null;
//                },
//                writable: false,
//                configurable: false,
//                enumerable: false
//            });
//            Object.defineProperty(o, "key", {
//                value: function (data) {
//                    return args[data];
//                },
//                writable: false,
//                configurable: false,
//                enumerable: false
//            });
//            Object.defineProperty(o, "setItem", {
//                value: function (data, module) {
//                    if (data) {
//                        /** @type {string} */
//                        document.cookie = escape(data) + "=" + escape(module) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/";
//                    }
//                },
//                writable: false,
//                configurable: false,
//                enumerable: false
//            });
//            Object.defineProperty(o, "length", {
//                get: function () {
//                    return args.length;
//                },
//                configurable: false,
//                enumerable: false
//            });
//            Object.defineProperty(o, "removeItem", {
//                value: function (data) {
//                    if (data) {
//                        /** @type {string} */
//                        document.cookie = escape(data) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
//                    }
//                },
//                writable: false,
//                configurable: false,
//                enumerable: false
//            });
//            Object.defineProperty(o, "clear", {
//                value: function () {
//                    if (args.length) {
//                        var arg;
//                        for (arg in args) {
//                            /** @type {string} */
//                            document.cookie = escape(arg) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
//                        }
//                    }
//                },
//                writable: false,
//                configurable: false,
//                enumerable: false
//            });
//            /**
//             * @return {?}
//             */
//            this.get = function () {
//                var i;
//                var key;
//                for (key in o) {
//                    i = args.indexOf(key);
//                    if (i === -1) {
//                        o.setItem(key, o[key]);
//                    } else {
//                        args.splice(i, 1);
//                    }
//                    delete o[key];
//                }
//                args;
//                for (; args.length > 0; args.splice(0, 1)) {
//                    o.removeItem(args[0]);
//                }
//                var sourceExpressionPathList;
//                var u;
//                /** @type {number} */
//                var CR_index = 0;
//                /** @type {!Array<string>} */
//                var row = document.cookie.split(/\s*;\s*/);
//                for (; CR_index < row.length; CR_index++) {
//                    /** @type {!Array<string>} */
//                    sourceExpressionPathList = row[CR_index].split(/\s*=\s*/);
//                    if (sourceExpressionPathList.length > 1) {
//                        /** @type {string} */
//                        o[u = unescape(sourceExpressionPathList[0])] = unescape(sourceExpressionPathList[1]);
//                        args.push(u);
//                    }
//                }
//                return o;
//            };
//            /** @type {boolean} */
//            this.configurable = false;
//            /** @type {boolean} */
//            this.enumerable = true;
//        });
//    },
//    imageCache: [],
//    loadImage: function (path, callback, event) {
//        var img;
//        /** @type {number} */
//        var i = 0;
//        for (; i < WorkflowDesignerCommon.imageCache.length; i++) {
//            var el = WorkflowDesignerCommon.imageCache[i];
//            if (el.src == path) {
//                img = el;
//                break;
//            }
//        }
//        return void 0 != img ? (void 0 != callback && callback(img, event), img) : (img = new Image, void 0 != callback && (img.onload = function () {
//            callback(img, event);
//        }), img.src = path, img);
//    },
//    getTextWidth: function (text, font) {
//        var canvasWorker = WorkflowDesignerCommon.TmpCanvas || (WorkflowDesignerCommon.TmpCanvas = document.createElement("canvas"));
//        var ctx = canvasWorker.getContext("2d");
//        return ctx.font = font, ctx.measureText(text).width;
//    },
//    defineArrayIncludes: function () {
//        if (!Array.prototype.includes) {
//            Object.defineProperty(Array.prototype, "includes", {
//                value: function (data, module) {
//                    /**
//                     * @param {string} t
//                     * @param {string} v
//                     * @return {?}
//                     */
//                    function transform(t, v) {
//                        return t === v || "number" == typeof t && "number" == typeof v && isNaN(t) && isNaN(v);
//                    }
//                    if (null == this) {
//                        throw new TypeError('"this" is null or not defined');
//                    }
//                    /** @type {!Object} */
//                    var params = Object(this);
//                    /** @type {number} */
//                    var len = params.length >>> 0;
//                    if (0 === len) {
//                        return false;
//                    }
//                    /** @type {number} */
//                    var n = 0 | module;
//                    /** @type {number} */
//                    var i = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
//                    for (; i < len;) {
//                        if (transform(params[i], data)) {
//                            return true;
//                        }
//                        i++;
//                    }
//                    return false;
//                }
//            });
//        }
//    }
//};
//!function ($, window, document, n) {
//    window = void 0 !== window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
//    /**
//     * @param {string} parameters
//     * @return {?}
//     */
//    $.fn.modal = function (parameters) {
//        var ret;
//        var $allModules = $(this);
//        var $window = $(window);
//        var $document = $(document);
//        var l = $("body");
//        var getdate = $allModules.selector || "";
//        /** @type {number} */
//        var height = (new Date).getTime();
//        /** @type {!Array} */
//        var performance = [];
//        var target = arguments[0];
//        /** @type {boolean} */
//        var o = "string" == typeof target;
//        /** @type {!Array<?>} */
//        var DEFAULT_FILE = [].slice.call(arguments, 1);
//        var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (_nextEventFunc) {
//            setTimeout(_nextEventFunc, 0);
//        };
//        return $allModules.each(function () {
//            var $allModals;
//            var $otherModals;
//            var v;
//            var $dimmable;
//            var $dimmer;
//            var elementEventNamespace;
//            var id;
//            var observer;
//            var module;
//            var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.modal.settings, parameters) : $.extend({}, $.fn.modal.settings);
//            var selector = settings.selector;
//            var className = settings.className;
//            var namespace = settings.namespace;
//            var error = settings.error;
//            /** @type {string} */
//            var eventNamespace = "." + namespace;
//            /** @type {string} */
//            var input = "module-" + namespace;
//            var $module = $(this);
//            var $context = $(settings.context);
//            var $toggle = $module.find(selector.close);
//            var element = this;
//            var instance = $module.data(input);
//            /** @type {boolean} */
//            var O = false;
//            module = {
//                initialize: function () {
//                    module.verbose("Initializing dimmer", $context);
//                    module.create.id();
//                    module.create.dimmer();
//                    module.refreshModals();
//                    module.bind.events();
//                    if (settings.observeChanges) {
//                        module.observeChanges();
//                    }
//                    module.instantiate();
//                },
//                instantiate: function () {
//                    module.verbose("Storing instance of modal");
//                    instance = module;
//                    $module.data(input, instance);
//                },
//                create: {
//                    dimmer: function () {
//                        var defaultSettings = {
//                            debug: settings.debug,
//                            variation: !settings.centered && "top aligned",
//                            dimmerName: "modals"
//                        };
//                        var dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);
//                        if (void 0 === $.fn.dimmer) {
//                            return void module.error(error.dimmer);
//                        }
//                        module.debug("Creating dimmer");
//                        $dimmable = $context.dimmer(dimmerSettings);
//                        if (settings.detachable) {
//                            module.verbose("Modal is detachable, moving content into dimmer");
//                            $dimmable.dimmer("add content", $module);
//                        } else {
//                            module.set.undetached();
//                        }
//                        $dimmer = $dimmable.dimmer("get dimmer");
//                    },
//                    id: function () {
//                        /** @type {string} */
//                        id = (Math.random().toString(16) + "000000000").substr(2, 8);
//                        /** @type {string} */
//                        elementEventNamespace = "." + id;
//                        module.verbose("Creating unique id for element", id);
//                    }
//                },
//                destroy: function () {
//                    module.verbose("Destroying previous modal");
//                    $module.removeData(input).off(eventNamespace);
//                    $window.off(elementEventNamespace);
//                    $dimmer.off(elementEventNamespace);
//                    $toggle.off(eventNamespace);
//                    $context.dimmer("destroy");
//                },
//                observeChanges: function () {
//                    if ("MutationObserver" in window) {
//                        /** @type {!MutationObserver} */
//                        observer = new MutationObserver(function (canCreateDiscussions) {
//                            module.debug("DOM tree modified, refreshing");
//                            module.refresh();
//                        });
//                        observer.observe(element, {
//                            childList: true,
//                            subtree: true
//                        });
//                        module.debug("Setting up mutation observer", observer);
//                    }
//                },
//                refresh: function () {
//                    module.remove.scrolling();
//                    module.cacheSizes();
//                    if (!module.can.useFlex()) {
//                        module.set.modalOffset();
//                    }
//                    module.set.screenHeight();
//                    module.set.type();
//                },
//                refreshModals: function () {
//                    $otherModals = $module.siblings(selector.modal);
//                    $allModals = $otherModals.add($module);
//                },
//                attachEvents: function (selector, event) {
//                    var $toggle = $(selector);
//                    event = $.isFunction(module[event]) ? module[event] : module.toggle;
//                    if ($toggle.length > 0) {
//                        module.debug("Attaching modal events to element", selector, event);
//                        $toggle.off(eventNamespace).on("click" + eventNamespace, event);
//                    } else {
//                        module.error(error.notFound, selector);
//                    }
//                },
//                bind: {
//                    events: function () {
//                        module.verbose("Attaching events");
//                        $module.on("click" + eventNamespace, selector.close, module.event.close).on("click" + eventNamespace, selector.approve, module.event.approve).on("click" + eventNamespace, selector.deny, module.event.deny);
//                        $window.on("resize" + elementEventNamespace, module.event.resize);
//                    },
//                    scrollLock: function () {
//                        $dimmable.get(0).addEventListener("touchmove", module.event.preventScroll, {
//                            passive: false
//                        });
//                    }
//                },
//                unbind: {
//                    scrollLock: function () {
//                        $dimmable.get(0).removeEventListener("touchmove", module.event.preventScroll, {
//                            passive: false
//                        });
//                    }
//                },
//                get: {
//                    id: function () {
//                        return (Math.random().toString(16) + "000000000").substr(2, 8);
//                    }
//                },
//                event: {
//                    approve: function () {
//                        if (O || settings.onApprove.call(element, $(this)) === false) {
//                            return void module.verbose("Approve callback returned false cancelling hide");
//                        }
//                        /** @type {boolean} */
//                        O = true;
//                        module.hide(function () {
//                            /** @type {boolean} */
//                            O = false;
//                        });
//                    },
//                    preventScroll: function (e) {
//                        e.preventDefault();
//                    },
//                    deny: function () {
//                        if (O || settings.onDeny.call(element, $(this)) === false) {
//                            return void module.verbose("Deny callback returned false cancelling hide");
//                        }
//                        /** @type {boolean} */
//                        O = true;
//                        module.hide(function () {
//                            /** @type {boolean} */
//                            O = false;
//                        });
//                    },
//                    close: function () {
//                        module.hide();
//                    },
//                    click: function (event) {
//                        if (!settings.closable) {
//                            return void module.verbose("Dimmer clicked but closable setting is disabled");
//                        }
//                        var $module = $(event.target);
//                        /** @type {boolean} */
//                        var a = $module.closest(selector.modal).length > 0;
//                        var b = $.contains(document.documentElement, event.target);
//                        if (!a && b && module.is.active()) {
//                            module.debug("Dimmer clicked, hiding all modals");
//                            module.remove.clickaway();
//                            if (settings.allowMultiple) {
//                                module.hide();
//                            } else {
//                                module.hideAll();
//                            }
//                        }
//                    },
//                    debounce: function (callback, delay) {
//                        clearTimeout(module.timer);
//                        /** @type {number} */
//                        module.timer = setTimeout(callback, delay);
//                    },
//                    keyboard: function (event) {
//                        if (27 == event.which) {
//                            if (settings.closable) {
//                                module.debug("Escape key pressed hiding modal");
//                                module.hide();
//                            } else {
//                                module.debug("Escape key pressed, but closable is set to false");
//                            }
//                            event.preventDefault();
//                        }
//                    },
//                    resize: function () {
//                        if ($dimmable.dimmer("is active") && (module.is.animating() || module.is.active())) {
//                            requestAnimationFrame(module.refresh);
//                        }
//                    }
//                },
//                toggle: function () {
//                    if (module.is.active() || module.is.animating()) {
//                        module.hide();
//                    } else {
//                        module.show();
//                    }
//                },
//                show: function (id) {
//                    id = $.isFunction(id) ? id : function () {
//                    };
//                    module.refreshModals();
//                    module.set.dimmerSettings();
//                    module.set.dimmerStyles();
//                    module.showModal(id);
//                },
//                hide: function (name) {
//                    name = $.isFunction(name) ? name : function () {
//                    };
//                    module.refreshModals();
//                    module.hideModal(name);
//                },
//                showModal: function (callback) {
//                    callback = $.isFunction(callback) ? callback : function () {
//                    };
//                    if (module.is.animating() || !module.is.active()) {
//                        module.showDimmer();
//                        module.cacheSizes();
//                        if (module.can.useFlex()) {
//                            module.remove.legacy();
//                        } else {
//                            module.set.legacy();
//                            module.set.modalOffset();
//                            module.debug("Using non-flex legacy modal positioning.");
//                        }
//                        module.set.screenHeight();
//                        module.set.type();
//                        module.set.clickaway();
//                        if (!settings.allowMultiple && module.others.active()) {
//                            module.hideOthers(module.showModal);
//                        } else {
//                            if (settings.allowMultiple && settings.detachable) {
//                                $module.detach().appendTo($dimmer);
//                            }
//                            settings.onShow.call(element);
//                            if (settings.transition && void 0 !== $.fn.transition && $module.transition("is supported")) {
//                                module.debug("Showing modal with css animations");
//                                $module.transition({
//                                    debug: settings.debug,
//                                    animation: settings.transition + " in",
//                                    queue: settings.queue,
//                                    duration: settings.duration,
//                                    useFailSafe: true,
//                                    onComplete: function () {
//                                        settings.onVisible.apply(element);
//                                        if (settings.keyboardShortcuts) {
//                                            module.add.keyboardShortcuts();
//                                        }
//                                        module.save.focus();
//                                        module.set.active();
//                                        if (settings.autofocus) {
//                                            module.set.autofocus();
//                                        }
//                                        callback();
//                                    }
//                                });
//                            } else {
//                                module.error(error.noTransition);
//                            }
//                        }
//                    } else {
//                        module.debug("Modal is already visible");
//                    }
//                },
//                hideModal: function (selector, o) {
//                    if (selector = $.isFunction(selector) ? selector : function () {
//                    }, module.debug("Hiding modal"), settings.onHide.call(element, $(this)) === false) {
//                        return void module.verbose("Hide callback returned false cancelling hide");
//                    }
//                    if (module.is.animating() || module.is.active()) {
//                        if (settings.transition && void 0 !== $.fn.transition && $module.transition("is supported")) {
//                            module.remove.active();
//                            $module.transition({
//                                debug: settings.debug,
//                                animation: settings.transition + " out",
//                                queue: settings.queue,
//                                duration: settings.duration,
//                                useFailSafe: true,
//                                onStart: function () {
//                                    if (!(module.others.active() || o)) {
//                                        module.hideDimmer();
//                                    }
//                                    if (settings.keyboardShortcuts) {
//                                        module.remove.keyboardShortcuts();
//                                    }
//                                },
//                                onComplete: function () {
//                                    settings.onHidden.call(element);
//                                    module.remove.dimmerStyles();
//                                    module.restore.focus();
//                                    selector();
//                                }
//                            });
//                        } else {
//                            module.error(error.noTransition);
//                        }
//                    }
//                },
//                showDimmer: function () {
//                    if ($dimmable.dimmer("is animating") || !$dimmable.dimmer("is active")) {
//                        module.debug("Showing dimmer");
//                        $dimmable.dimmer("show");
//                    } else {
//                        module.debug("Dimmer already visible");
//                    }
//                },
//                hideDimmer: function () {
//                    if (!$dimmable.dimmer("is animating") && !$dimmable.dimmer("is active")) {
//                        return void module.debug("Dimmer is not visible cannot hide");
//                    }
//                    module.unbind.scrollLock();
//                    $dimmable.dimmer("hide", function () {
//                        module.remove.clickaway();
//                        module.remove.screenHeight();
//                    });
//                },
//                hideAll: function (options) {
//                    var twitter_modal = $allModals.filter("." + className.active + ", ." + className.animating);
//                    options = $.isFunction(options) ? options : function () {
//                    };
//                    if (twitter_modal.length > 0) {
//                        module.debug("Hiding all visible modals");
//                        module.hideDimmer();
//                        twitter_modal.modal("hide modal", options);
//                    }
//                },
//                hideOthers: function (callback) {
//                    var $visibleModals = $otherModals.filter("." + className.active + ", ." + className.animating);
//                    callback = $.isFunction(callback) ? callback : function () {
//                    };
//                    if ($visibleModals.length > 0) {
//                        module.debug("Hiding other modals", $otherModals);
//                        $visibleModals.modal("hide modal", callback, true);
//                    }
//                },
//                others: {
//                    active: function () {
//                        return $otherModals.filter("." + className.active).length > 0;
//                    },
//                    animating: function () {
//                        return $otherModals.filter("." + className.animating).length > 0;
//                    }
//                },
//                add: {
//                    keyboardShortcuts: function () {
//                        module.verbose("Adding keyboard shortcuts");
//                        $document.on("keyup" + eventNamespace, module.event.keyboard);
//                    }
//                },
//                save: {
//                    focus: function () {
//                        if (!($(document.activeElement).closest($module).length > 0)) {
//                            v = $(document.activeElement).blur();
//                        }
//                    }
//                },
//                restore: {
//                    focus: function () {
//                        if (v && v.length > 0) {
//                            v.focus();
//                        }
//                    }
//                },
//                remove: {
//                    active: function () {
//                        $module.removeClass(className.active);
//                    },
//                    legacy: function () {
//                        $module.removeClass(className.legacy);
//                    },
//                    clickaway: function () {
//                        $dimmer.off("click" + elementEventNamespace);
//                    },
//                    dimmerStyles: function () {
//                        $dimmer.removeClass(className.inverted);
//                        $dimmable.removeClass(className.blurring);
//                    },
//                    bodyStyle: function () {
//                        if ("" === l.attr("style")) {
//                            module.verbose("Removing style attribute");
//                            l.removeAttr("style");
//                        }
//                    },
//                    screenHeight: function () {
//                        module.debug("Removing page height");
//                        l.css("height", "");
//                    },
//                    keyboardShortcuts: function () {
//                        module.verbose("Removing keyboard shortcuts");
//                        $document.off("keyup" + eventNamespace);
//                    },
//                    scrolling: function () {
//                        $dimmable.removeClass(className.scrolling);
//                        $module.removeClass(className.scrolling);
//                    }
//                },
//                cacheSizes: function () {
//                    $module.addClass(className.loading);
//                    var maxHeight = $module.prop("scrollHeight");
//                    var neededWidth = $module.outerWidth();
//                    var modalHeight = $module.outerHeight();
//                    if (!(void 0 !== module.cache && 0 === modalHeight)) {
//                        module.cache = {
//                            pageHeight: $(document).outerHeight(),
//                            width: neededWidth,
//                            height: modalHeight + settings.offset,
//                            scrollHeight: maxHeight + settings.offset,
//                            contextHeight: "body" == settings.context ? $(window).height() : $dimmable.height()
//                        };
//                        /** @type {number} */
//                        module.cache.topOffset = -(module.cache.height / 2);
//                    }
//                    $module.removeClass(className.loading);
//                    module.debug("Caching modal and container sizes", module.cache);
//                },
//                can: {
//                    useFlex: function () {
//                        return "auto" == settings.useFlex ? settings.detachable && !module.is.ie() : settings.useFlex;
//                    },
//                    fit: function () {
//                        var headHeight = module.cache.contextHeight;
//                        /** @type {number} */
//                        var topMargin = module.cache.contextHeight / 2;
//                        var topOffset = module.cache.topOffset;
//                        var elementHeight = module.cache.scrollHeight;
//                        var height = module.cache.height;
//                        var padding = settings.padding;
//                        var top = topMargin + topOffset;
//                        return elementHeight > height ? top + elementHeight + padding < headHeight : height + 2 * padding < headHeight;
//                    }
//                },
//                is: {
//                    active: function () {
//                        return $module.hasClass(className.active);
//                    },
//                    ie: function () {
//                        /** @type {boolean} */
//                        var isIE11 = !window.ActiveXObject && "ActiveXObject" in window;
//                        /** @type {boolean} */
//                        var isIE = "ActiveXObject" in window;
//                        return isIE11 || isIE;
//                    },
//                    animating: function () {
//                        return $module.transition("is supported") ? $module.transition("is animating") : $module.is(":visible");
//                    },
//                    scrolling: function () {
//                        return $dimmable.hasClass(className.scrolling);
//                    },
//                    modernBrowser: function () {
//                        return !(window.ActiveXObject || "ActiveXObject" in window);
//                    }
//                },
//                set: {
//                    autofocus: function () {
//                        var compMgr = $module.find("[tabindex], :input").filter(":visible");
//                        var tokQue = compMgr.filter("[autofocus]");
//                        var i = tokQue.length > 0 ? tokQue.first() : compMgr.first();
//                        if (i.length > 0) {
//                            i.focus();
//                        }
//                    },
//                    clickaway: function () {
//                        $dimmer.on("click" + elementEventNamespace, module.event.click);
//                    },
//                    dimmerSettings: function () {
//                        if (void 0 === $.fn.dimmer) {
//                            return void module.error(error.dimmer);
//                        }
//                        var defaultSettings = {
//                            debug: settings.debug,
//                            dimmerName: "modals",
//                            closable: "auto",
//                            useFlex: module.can.useFlex(),
//                            variation: !settings.centered && "top aligned",
//                            duration: {
//                                show: settings.duration,
//                                hide: settings.duration
//                            }
//                        };
//                        var dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);
//                        if (settings.inverted) {
//                            /** @type {string} */
//                            dimmerSettings.variation = void 0 !== dimmerSettings.variation ? dimmerSettings.variation + " inverted" : "inverted";
//                        }
//                        $context.dimmer("setting", dimmerSettings);
//                    },
//                    dimmerStyles: function () {
//                        if (settings.inverted) {
//                            $dimmer.addClass(className.inverted);
//                        } else {
//                            $dimmer.removeClass(className.inverted);
//                        }
//                        if (settings.blurring) {
//                            $dimmable.addClass(className.blurring);
//                        } else {
//                            $dimmable.removeClass(className.blurring);
//                        }
//                    },
//                    modalOffset: function () {
//                        var beginWidth = module.cache.width;
//                        var upperHeight = module.cache.height;
//                        $module.css({
//                            marginTop: settings.centered && module.can.fit() ? -(upperHeight / 2) : 0,
//                            marginLeft: -(beginWidth / 2)
//                        });
//                        module.verbose("Setting modal offset for legacy mode");
//                    },
//                    screenHeight: function () {
//                        if (module.can.fit()) {
//                            l.css("height", "");
//                        } else {
//                            module.debug("Modal is taller than page content, resizing page height");
//                            l.css("height", module.cache.height + 2 * settings.padding);
//                        }
//                    },
//                    active: function () {
//                        $module.addClass(className.active);
//                    },
//                    scrolling: function () {
//                        $dimmable.addClass(className.scrolling);
//                        $module.addClass(className.scrolling);
//                        module.unbind.scrollLock();
//                    },
//                    legacy: function () {
//                        $module.addClass(className.legacy);
//                    },
//                    type: function () {
//                        if (module.can.fit()) {
//                            module.verbose("Modal fits on screen");
//                            if (!(module.others.active() || module.others.animating())) {
//                                module.remove.scrolling();
//                                module.bind.scrollLock();
//                            }
//                        } else {
//                            module.verbose("Modal cannot fit on screen setting to scrolling");
//                            module.set.scrolling();
//                        }
//                    },
//                    undetached: function () {
//                        $dimmable.addClass(className.undetached);
//                    }
//                },
//                setting: function (name, value) {
//                    if (module.debug("Changing setting", name, value), $.isPlainObject(name)) {
//                        $.extend(true, settings, name);
//                    } else {
//                        if (void 0 === value) {
//                            return settings[name];
//                        }
//                        if ($.isPlainObject(settings[name])) {
//                            $.extend(true, settings[name], value);
//                        } else {
//                            /** @type {!Array} */
//                            settings[name] = value;
//                        }
//                    }
//                },
//                internal: function (name, value) {
//                    if ($.isPlainObject(name)) {
//                        $.extend(true, module, name);
//                    } else {
//                        if (void 0 === value) {
//                            return module[name];
//                        }
//                        /** @type {!Array} */
//                        module[name] = value;
//                    }
//                },
//                debug: function () {
//                    if (!settings.silent && settings.debug) {
//                        if (settings.performance) {
//                            module.performance.log(arguments);
//                        } else {
//                            module.debug = Function.prototype.bind.call(console.info, console, settings.name + ":");
//                            module.debug.apply(console, arguments);
//                        }
//                    }
//                },
//                verbose: function () {
//                    if (!settings.silent && settings.verbose && settings.debug) {
//                        if (settings.performance) {
//                            module.performance.log(arguments);
//                        } else {
//                            module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ":");
//                            module.verbose.apply(console, arguments);
//                        }
//                    }
//                },
//                error: function () {
//                    if (!settings.silent) {
//                        module.error = Function.prototype.bind.call(console.error, console, settings.name + ":");
//                        module.error.apply(console, arguments);
//                    }
//                },
//                performance: {
//                    log: function (message) {
//                        var width;
//                        var diff;
//                        var max;
//                        if (settings.performance) {
//                            /** @type {number} */
//                            width = (new Date).getTime();
//                            max = height || width;
//                            /** @type {number} */
//                            diff = width - max;
//                            /** @type {number} */
//                            height = width;
//                            performance.push({
//                                Name: message[0],
//                                Arguments: [].slice.call(message, 1) || "",
//                                Element: element,
//                                "Execution Time": diff
//                            });
//                        }
//                        clearTimeout(module.performance.timer);
//                        /** @type {number} */
//                        module.performance.timer = setTimeout(module.performance.display, 500);
//                    },
//                    display: function () {
//                        /** @type {string} */
//                        var title = settings.name + ":";
//                        /** @type {number} */
//                        var i = 0;
//                        /** @type {boolean} */
//                        height = false;
//                        clearTimeout(module.performance.timer);
//                        $.each(performance, function (canCreateDiscussions, rawData) {
//                            i = i + rawData["Execution Time"];
//                        });
//                        /** @type {string} */
//                        title = title + (" " + i + "ms");
//                        if (getdate) {
//                            /** @type {string} */
//                            title = title + (" '" + getdate + "'");
//                        }
//                        if ((void 0 !== console.group || void 0 !== console.table) && performance.length > 0) {
//                            console.groupCollapsed(title);
//                            if (console.table) {
//                                console.table(performance);
//                            } else {
//                                $.each(performance, function (canCreateDiscussions, KanbanListToMoveTo) {
//                                    console.log(KanbanListToMoveTo.Name + ": " + KanbanListToMoveTo["Execution Time"] + "ms");
//                                });
//                            }
//                            console.groupEnd();
//                        }
//                        /** @type {!Array} */
//                        performance = [];
//                    }
//                },
//                invoke: function (name, f, context) {
//                    var leftposition;
//                    var v;
//                    var s;
//                    var object = instance;
//                    return f = f || DEFAULT_FILE, context = element || context, "string" == typeof name && void 0 !== object && (name = name.split(/[\. ]/), leftposition = name.length - 1, $.each(name, function (positionvalue, key) {
//                        var value = positionvalue != leftposition ? key + name[positionvalue + 1].charAt(0).toUpperCase() + name[positionvalue + 1].slice(1) : name;
//                        if ($.isPlainObject(object[value]) && positionvalue != leftposition) {
//                            object = object[value];
//                        } else {
//                            if (void 0 !== object[value]) {
//                                return v = object[value], false;
//                            }
//                            if (!$.isPlainObject(object[key]) || positionvalue == leftposition) {
//                                return void 0 !== object[key] && (v = object[key], false);
//                            }
//                            object = object[key];
//                        }
//                    })), $.isFunction(v) ? s = v.apply(context, f) : void 0 !== v && (s = v), $.isArray(ret) ? ret.push(s) : void 0 !== ret ? ret = [ret, s] : void 0 !== s && (ret = s), v;
//                }
//            };
//            if (o) {
//                if (void 0 === instance) {
//                    module.initialize();
//                }
//                module.invoke(target);
//            } else {
//                if (void 0 !== instance) {
//                    instance.invoke("destroy");
//                }
//                module.initialize();
//            }
//        }), void 0 !== ret ? ret : this;
//    };
//    $.fn.modal.settings = {
//        name: "Modal",
//        namespace: "modal",
//        useFlex: "auto",
//        offset: 0,
//        silent: false,
//        debug: false,
//        verbose: false,
//        performance: true,
//        observeChanges: false,
//        allowMultiple: false,
//        detachable: true,
//        closable: true,
//        autofocus: true,
//        inverted: false,
//        blurring: false,
//        centered: true,
//        dimmerSettings: {
//            closable: false,
//            useCSS: true
//        },
//        keyboardShortcuts: true,
//        context: "body",
//        queue: false,
//        duration: 500,
//        transition: "scale",
//        padding: 50,
//        onShow: function () {
//        },
//        onVisible: function () {
//        },
//        onHide: function () {
//            return true;
//        },
//        onHidden: function () {
//        },
//        onApprove: function () {
//            return true;
//        },
//        onDeny: function () {
//            return true;
//        },
//        selector: {
//            close: "> .close",
//            approve: ".actions .positive, .actions .approve, .actions .ok",
//            deny: ".actions .negative, .actions .deny, .actions .cancel",
//            modal: ".ui.modal"
//        },
//        error: {
//            dimmer: "UI Dimmer, a required component is not included in this page",
//            method: "The method you called is not defined.",
//            notFound: "The element you specified could not be found"
//        },
//        className: {
//            active: "active",
//            animating: "animating",
//            blurring: "blurring",
//            inverted: "inverted",
//            legacy: "legacy",
//            loading: "loading",
//            scrolling: "scrolling",
//            undetached: "undetached"
//        }
//    };
//}(jQuery, window, document), function () {
//    /**
//     * @param {!Object} obj
//     * @return {undefined}
//     */
//    function handler(obj) {
//        filter(obj);
//        var tp = obj.parent().next().next().children();
//        var data = obj.val();
//        var itemForm = tp[0].rebuild(data);
//        tp.remove();
//        obj.parent().next().next().append(itemForm);
//    }
//    /**
//     * @param {!Object} target
//     * @return {undefined}
//     */
//    function filter(target) {
//        var $innerblock = target.parent().next().next().next().children();
//        if ("Dropdown" === target.val()) {
//            $innerblock.show();
//        } else {
//            $innerblock.hide();
//        }
//    }
//    /**
//     * @param {!Object} image
//     * @param {!Object} callback
//     * @return {?}
//     */
//    function _loadRetinaImage(image, callback) {
//        return update(image, callback, true), true;
//    }
//    /**
//     * @param {!Object} data
//     * @param {!Object} collection
//     * @param {boolean} acc
//     * @return {undefined}
//     */
//    function update(data, collection, acc) {
//        var checkbox = data.parent().parent();
//        var stub = checkbox.parent().prev();
//        var context = collection.getEditData({
//            type: "table",
//            control: checkbox,
//            elements: collection.parameters.elements[4].elements
//        });
//        if (acc) {
//            context.splice(data[0].rowIndex - 1, 1);
//        }
//        var city = stub.children();
//        var buffer = city.val();
//        if ("" === buffer) {
//            /** @type {boolean} */
//            var l = false;
//            $.each(city[0].options, function (canCreateDiscussions, header) {
//                return 0 === canCreateDiscussions || ("" === header.value ? (l = true, false) : void 0);
//            });
//            if (!l) {
//                buffer = void 0;
//            }
//        }
//        var url = city[0].rebuild("Dropdown", buffer, context);
//        city.remove();
//        stub.append(url);
//    }
//    /**
//     * @param {!Object} parent
//     * @param {?} list
//     * @param {?} args
//     * @return {?}
//     */
//    ParametersControl.prototype.generate = function (parent, list, args) {
//        var form = this;
//        var a = $('<button class="ui button basic">' + WorkflowDesignerConstants.CodeActionsFormLabel.EditParameters + "</button>");
//        return a[0].id = form.parentForm.generateid(parent.field, args), a[0].name = form.parentForm.getElementCode(parent), a[0].parameters = list, a.on("click", function () {
//            var exports = WorkflowDesignerConstants.CodeActionsFormLabel;
//            var payload = {
//                type: "table",
//                title: exports.EditParameters,
//                width: "800px",
//                data: a[0].parameters,
//                keyproperty: "Name",
//                onrowadded: function ($tabSelector) {
//                    filter($tabSelector.find("[name=Type]"));
//                },
//                elements: [{
//                    name: exports.Name,
//                    field: "Name",
//                    type: "input"
//                }, {
//                    name: exports.Type,
//                    field: "Type",
//                    type: "select",
//                    displayfield: "Name",
//                    valuefield: "Value",
//                    onchange: handler,
//                    datasource: [{
//                        Name: exports.Text,
//                        Value: "Text"
//                    }, {
//                        Name: exports.Number,
//                        Value: "Number"
//                    }, {
//                        Name: exports.Checkbox,
//                        Value: "Checkbox"
//                    }, {
//                        Name: exports.Dropdown,
//                        Value: "Dropdown"
//                    }, {
//                        Name: exports.DateTime,
//                        Value: "DateTime"
//                    }, {
//                        Name: exports.Json,
//                        Value: "Json"
//                    }]
//                }, {
//                    name: exports.IsRequired,
//                    field: "IsRequired",
//                    type: "checkbox"
//                }, {
//                    name: exports.DefaultValue,
//                    field: "DefaultValue",
//                    type: "defaultvalue",
//                    typeswitcher: "Type"
//                }, {
//                    name: exports.Values,
//                    field: "DropdownValues",
//                    type: "table",
//                    onrowdelete: _loadRetinaImage,
//                    onrowchanged: update,
//                    elements: [{
//                        name: exports.DropdownName,
//                        code: "DropdownValueName",
//                        field: "Name",
//                        type: "input"
//                    }, {
//                        name: exports.DropdownValue,
//                        code: "DropdownValueValue",
//                        field: "Value",
//                        type: "input"
//                    }]
//                }],
//                readonly: parent.graph.Settings.readonly,
//                onHidden: function () {
//                    setTimeout(function () {
//                        WorkflowDesignerCommon.modal(form.parentForm.window, "show");
//                    }, 10);
//                }
//            };
//            var self = new WorkflowDesignerForm(payload);
//            /**
//             * @param {?} o
//             * @param {string} target
//             * @return {?}
//             */
//            var init = function (o, target) {
//                /** @type {boolean} */
//                var result = true;
//                /** @type {null} */
//                var installAppUrl = null;
//                return target.length > 1 ? (result = result & o.CheckRequired(target, ["Name", "Type"], WorkflowDesignerConstants.FieldIsRequired), result = result & o.CheckUnique(target, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) : result = result & o.CheckRequired(target, ["Type"], WorkflowDesignerConstants.FieldIsRequired), result && $.each(target, function (canCreateDiscussions, options) {
//                    if ("Dropdown" === options.Type) {
//                        if (void 0 === options.DropdownValues || !options.DropdownValues.length) {
//                            return result = false, $(options.control_DropdownValues).after('<div class="error-message">' + exports.DropdownShouldContainValues + "</div>"), false;
//                        }
//                        if (!o.CheckUnique(options.DropdownValues, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique) || !o.CheckUnique(options.DropdownValues, ["Value"], WorkflowDesignerConstants.FieldMustBeUnique)) {
//                            return result = false, false;
//                        }
//                    }
//                    if ("" !== options.DefaultValue && null !== options.DefaultValue && (installAppUrl = Validation.checkType(options.Type, options.DefaultValue))) {
//                        return self.ControlAddError(options.control_DefaultValue, installAppUrl), result = false, false;
//                    }
//                }), result;
//            };
//            /**
//             * @param {string} params
//             * @return {?}
//             */
//            var insert = function (params) {
//                return !!init(self, params) && (self.ClearTempField(params), a[0].parameters = params, true);
//            };
//            WorkflowDesignerCommon.modal(form.parentForm.window, "hide");
//            self.showModal(insert);
//            self.window.find("[name=Type]").each(function (canCreateDiscussions, context) {
//                filter($(context));
//            });
//        }), a;
//    };
//}(), DefaultValueControl.prototype.generate = function (i, options) {
//    return this.build(options.Type, i, options.DropdownValues);
//}, DefaultValueControl.prototype.build = function (type, p, a) {
//    var self = this;
//    /** @type {null} */
//    var title = null;
//    switch (type) {
//        case "Text":
//        case "Number":
//        case "DateTime":
//            title = (new InputControl(self.parentForm)).generate(self.parameter, p, self.prefix);
//            break;
//        case "Checkbox":
//            title = (new CheckboxControl(self.parentForm)).generate($.extend({
//                indeterminable: true
//            }, self.parameter), p, self.prefix);
//            break;
//        case "Dropdown":
//            title = (new SelectControl(self.parentForm)).generate($.extend({
//                displayfield: "Name",
//                valuefield: "Value",
//                datasource: a
//            }, self.parameter), p, self.prefix);
//            break;
//        case "Json":
//            title = (new JsonControl(self.parentForm, self.parameter, self.prefix)).generateBasicControl(p);
//            break;
//        default:
//            title = $("<div></div>");
//    }
//    return title[0].rebuild = function (text, context, callback) {
//        return self.build(text, context, callback);
//    }, title;
//}, function () {
//    /**
//     * @param {!Object} node
//     * @param {!Object} key
//     * @param {!Object} props
//     * @param {string} values
//     * @return {undefined}
//     */
//    function update(node, key, props, values) {
//        /** @type {boolean} */
//        var s = false;
//        /** @type {null} */
//        var me = null;
//        var style = WorkflowDesignerConstants.EditParametersFormlabel;
//        var box = $('<div style="float: right; margin-bottom: 15px;"></div>');
//        var $n = $('<a href="#" class="btnAdd"></a>');
//        $n[0].innerHTML = style.SwitchToJson;
//        $n.on("click", function () {
//            return s = true, WorkflowDesignerCommon.modal(me.window, "hide"), false;
//        });
//        box.append($n);
//        var result = {
//            type: "form",
//            title: style.Title,
//            width: "800px",
//            readonly: node.parameter.graph.Settings.readonly,
//            onHidden: function () {
//                setTimeout(function () {
//                    if (s) {
//                        /** @type {boolean} */
//                        s = false;
//                        var params = me.getEditData(me.parameters);
//                        var value = {};
//                        $.each(props, function (canCreateDiscussions, key) {
//                            paramValue = params[key.Name];
//                            value = callback(key, paramValue, value);
//                        });
//                        $(".ace_editor").remove();
//                        init(node, key, {
//                            initialValue: JSON.stringify(value),
//                            paramsInfo: props
//                        })();
//                    } else {
//                        WorkflowDesignerCommon.modal(node.parentForm.window, "show");
//                    }
//                }, 10);
//            },
//            bottom: box[0],
//            elements: new Array
//        };
//        if (void 0 !== values) {
//            if ("" === props[0].Name) {
//                result.data = {};
//                /** @type {string} */
//                result.data[""] = values;
//            } else {
//                /** @type {string} */
//                result.data = values;
//            }
//        } else {
//            if ("" === props[0].Name) {
//                if (result.data = {}, key[0].value) {
//                    try {
//                        /** @type {*} */
//                        result.data[""] = JSON.parse(key[0].value);
//                    } catch (e) {
//                        if (!("Text" !== props[0].Type && "Dropdown" !== props[0].Type && "DateTime" !== props[0].Type)) {
//                            result.data[""] = key[0].value;
//                        }
//                    }
//                }
//            } else {
//                if (key[0].value) {
//                    try {
//                        /** @type {*} */
//                        result.data = JSON.parse(key[0].value);
//                    } catch (e) {
//                    }
//                }
//                if (!result.data) {
//                    result.data = {};
//                }
//                $.each(props, function (canCreateDiscussions, property) {
//                    var placeholder = result.data[property.Name];
//                    if (!(void 0 !== placeholder && null !== placeholder && "" !== placeholder)) {
//                        result.data[property.Name] = property.DefaultValue;
//                    }
//                });
//            }
//        }
//        $.each(props, function (canCreateDiscussions, data) {
//            switch (data.Type) {
//                case "Text":
//                case "Number":
//                case "DateTime":
//                    result.elements.push({
//                        type: "input",
//                        name: data.Name,
//                        field: data.Name
//                    });
//                    break;
//                case "Checkbox":
//                    result.elements.push({
//                        type: "checkbox",
//                        name: data.Name,
//                        field: data.Name,
//                        indeterminable: true
//                    });
//                    break;
//                case "Dropdown":
//                    result.elements.push({
//                        type: "select",
//                        name: data.Name,
//                        displayfield: "Name",
//                        valuefield: "Value",
//                        datasource: data.DropdownValues,
//                        field: data.Name
//                    });
//                    break;
//                case "Json":
//                    result.elements.push({
//                        type: "json",
//                        name: data.Name,
//                        field: data.Name
//                    });
//            }
//        });
//        me = new WorkflowDesignerForm(result);
//        /**
//         * @param {!Object} prev
//         * @return {?}
//         */
//        var callback = function (prev) {
//            /** @type {null} */
//            var a = null;
//            /** @type {boolean} */
//            var s = true;
//            var result = {};
//            return $.each(props, function (a, p) {
//                a = prev[p.Name];
//                var f1 = $(a, p);
//                if (f1) {
//                    /** @type {boolean} */
//                    s = false;
//                    node.parentForm.ControlAddError(prev["control_" + p.Name], f1);
//                } else {
//                    result = callback(p, a, result);
//                }
//            }), s && (1 !== props.length || "" !== props[0].Name || "Text" !== props[0].Type && "Dropdown" !== props[0].Type && "DateTime" !== props[0].Type ? key[0].value = JSON.stringify(result) : key[0].value = result), s;
//        };
//        me.showModal(callback);
//    }
//    /**
//     * @param {?} value
//     * @param {!Object} options
//     * @return {?}
//     */
//    function $(value, options) {
//        return !options.IsRequired || void 0 !== value && null !== value && "" !== value ? Validation.checkType(options.Type, value) : WorkflowDesignerConstants.FieldIsRequired;
//    }
//    /**
//     * @param {!Object} that
//     * @param {string} text
//     * @param {!Object} data
//     * @return {?}
//     */
//    function callback(that, text, data) {
//        if ("" === that.Name) {
//            if ("Text" !== that.Type && "" === text) {
//                /** @type {null} */
//                data = null;
//            } else {
//                if ("Number" === that.Type) {
//                    /** @type {number} */
//                    data = Number(text);
//                } else {
//                    if ("Json" === that.Type) {
//                        try {
//                            /** @type {*} */
//                            data = JSON.parse(text);
//                        } catch (e) {
//                            /** @type {string} */
//                            data = text;
//                        }
//                    } else {
//                        /** @type {string} */
//                        data = text;
//                    }
//                }
//            }
//        } else {
//            if ("Text" !== that.Type && "" === text) {
//                /** @type {null} */
//                data[that.Name] = null;
//            } else {
//                if ("Number" === that.Type) {
//                    /** @type {number} */
//                    data[that.Name] = Number(text);
//                } else {
//                    if ("Json" === that.Type) {
//                        try {
//                            /** @type {*} */
//                            data[that.Name] = JSON.parse(text);
//                        } catch (n) {
//                            /** @type {string} */
//                            data[that.Name] = text;
//                        }
//                    } else {
//                        /** @type {string} */
//                        data[that.Name] = text;
//                    }
//                }
//            }
//        }
//        return data;
//    }
//    /**
//     * @param {!Object} node
//     * @param {!Object} el
//     * @param {number} data
//     * @return {?}
//     */
//    function init(node, el, data) {
//        var text = $('<div class="ui modal WorkflowDesignerDialogChild"><div class="header">' + WorkflowDesignerConstants.EditJSONLabel.Title + '</div><div id="' + el[0].id + '_editor" style="height:' + WorkflowDesignerConstants.EditJSONSettings.CodeHeight + 'px">' + el[0].value + "</div></div>");
//        /** @type {string} */
//        text[0].id = el[0].id + "_form";
//        /** @type {boolean} */
//        var s = false;
//        var t = $('<div class="actions"></div>');
//        if (void 0 !== data) {
//            var cell = $('<div style="display: inline-block"></div>');
//            var c = $('<a href="#" class="btnAdd"></a>');
//            c[0].innerHTML = WorkflowDesignerConstants.EditParametersFormlabel.SwitchToConstructor;
//            c.on("click", function () {
//                return s = true, WorkflowDesignerCommon.modal(text, "hide"), false;
//            });
//            cell.append(c);
//            t.append(cell);
//        }
//        if (!el[0].readOnly) {
//            var cell = $('<div class="ui button">' + WorkflowDesignerConstants.EditJSONLabel.Format + "</div>");
//            cell.click(function () {
//                var _self = ace.edit(el[0].id + "_editor");
//                var val = ace.edit(el[0].id + "_editor").getValue();
//                _self.setValue(node.parentForm.toPrettyJSON(val));
//                _self.clearSelection();
//            });
//            t.append(cell);
//        }
//        if (void 0 != node.parameter.getemptytype && !el[0].readOnly) {
//            var cell = $('<div class="ui button">' + WorkflowDesignerConstants.EditJSONLabel.CreateEmptyType + "</div>");
//            cell.click(function () {
//                var document = node.parameter;
//                if (void 0 != document.getemptytype) {
//                    document.getemptytype(node.parentForm, el[0], function (v) {
//                        if (void 0 != v && "" !== v) {
//                            var list = ace.edit(el[0].id + "_editor");
//                            list.setValue(node.parentForm.toPrettyJSON(v));
//                            list.clearSelection();
//                        }
//                    });
//                }
//            });
//            t.append(cell);
//        }
//        return el[0].readOnly ? t.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextClose + "</div>") : (t.append('<div class="ui primary ok button">' + WorkflowDesignerConstants.ButtonTextSave + "</div>"), t.append('<div class="ui secondary cancel button">' + WorkflowDesignerConstants.ButtonTextCancel + "</div>")), text.append(t), function () {
//            if (void 0 !== data) {
//                WorkflowDesignerCommon.modal(node.parentForm.window, "hide");
//            }
//            WorkflowDesignerCommon.modal(text, {
//                closable: false,
//                allowMultiple: true,
//                onApprove: function () {
//                    var b = ace.edit(el[0].id + "_editor").getValue();
//                    if (data) {
//                        node.parentForm.ClearError();
//                        /** @type {null} */
//                        var prev = null;
//                        try {
//                            /** @type {*} */
//                            prev = JSON.parse(b);
//                        } catch (e) {
//                            return setupPasswords(text), false;
//                        }
//                        if ("" === data.paramsInfo[0].Name) {
//                            if ($(prev, data.paramsInfo[0])) {
//                                return setupPasswords(text), false;
//                            }
//                        } else {
//                            /** @type {boolean} */
//                            var l = false;
//                            if ($.each(data.paramsInfo, function (canCreateDiscussions, data) {
//                                if ($(prev[data.Name], data)) {
//                                    return l = true, false;
//                                }
//                            }), l) {
//                                return setupPasswords(text), false;
//                            }
//                        }
//                    }
//                    el[0].value = node.parentForm.toCompactJSON(b);
//                },
//                onHidden: function () {
//                    if (s) {
//                        /** @type {boolean} */
//                        s = false;
//                        var reqStr = ace.edit(el[0].id + "_editor").getValue();
//                        /** @type {null} */
//                        var req = null;
//                        try {
//                            /** @type {*} */
//                            req = JSON.parse(reqStr);
//                        } catch (e) {
//                        }
//                        update(node, el, data.paramsInfo, req);
//                    } else {
//                        setTimeout(function () {
//                            WorkflowDesignerCommon.modal(node.parentForm.window, "show");
//                        }, 10);
//                    }
//                },
//                dimmerSettings: {
//                    opacity: .2,
//                    duration: {
//                        show: 0,
//                        hide: 0
//                    }
//                },
//                transition: "fade"
//            });
//            WorkflowDesignerCommon.modal(text, "show");
//            var aceEditor = ace.edit(el[0].id + "_editor");
//            if (el[0].readOnly) {
//                aceEditor.setOptions({
//                    readOnly: true
//                });
//            } else {
//                aceEditor.setOptions({
//                    readOnly: false
//                });
//            }
//            aceEditor.getSession().setMode("ace/mode/json");
//            aceEditor.setValue(node.parentForm.toPrettyJSON(void 0 !== data ? data.initialValue : el[0].value));
//            aceEditor.clearSelection();
//        };
//    }
//    /**
//     * @param {?} post
//     * @return {undefined}
//     */
//    function setupPasswords(post) {
//        $(".header", post).after('<div class="error-message" style="padding: 4px">' + WorkflowDesignerConstants.EditParametersFormlabel.InvalidJson + "</div>");
//    }
//    /**
//     * @param {undefined} name
//     * @param {!Object} data
//     * @return {?}
//     */
//    JsonControl.prototype.generateParameterControl = function (name, data) {
//        var a = this;
//        /** @type {null} */
//        var test = null;
//        switch (a.parameter.parametertype) {
//            case "Action":
//                test = data.ActionName;
//                break;
//            case "Condition":
//                if (data.Action) {
//                    test = data.Action.ActionName;
//                }
//                break;
//            case "RuleCheck":
//                test = data.Rule;
//        }
//        return a.build(test, name);
//    };
//    /**
//     * @param {string} value
//     * @return {?}
//     */
//    JsonControl.prototype.generateBasicControl = function (value) {
//        var self = this;
//        var item = $('<input type="text"></input>');
//        item[0].id = self.parentForm.generateid(self.parameter.field, self.prefix);
//        item[0].name = self.parentForm.getElementCode(self.parameter);
//        if (void 0 !== value && null !== value) {
//            if ("object" == typeof value) {
//                /** @type {string} */
//                item[0].value = JSON.stringify(value);
//            } else {
//                /** @type {string} */
//                item[0].value = value;
//            }
//        }
//        if (self.parentForm.isReadOnly()) {
//            item.attr("readonly", true);
//        }
//        var path = $('<a class="btnCodeActions"></a>');
//        /** @type {string} */
//        path[0].id = item[0].id + "_button";
//        path.on("click", init(self, item));
//        self.parentForm.addAutoComplete(self.parameter, item);
//        var refTable = $('<div style="width:100%;"></div>').append($('<div style="width:16px; float:right; margin-right:7px;margin-top: 10px;"></div>').append(path)).append($('<div style="margin-right:30px"></div>').append(item));
//        return refTable[0].rebuild = function (cb, data) {
//            return self.build(cb, data);
//        }, refTable;
//    };
//    /**
//     * @param {string} key
//     * @param {string} value
//     * @return {?}
//     */
//    JsonControl.prototype.build = function (key, value) {
//        var node = this;
//        /** @type {null} */
//        var data = null;
//        if (key && (data = node.parameter.graph.getActionParameterDefinition(key, node.parameter.parametertype)), !(data && data.length || ("RuleCheck" === node.parameter.parametertype && (data = node.parameter.graph.getActionParameterDefinition(key, "RuleGet")), data && data.length))) {
//            return node.generateBasicControl(value);
//        }
//        if (!(null !== value && "" !== value || "" !== data[0].Name)) {
//            value = data[0].DefaultValue;
//        }
//        var input = $('<input type="text"></input>');
//        input[0].id = node.parentForm.generateid(node.parameter.field, node.prefix);
//        input[0].name = node.parentForm.getElementCode(node.parameter);
//        if (void 0 !== value) {
//            /** @type {string} */
//            input[0].value = value;
//        }
//        if (node.parentForm.isReadOnly()) {
//            input.attr("readonly", true);
//        }
//        var r = $('<a class="btnCodeActions"></a>');
//        /** @type {string} */
//        r[0].id = input[0].id + "_button";
//        r.on("click", function () {
//            update(node, input, data);
//        });
//        var refTable = $('<div style="width:100%;"></div>').append($('<div style="width:16px; float:right; margin-right:7px;margin-top: 10px;"></div>').append(r)).append($('<div style="margin-right:30px"></div>').append(input));
//        return refTable[0].rebuild = function (data, callback) {
//            return node.build(data, callback);
//        }, refTable;
//    };
//}(), InputControl.prototype.generate = function (el, name, args) {
//    var form = this;
//    var self = $('<input type="text"></input>');
//    return self[0].id = form.parentForm.generateid(el.field, args), self[0].name = form.parentForm.getElementCode(el), void 0 !== name && (self[0].value = name), form.parentForm.isReadOnly() && self.attr("readonly", true), form.parentForm.addAutoComplete(el, self), void 0 !== el.onchange && self.on("change", function () {
//        el.onchange(self);
//    }), self.data("initial-value", name), self;
//}, CheckboxControl.prototype.generate = function (state, value, record) {
//    var form = this;
//    var element = $('<input type="checkbox"></input>');
//    return element[0].id = form.parentForm.generateid(state.field, record), element[0].checked = value, element[0].name = form.parentForm.getElementCode(state), form.parentForm.isReadOnly() && element.attr("disabled", "disabled"), element = $('<div class="ui checkbox"></div>').append(element).append("<label></label>"), !state.indeterminable || null !== value && void 0 !== value && "" !== value || element.checkbox("set indeterminate"), element;
//}, SelectControl.prototype.generate = function (scope, name, args) {
//    var form = this;
//    var el = $('<select class="ui selection dropdown"></select>');
//    /** @type {boolean} */
//    var o = false;
//    return el[0].id = form.parentForm.generateid(scope.field, args), el[0].name = form.parentForm.getElementCode(scope), el.append($("<option></option>")), void 0 !== scope.datasource && scope.datasource.forEach(function (data) {
//        var tabs = $("<option></option>");
//        if (void 0 === scope.displayfield) {
//            /** @type {!Object} */
//            tabs[0].value = data;
//            /** @type {!Object} */
//            tabs[0].innerHTML = data;
//        } else {
//            tabs[0].innerHTML = data[scope.displayfield];
//            if (void 0 !== scope.valuefield) {
//                tabs[0].value = data[scope.valuefield];
//            } else {
//                tabs[0].value = data[scope.displayfield];
//            }
//        }
//        if (!o) {
//            if (tabs[0].value == name) {
//                /** @type {string} */
//                tabs[0].selected = "selected";
//                /** @type {boolean} */
//                o = true;
//            } else {
//                if (void 0 !== name && null !== name && void 0 !== tabs[0].value && null !== tabs[0].value && tabs[0].value.toLowerCase() === name.toString().toLowerCase()) {
//                    /** @type {string} */
//                    tabs[0].selected = "selected";
//                    /** @type {boolean} */
//                    o = true;
//                }
//            }
//        }
//        if (form.parentForm.isReadOnly()) {
//            el.attr("disabled", "disabled");
//        }
//        el.append(tabs);
//    }), void 0 !== scope.onchange && el.on("change", function () {
//        scope.onchange(el);
//    }), el;
//};
//var Validation = {
//    checkType: function (type, value) {
//        var i = WorkflowDesignerConstants.EditParametersFormlabel;
//        switch (type) {
//            case "Number":
//                if (isNaN(value) || value === true || value === false) {
//                    return i.NumberRequired;
//                }
//                break;
//            case "DateTime":
//                if ("" !== value && null !== value && void 0 !== value && !moment(value, moment.ISO_8601).isValid()) {
//                    return i.DateShouldBeInISOFormat;
//                }
//        }
//        return null;
//    }
//};
//var WorkflowDesignerWindows = WorkflowDesignerWindows || {};
//WorkflowDesignerWindows.EditCodeActions = function () {
//    /**
//     * @param {!Array} events
//     * @param {!NodeList} props
//     * @return {?}
//     */
//    function sort(events, props) {
//        /** @type {!Array} */
//        var result = [];
//        return events.forEach(function (track) {
//            if (track.IsGlobal) {
//                /** @type {boolean} */
//                var a = false;
//                /** @type {number} */
//                var i = 0;
//                for (; i < events.length; i++) {
//                    if (track.Name == events[i].Name && track.IsGlobal != events[i].IsGlobal) {
//                        /** @type {boolean} */
//                        a = true;
//                        break;
//                    }
//                }
//                /** @type {boolean} */
//                var r = false;
//                /** @type {number} */
//                i = 0;
//                for (; i < props.length; i++) {
//                    if (a) {
//                        if (track.Name == props[i].Name && props[i].IsGlobal) {
//                            /** @type {boolean} */
//                            r = true;
//                            break;
//                        }
//                    } else {
//                        if (track.Name == props[i].Name) {
//                            /** @type {boolean} */
//                            r = true;
//                            break;
//                        }
//                    }
//                }
//                if (r) {
//                    result.push(track.Name);
//                }
//            }
//        }), result;
//    }
//    /**
//     * @param {?} data
//     * @param {!Array} fn
//     * @return {undefined}
//     */
//    function update(data, fn) {
//        /** @type {number} */
//        var i = 0;
//        /** @type {number} */
//        var key = 0;
//        $.each(fn, function (canCreateDiscussions, _props) {
//            switch (_props.type) {
//                case "Action":
//                    /** @type {number} */
//                    i = 0;
//                    for (; i < data.Activities.length; i = i + 1) {
//                        var component = data.Activities[i];
//                        if ("Inline" !== component.ActivityType) {
//                            if (component.Implementation) {
//                                /** @type {number} */
//                                key = 0;
//                                for (; key < component.Implementation.length; key = key + 1) {
//                                    if (component.Implementation[key].ActionName === _props.initial) {
//                                        component.Implementation[key].ActionName = _props.current;
//                                    }
//                                }
//                            }
//                            if (component.Implementation) {
//                                /** @type {number} */
//                                key = 0;
//                                for (; key < component.PreExecutionImplementation.length; key = key + 1) {
//                                    if (component.PreExecutionImplementation[key].ActionName === _props.initial) {
//                                        component.PreExecutionImplementation[key].ActionName = _props.current;
//                                    }
//                                }
//                            }
//                        }
//                    }
//                    break;
//                case "Condition":
//                    /** @type {number} */
//                    i = 0;
//                    for (; i < data.Transitions.length; i = i + 1) {
//                        var arg = data.Transitions[i];
//                        /** @type {number} */
//                        key = 0;
//                        for (; key < arg.Conditions.length; key = key + 1) {
//                            var record = arg.Conditions[key];
//                            if ("Action" === record.Type && record.Action.ActionName === _props.initial) {
//                                record.Action.ActionName = _props.current;
//                            }
//                        }
//                    }
//                    break;
//                case "RuleGet":
//                case "RuleCheck":
//                    /** @type {number} */
//                    i = 0;
//                    for (; i < data.Actors.length; i = i + 1) {
//                        if (data.Actors[i].Rule === _props.initial) {
//                            data.Actors[i].Rule = _props.current;
//                        }
//                    }
//            }
//        });
//    }
//    return function (node) {
//        var item = WorkflowDesignerConstants.CodeActionsFormLabel;
//        var defaults = {
//            type: "table",
//            title: item.Title,
//            data: node.graph.data.CodeActions,
//            datadefault: {},
//            elements: [{
//                name: item.Name,
//                field: "Name",
//                type: "input"
//            }, {
//                name: item.Type,
//                field: "Type",
//                type: "select",
//                displayfield: "Name",
//                datasource: [{
//                    Name: "Action"
//                }, {
//                    Name: "Condition"
//                }, {
//                    Name: "RuleGet"
//                }, {
//                    Name: "RuleCheck"
//                }]
//            }, {
//                name: item.IsGlobal,
//                field: "IsGlobal",
//                type: "checkbox"
//            }, {
//                name: item.IsAsync,
//                field: "IsAsync",
//                type: "checkbox"
//            }, {
//                name: item.ActionCode,
//                field: "ActionCode",
//                type: "code"
//            }, {
//                name: item.Parameters,
//                field: "ParameterDefinitions",
//                type: "parameters",
//                graph: node.graph
//            }],
//            graph: node.graph,
//            readonly: node.graph.Settings.readonly,
//            onrowadded: function (e, islongclick) {
//                e.find("[name=Type]").change(function () {
//                    enableElementSettingsField(e);
//                });
//                enableElementSettingsField(e);
//                e.find("[name=IsGlobal]").change(function () {
//                    if (!this.checked) {
//                        islongclick.InfoDialog(WorkflowDesignerConstants.Warning, WorkflowDesignerConstants.CodeActionsFormLabel.UnGlobalMessage, "mini");
//                    }
//                });
//            },
//            onrowdelete: function (e, islongclick) {
//                return e.find("[name=IsGlobal]")[0].checked && islongclick.InfoDialog(WorkflowDesignerConstants.Warning, WorkflowDesignerConstants.CodeActionsFormLabel.GlobalDeleteMessage, "mini"), true;
//            },
//            saveFunc: function (name, callback) {
//                node.SyncTable(node.graph.data.CodeActions, name, defaults);
//                /** @type {number} */
//                var i = 0;
//                for (; i < node.graph.data.CodeActions.length; i++) {
//                    var c = node.graph.data.CodeActions[i].ActionCode;
//                    var value = node.graph.data.CodeActions[i].ParameterDefinitions;
//                    if (node.graph.data.CodeActions[i].ActionCode = encodeURIComponent(c.code), node.graph.data.CodeActions[i].Usings = encodeURIComponent(c.usings), void 0 !== value && null !== value) {
//                        var nf = {};
//                        /** @type {!Array} */
//                        node.graph.data.CodeActions[i].ParameterDefinitions = new Array;
//                        $.each(value, function (canCreateDiscussions, data) {
//                            nf = {
//                                Name: data.Name,
//                                Type: data.Type,
//                                IsRequired: data.IsRequired,
//                                DefaultValue: data.DefaultValue
//                            };
//                            if ("Dropdown" === nf.Type) {
//                                /** @type {!Array} */
//                                nf.DropdownValues = new Array;
//                                $.each(data.DropdownValues, function (canCreateDiscussions, data) {
//                                    nf.DropdownValues.push({
//                                        Name: data.Name,
//                                        Value: data.Value
//                                    });
//                                });
//                            }
//                            node.graph.data.CodeActions[i].ParameterDefinitions.push(nf);
//                        });
//                    }
//                }
//                if (callback.length) {
//                    update(node.graph.data, callback);
//                }
//                WorkflowDesignerCommon.DataCorrection(node.graph.data);
//                node.graph.Draw(node.graph.data);
//                node.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != node.graph.Settings.forms && void 0 != node.graph.Settings.forms.codeactions) {
//            return void node.graph.Settings.forms.codeactions(defaults);
//        }
//        var that = new WorkflowDesignerForm(defaults);
//        /**
//         * @param {!Object} element
//         * @return {undefined}
//         */
//        var enableElementSettingsField = function (element) {
//            var tblr = element.find("[name=Type]")[0];
//            var auto_oauth_realm = element.find("[name=IsAsync]");
//            if (void 0 === tblr || "RuleGet" !== tblr.value && "RuleCheck" !== tblr.value) {
//                auto_oauth_realm.attr("disabled", false);
//            } else {
//                auto_oauth_realm.attr("disabled", true);
//                auto_oauth_realm.attr("checked", false);
//            }
//        };
//        /**
//         * @param {!NodeList} data
//         * @param {?} sendResponseCallback
//         * @return {?}
//         */
//        var init = function (data, sendResponseCallback) {
//            /** @type {number} */
//            var i = 0;
//            for (; i < data.length; i++) {
//                var item = data[i];
//                if (!(void 0 === item.ActionCode || void 0 !== item.ActionCode.code && item.ActionCode.code)) {
//                    if ("Action" === item.Type) {
//                        /** @type {string} */
//                        item.ActionCode.code = "return;";
//                    } else {
//                        if ("Condition" === item.Type) {
//                            /** @type {string} */
//                            item.ActionCode.code = "return false;";
//                        } else {
//                            if ("RuleGet" === item.Type) {
//                                /** @type {string} */
//                                item.ActionCode.code = "return new List<string>();";
//                            } else {
//                                if ("RuleCheck" === item.Type) {
//                                    /** @type {string} */
//                                    item.ActionCode.code = "return false;";
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//            if (that.CheckRequired(data, ["Name", "Type", "ActionCode.code"], WorkflowDesignerConstants.FieldIsRequired) && that.CheckUnique(data, ["Name", "Type", "IsGlobal"], WorkflowDesignerConstants.FieldMustBeUnique)) {
//                /** @type {!Array} */
//                var results = new Array;
//                /** @type {number} */
//                i = 0;
//                for (; i < data.length; i++) {
//                    item = data[i];
//                    var y = $(item.control_Name).data("initial-value");
//                    var value = item.Name;
//                    if (y !== value) {
//                        results.push({
//                            initial: y,
//                            current: value,
//                            type: item.Type
//                        });
//                    }
//                }
//                that.ClearTempField(data);
//                var result = sort(node.graph.data.CodeActions, data);
//                return result.length > 0 && node.graph.designer.deleteGlobalCodeAction(result, function (options) {
//                    return options.isError && that.InfoDialog(WorkflowDesignerConstants.EditCodeLabel.Error, options.errorMessage), false;
//                }), that.parameters.saveFunc(data, results), true;
//            }
//            return false;
//        };
//        that.showModal(init);
//    };
//}();
//WorkflowDesignerWindows = WorkflowDesignerWindows || {};
//WorkflowDesignerWindows.EditTimer = function () {
//    return function ($) {
//        var record = WorkflowDesignerConstants.TimerFormLabel;
//        var defaults = {
//            type: "table",
//            title: record.Title,
//            width: "800px",
//            data: $.graph.data.Timers,
//            keyproperty: "Name",
//            elements: [{
//                name: record.Name,
//                field: "Name",
//                type: "input"
//            }, {
//                name: record.Type,
//                field: "Type",
//                type: "select",
//                datasource: $.graph.data.AdditionalParams.TimerTypes
//            }, {
//                name: record.Value,
//                field: "Value",
//                type: "input"
//            }, {
//                name: record.NotOverrideIfExists,
//                field: "NotOverrideIfExists",
//                type: "checkbox"
//            }],
//            readonly: $.graph.Settings.readonly,
//            saveFunc: function (name) {
//                $.SyncTable($.graph.data.Timers, name, defaults);
//                WorkflowDesignerCommon.DataCorrection($.graph.data);
//                $.graph.Draw($.graph.data);
//                $.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != $.graph.Settings.forms && void 0 != $.graph.Settings.forms.timers) {
//            return void $.graph.Settings.forms.timers(defaults);
//        }
//        var self = new WorkflowDesignerForm(defaults);
//        /**
//         * @param {!NodeList} name
//         * @param {?} subscriptions
//         * @return {?}
//         */
//        var onSuccess = function (name, subscriptions) {
//            return !(!self.CheckRequired(name, ["Name", "Type", "Value"], WorkflowDesignerConstants.FieldIsRequired) || !self.CheckUnique(name, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (self.ClearTempField(name), void 0 == $.graph.data.Timers && ($.graph.data.Timers = []), self.parameters.saveFunc(name), true);
//        };
//        self.showModal(onSuccess);
//    };
//}();
//WorkflowDesignerWindows = WorkflowDesignerWindows || {};
//WorkflowDesignerWindows.EditActors = function () {
//    return function ($scope) {
//        var data = WorkflowDesignerConstants.ActorFormLabel;
//        var result = {
//            type: "table",
//            title: data.Title,
//            width: "800px",
//            data: $scope.graph.data.Actors,
//            keyproperty: "Name",
//            elements: [{
//                name: data.Name,
//                field: "Name",
//                type: "input"
//            }, {
//                name: data.Rule,
//                field: "Rule",
//                type: "select",
//                datasource: $scope.graph.getActorNames(),
//                onchange: function (p) {
//                    var t = $(p);
//                    var jQScrollable = t.closest("tr").find("[name=actoractionparam]").closest("td");
//                    var arr = jQScrollable.children();
//                    var id = arr[0].rebuild($(p).val(), arr.find("input").val());
//                    arr.remove();
//                    jQScrollable.append(id);
//                }
//            }, {
//                name: data.Value,
//                field: "Value",
//                type: "jsonparameter",
//                code: "actoractionparam",
//                graph: $scope.graph,
//                parametertype: "RuleCheck",
//                openautocompleteonclick: true,
//                datasource: function (source, require) {
//                    var detailsTr = $(this).closest("tr");
//                    var _name = detailsTr.find("[name=Rule]")[0].value;
//                    require($scope.graph.getAutoCompleteSuggestions("ruleparameter", _name, source));
//                }
//            }],
//            graph: $scope.graph,
//            readonly: $scope.graph.Settings.readonly,
//            saveFunc: function (name) {
//                $scope.SyncTable($scope.graph.data.Actors, name, result);
//                WorkflowDesignerCommon.DataCorrection($scope.graph.data);
//                $scope.graph.Draw($scope.graph.data);
//                $scope.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != $scope.graph.Settings.forms && void 0 != $scope.graph.Settings.forms.actors) {
//            return void $scope.graph.Settings.forms.actors(result);
//        }
//        var query = new WorkflowDesignerForm(result);
//        /**
//         * @param {!NodeList} i
//         * @param {?} $page
//         * @return {?}
//         */
//        var callback = function (i, $page) {
//            return !(!query.CheckRequired(i, ["Name", "Rule"], WorkflowDesignerConstants.FieldIsRequired) || !query.CheckUnique(i, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique)) && (query.ClearTempField(i), query.parameters.saveFunc(i), true);
//        };
//        query.showModal(callback);
//    };
//}();
//WorkflowDesignerWindows = WorkflowDesignerWindows || {};
//WorkflowDesignerWindows.EditCommands = function () {
//    return function (data) {
//        var style = WorkflowDesignerConstants.CommandFormLabel;
//        /**
//         * @param {!Object} t
//         * @param {string} e
//         * @param {string} value
//         * @return {undefined}
//         */
//        var enter = function (t, e, value) {
//            var title = void 0;
//            var name = void 0;
//            var sortedPrimaryLocales = t.getEditData(t.parameters);
//            /** @type {number} */
//            var i = 0;
//            for (; i < sortedPrimaryLocales.length; i++) {
//                var l = sortedPrimaryLocales[i];
//                if (void 0 != l.InputParameters) {
//                    /** @type {number} */
//                    var i = 0;
//                    for (; i < l.InputParameters.length; i++) {
//                        if (l.InputParameters[i].control_DefaultValue.id === e.id) {
//                            name = l.InputParameters[i].Parameter.Name;
//                            break;
//                        }
//                    }
//                }
//            }
//            if (void 0 != name) {
//                var results = data.graph.data.Parameters;
//                /** @type {number} */
//                i = 0;
//                for (; i < results.length; i++) {
//                    if (results[i].Name === name) {
//                        title = results[i].Type;
//                        break;
//                    }
//                }
//            }
//            if (void 0 != title) {
//                data.graph.graph.getemptytype(title, value);
//            }
//        };
//        var payload = {
//            type: "table",
//            title: style.Title,
//            width: "900px",
//            data: data.graph.data.Commands,
//            datadefault: {},
//            keyproperty: "Name",
//            elements: [{
//                name: style.Name,
//                field: "Name",
//                type: "input"
//            }, {
//                name: style.InputParameters,
//                field: "InputParameters",
//                type: "table",
//                elements: [{
//                    name: style.InputParametersName,
//                    code: "ipname",
//                    field: "Name",
//                    type: "input",
//                    width: "30%"
//                }, {
//                    name: style.InputParametersParameter,
//                    code: "ipparameter",
//                    field: "Parameter.Name",
//                    type: "select",
//                    displayfield: "Name",
//                    datasource: data.graph.getNonSystemParameters()
//                }, {
//                    name: style.InputParametersIsRequired,
//                    code: "iisrequired",
//                    field: "IsRequired",
//                    type: "checkbox"
//                }, {
//                    name: style.InputParametersDefaultValue,
//                    code: "idefaultvalue",
//                    field: "DefaultValue",
//                    type: "json",
//                    width: "40%",
//                    getemptytype: enter
//                }]
//            }],
//            graph: data.graph,
//            readonly: data.graph.Settings.readonly,
//            saveFunc: function (name) {
//                data.SyncTable(data.graph.data.Commands, name, payload);
//                WorkflowDesignerCommon.DataCorrection(data.graph.data);
//                data.graph.Draw(data.graph.data);
//                data.graph.StoreGraphData();
//            }
//        };
//        if (void 0 != data.graph.Settings.forms && void 0 != data.graph.Settings.forms.commands) {
//            return void data.graph.Settings.forms.commands(payload);
//        }
//        var self = new WorkflowDesignerForm(payload);
//        /**
//         * @param {?} o
//         * @param {!Array} value
//         * @return {?}
//         */
//        var init = function (o, value) {
//            /** @type {boolean} */
//            var regA = true;
//            return regA = regA & o.CheckRequired(value, ["Name"], WorkflowDesignerConstants.FieldIsRequired), regA = regA & o.CheckUnique(value, ["Name"], WorkflowDesignerConstants.FieldMustBeUnique), value.forEach(function (results) {
//                if (!o.CheckRequired(results.InputParameters, ["Name", "Parameter.Name"], WorkflowDesignerConstants.FieldIsRequired)) {
//                    /** @type {boolean} */
//                    regA = false;
//                }
//            }), regA;
//        };
//        /**
//         * @param {!Arguments} name
//         * @return {?}
//         */
//        var show = function (name) {
//            return !!init(self, name) && (self.ClearTempField(name), self.parameters.saveFunc(name), true);
//        };
//        self.showModal(show);
//    };
//}();
//WorkflowDesignerWindows = WorkflowDesignerWindows || {};
//WorkflowDesignerWindows.ConfirmDialog = function () {
//    return function (isSlidingUp, canCreateDiscussions, confirmCallback, n, saveNotifs) {
//        var options = $('<div tabindex="0" class="ui mini modal WorkflowDesignerConfirmDialog"></div>');
//        options.append($('<div class="header">' + WorkflowDesignerConstants.DialogConfirmText + "</div>"));
//        options.append($('<div class="content scrolling"><p>' + isSlidingUp + "</p></div>"));
//        var r = $('<div class="actions"></div>').append('<div tabindex="1" class="ui primary ok button">' + canCreateDiscussions + "</div>").append('<div class="ui secondary  cancel button">' + n + "</div>");
//        options.append(r);
//        WorkflowDesignerCommon.modal(options, {
//            onApprove: function () {
//                confirmCallback();
//            },
//            onDeny: function () {
//                saveNotifs();
//            },
//            allowMultiple: true,
//            dimmerSettings: {
//                opacity: .2,
//                duration: {
//                    show: 0,
//                    hide: 0
//                }
//            },
//            transition: "fade"
//        });
//        WorkflowDesignerCommon.modal(options, "show");
//    };
//}(), function (global, factory) {
//    if ("object" == typeof exports && "undefined" != typeof module) {
//        module.exports = factory();
//    } else {
//        if ("function" == typeof define && define.amd) {
//            define(factory);
//        } else {
//            global.moment = factory();
//        }
//    }
//}(this, function () {
//    /**
//     * @return {?}
//     */
//    function hooks() {
//        return oldSetupComputes.apply(null, arguments);
//    }
//    /**
//     * @param {!Object} value
//     * @return {?}
//     */
//    function isArray(value) {
//        return value instanceof Array || "[object Array]" === Object.prototype.toString.call(value);
//    }
//    /**
//     * @param {!Object} x
//     * @return {?}
//     */
//    function isObject(x) {
//        return null != x && "[object Object]" === Object.prototype.toString.call(x);
//    }
//    /**
//     * @param {!Array} val
//     * @return {?}
//     */
//    function isUndefined(val) {
//        return void 0 === val;
//    }
//    /**
//     * @param {string} input
//     * @return {?}
//     */
//    function isNumber(input) {
//        return "number" == typeof input || "[object Number]" === Object.prototype.toString.call(input);
//    }
//    /**
//     * @param {!Object} input
//     * @return {?}
//     */
//    function isDate(input) {
//        return input instanceof Date || "[object Date]" === Object.prototype.toString.call(input);
//    }
//    /**
//     * @param {!Array} array
//     * @param {!Function} fn
//     * @return {?}
//     */
//    function map(array, fn) {
//        var i;
//        /** @type {!Array} */
//        var result = [];
//        /** @type {number} */
//        i = 0;
//        for (; i < array.length; ++i) {
//            result.push(fn(array[i], i));
//        }
//        return result;
//    }
//    /**
//     * @param {!Object} a
//     * @param {string} b
//     * @return {?}
//     */
//    function hasOwnProp(a, b) {
//        return Object.prototype.hasOwnProperty.call(a, b);
//    }
//    /**
//     * @param {string} a
//     * @param {string} b
//     * @return {?}
//     */
//    function extend(a, b) {
//        var prop;
//        for (prop in b) {
//            if (hasOwnProp(b, prop)) {
//                a[prop] = b[prop];
//            }
//        }
//        return hasOwnProp(b, "toString") && (a.toString = b.toString), hasOwnProp(b, "valueOf") && (a.valueOf = b.valueOf), a;
//    }
//    /**
//     * @param {?} input
//     * @param {!Array} format
//     * @param {!Object} locale
//     * @param {!Object} strict
//     * @return {?}
//     */
//    function createUTC(input, format, locale, strict) {
//        return createLocalOrUTC(input, format, locale, strict, true).utc();
//    }
//    /**
//     * @param {!Object} config
//     * @return {?}
//     */
//    function getParsingFlags(config) {
//        return null == config._pf && (config._pf = {
//            empty: false,
//            unusedTokens: [],
//            unusedInput: [],
//            overflow: -2,
//            charsLeftOver: 0,
//            nullInput: false,
//            invalidMonth: null,
//            invalidFormat: false,
//            userInvalidated: false,
//            iso: false,
//            parsedDateParts: [],
//            meridiem: null,
//            rfc2822: false,
//            weekdayMismatch: false
//        }), config._pf;
//    }
//    /**
//     * @param {!Object} m
//     * @return {?}
//     */
//    function isValid(m) {
//        if (null == m._isValid) {
//            var flags = getParsingFlags(m);
//            var parsedParts = some$1.call(flags.parsedDateParts, function (canCreateDiscussions) {
//                return null != canCreateDiscussions;
//            });
//            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
//            if (m._strict && (isNowValid = isNowValid && 0 === flags.charsLeftOver && 0 === flags.unusedTokens.length && void 0 === flags.bigHour), null != Object.isFrozen && Object.isFrozen(m)) {
//                return isNowValid;
//            }
//            m._isValid = isNowValid;
//        }
//        return m._isValid;
//    }
//    /**
//     * @param {string} params
//     * @return {?}
//     */
//    function createInvalid(params) {
//        var m = createUTC(NaN);
//        return null != params ? extend(getParsingFlags(m), params) : getParsingFlags(m).userInvalidated = true, m;
//    }
//    /**
//     * @param {!Object} to
//     * @param {!Object} from
//     * @return {?}
//     */
//    function copyConfig(to, from) {
//        var i;
//        var attr;
//        var val;
//        if (isUndefined(from._isAMomentObject) || (to._isAMomentObject = from._isAMomentObject), isUndefined(from._i) || (to._i = from._i), isUndefined(from._f) || (to._f = from._f), isUndefined(from._l) || (to._l = from._l), isUndefined(from._strict) || (to._strict = from._strict), isUndefined(from._tzm) || (to._tzm = from._tzm), isUndefined(from._isUTC) || (to._isUTC = from._isUTC), isUndefined(from._offset) || (to._offset = from._offset), isUndefined(from._pf) || (to._pf = getParsingFlags(from)),
//            isUndefined(from._locale) || (to._locale = from._locale), 0 < for_check.length) {
//            /** @type {number} */
//            i = 0;
//            for (; i < for_check.length; i++) {
//                if (!isUndefined(val = from[attr = for_check[i]])) {
//                    to[attr] = val;
//                }
//            }
//        }
//        return to;
//    }
//    /**
//     * @param {!Object} config
//     * @return {undefined}
//     */
//    function Moment(config) {
//        copyConfig(this, config);
//        /** @type {!Date} */
//        this._d = new Date(null != config._d ? config._d.getTime() : NaN);
//        if (!this.isValid()) {
//            /** @type {!Date} */
//            this._d = new Date(NaN);
//        }
//        if (false === nt) {
//            /** @type {boolean} */
//            nt = true;
//            hooks.updateOffset(this);
//            /** @type {boolean} */
//            nt = false;
//        }
//    }
//    /**
//     * @param {!Object} obj
//     * @return {?}
//     */
//    function isMoment(obj) {
//        return obj instanceof Moment || null != obj && null != obj._isAMomentObject;
//    }
//    /**
//     * @param {number} number
//     * @return {?}
//     */
//    function absFloor(number) {
//        return number < 0 ? Math.ceil(number) || 0 : Math.floor(number);
//    }
//    /**
//     * @param {!Object} str
//     * @return {?}
//     */
//    function toInt(str) {
//        /** @type {number} */
//        var val = +str;
//        /** @type {number} */
//        var value = 0;
//        return 0 !== val && isFinite(val) && (value = absFloor(val)), value;
//    }
//    /**
//     * @param {!Object} array1
//     * @param {!Object} array2
//     * @param {string} dontConvert
//     * @return {?}
//     */
//    function compareArrays(array1, array2, dontConvert) {
//        var i;
//        /** @type {number} */
//        var ncells = Math.min(array1.length, array2.length);
//        /** @type {number} */
//        var o = Math.abs(array1.length - array2.length);
//        /** @type {number} */
//        var ret = 0;
//        /** @type {number} */
//        i = 0;
//        for (; i < ncells; i++) {
//            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
//                ret++;
//            }
//        }
//        return ret + o;
//    }
//    /**
//     * @param {string} msg
//     * @return {undefined}
//     */
//    function printMsg(msg) {
//        if (false === hooks.suppressDeprecationWarnings && "undefined" != typeof console && console.warn) {
//            console.warn("Deprecation warning: " + msg);
//        }
//    }
//    /**
//     * @param {string} msg
//     * @param {!Function} fn
//     * @return {?}
//     */
//    function deprecate(msg, fn) {
//        /** @type {boolean} */
//        var n = true;
//        return extend(function () {
//            if (null != hooks.deprecationHandler && hooks.deprecationHandler(null, msg), n) {
//                var result;
//                /** @type {!Array} */
//                var o = [];
//                /** @type {number} */
//                var i = 0;
//                for (; i < arguments.length; i++) {
//                    if (result = "", "object" == typeof arguments[i]) {
//                        var p;
//                        for (p in result = result + ("\n[" + i + "] "), arguments[0]) {
//                            /** @type {string} */
//                            result = result + (p + ": " + arguments[0][p] + ", ");
//                        }
//                        /** @type {string} */
//                        result = result.slice(0, -2);
//                    } else {
//                        result = arguments[i];
//                    }
//                    o.push(result);
//                }
//                printMsg(msg + "\nArguments: " + Array.prototype.slice.call(o).join("") + "\n" + (new Error).stack);
//                /** @type {boolean} */
//                n = false;
//            }
//            return fn.apply(this, arguments);
//        }, fn);
//    }
//    /**
//     * @param {string} name
//     * @param {string} msg
//     * @return {undefined}
//     */
//    function deprecateSimple(name, msg) {
//        if (null != hooks.deprecationHandler) {
//            hooks.deprecationHandler(name, msg);
//        }
//        if (!processedOptions[name]) {
//            printMsg(msg);
//            /** @type {boolean} */
//            processedOptions[name] = true;
//        }
//    }
//    /**
//     * @param {string} obj
//     * @return {?}
//     */
//    function isFunction(obj) {
//        return obj instanceof Function || "[object Function]" === Object.prototype.toString.call(obj);
//    }
//    /**
//     * @param {string} parentConfig
//     * @param {!Object} childConfig
//     * @return {?}
//     */
//    function mergeConfigs(parentConfig, childConfig) {
//        var prop;
//        var res = extend({}, parentConfig);
//        for (prop in childConfig) {
//            if (hasOwnProp(childConfig, prop)) {
//                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
//                    res[prop] = {};
//                    extend(res[prop], parentConfig[prop]);
//                    extend(res[prop], childConfig[prop]);
//                } else {
//                    if (null != childConfig[prop]) {
//                        res[prop] = childConfig[prop];
//                    } else {
//                        delete res[prop];
//                    }
//                }
//            }
//        }
//        for (prop in parentConfig) {
//            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
//                res[prop] = extend({}, res[prop]);
//            }
//        }
//        return res;
//    }
//    /**
//     * @param {string} config
//     * @return {undefined}
//     */
//    function Locale(config) {
//        if (null != config) {
//            this.set(config);
//        }
//    }
//    /**
//     * @param {string} unit
//     * @param {string} shorthand
//     * @return {undefined}
//     */
//    function addUnitAlias(unit, shorthand) {
//        var lowerCase = unit.toLowerCase();
//        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
//    }
//    /**
//     * @param {string} units
//     * @return {?}
//     */
//    function normalizeUnits(units) {
//        return "string" == typeof units ? aliases[units] || aliases[units.toLowerCase()] : void 0;
//    }
//    /**
//     * @param {!Object} inputObject
//     * @return {?}
//     */
//    function normalizeObjectUnits(inputObject) {
//        var normalizedProp;
//        var prop;
//        var normalizedInput = {};
//        for (prop in inputObject) {
//            if (hasOwnProp(inputObject, prop) && (normalizedProp = normalizeUnits(prop))) {
//                normalizedInput[normalizedProp] = inputObject[prop];
//            }
//        }
//        return normalizedInput;
//    }
//    /**
//     * @param {string} unit
//     * @param {number} priority
//     * @return {undefined}
//     */
//    function addUnitPriority(unit, priority) {
//        /** @type {number} */
//        priorities[unit] = priority;
//    }
//    /**
//     * @param {number} number
//     * @param {number} targetLength
//     * @param {string} forceSign
//     * @return {?}
//     */
//    function zeroFill(number, targetLength, forceSign) {
//        /** @type {string} */
//        var absNumber = "" + Math.abs(number);
//        /** @type {number} */
//        var zerosToFill = targetLength - absNumber.length;
//        return (0 <= number ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
//    }
//    /**
//     * @param {!Object} token
//     * @param {?} padded
//     * @param {?} ordinal
//     * @param {string} callback
//     * @return {undefined}
//     */
//    function addFormatToken(token, padded, ordinal, callback) {
//        /** @type {string} */
//        var func = callback;
//        if ("string" == typeof callback) {
//            /**
//             * @return {?}
//             */
//            func = function () {
//                return this[callback]();
//            };
//        }
//        if (token) {
//            formatTokenFunctions[token] = func;
//        }
//        if (padded) {
//            /**
//             * @return {?}
//             */
//            formatTokenFunctions[padded[0]] = function () {
//                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
//            };
//        }
//        if (ordinal) {
//            /**
//             * @return {?}
//             */
//            formatTokenFunctions[ordinal] = function () {
//                return this.localeData().ordinal(func.apply(this, arguments), token);
//            };
//        }
//    }
//    /**
//     * @param {!Object} m
//     * @param {string} format
//     * @return {?}
//     */
//    function format(m, format) {
//        return m.isValid() ? (format = expandFormat(format, m.localeData()), formatFunctions[format] = formatFunctions[format] || function (format) {
//            var i;
//            var l;
//            var key;
//            var array = format.match(formattingTokens);
//            /** @type {number} */
//            i = 0;
//            l = array.length;
//            for (; i < l; i++) {
//                if (formatTokenFunctions[array[i]]) {
//                    array[i] = formatTokenFunctions[array[i]];
//                } else {
//                    array[i] = (key = array[i]).match(/\[[\s\S]/) ? key.replace(/^\[|\]$/g, "") : key.replace(/\\/g, "");
//                }
//            }
//            return function (obj) {
//                var i;
//                /** @type {string} */
//                var pix_color = "";
//                /** @type {number} */
//                i = 0;
//                for (; i < l; i++) {
//                    pix_color = pix_color + (isFunction(array[i]) ? array[i].call(obj, format) : array[i]);
//                }
//                return pix_color;
//            };
//        }(format), formatFunctions[format](m)) : m.localeData().invalidDate();
//    }
//    /**
//     * @param {string} format
//     * @param {?} locale
//     * @return {?}
//     */
//    function expandFormat(format, locale) {
//        /**
//         * @param {string} input
//         * @return {?}
//         */
//        function replaceLongDateFormatTokens(input) {
//            return locale.longDateFormat(input) || input;
//        }
//        /** @type {number} */
//        var nCs = 5;
//        /** @type {number} */
//        localFormattingTokens.lastIndex = 0;
//        for (; 0 <= nCs && localFormattingTokens.test(format);) {
//            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
//            /** @type {number} */
//            localFormattingTokens.lastIndex = 0;
//            /** @type {number} */
//            nCs = nCs - 1;
//        }
//        return format;
//    }
//    /**
//     * @param {string} token
//     * @param {string} regex
//     * @param {!Object} strictRegex
//     * @return {undefined}
//     */
//    function addRegexToken(token, regex, strictRegex) {
//        regexes[token] = isFunction(regex) ? regex : function (isStrict, n) {
//            return isStrict && strictRegex ? strictRegex : regex;
//        };
//    }
//    /**
//     * @param {string} token
//     * @param {!Object} config
//     * @return {?}
//     */
//    function getParseRegexForToken(token, config) {
//        return hasOwnProp(regexes, token) ? regexes[token](config._strict, config._locale) : new RegExp(regexEscape(token.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (canCreateDiscussions, type, i, cur, perc) {
//            return type || i || cur || perc;
//        })));
//    }
//    /**
//     * @param {string} text
//     * @return {?}
//     */
//    function regexEscape(text) {
//        return text.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
//    }
//    /**
//     * @param {!Object} token
//     * @param {!Function} callback
//     * @return {undefined}
//     */
//    function addParseToken(token, callback) {
//        var j;
//        /** @type {!Function} */
//        var func = callback;
//        if ("string" == typeof token) {
//            /** @type {!Array} */
//            token = [token];
//        }
//        if (isNumber(callback)) {
//            /**
//             * @param {!Object} input
//             * @param {!Object} array
//             * @return {undefined}
//             */
//            func = function (input, array) {
//                array[callback] = toInt(input);
//            };
//        }
//        /** @type {number} */
//        j = 0;
//        for (; j < token.length; j++) {
//            tokens[token[j]] = func;
//        }
//    }
//    /**
//     * @param {!Array} token
//     * @param {!Function} callback
//     * @return {undefined}
//     */
//    function addWeekParseToken(token, callback) {
//        addParseToken(token, function (identifierPositions, i, b, missingCoins) {
//            b._w = b._w || {};
//            callback(identifierPositions, b._w, b, missingCoins);
//        });
//    }
//    /**
//     * @param {number} year
//     * @return {?}
//     */
//    function daysInYear(year) {
//        return isLeapYear(year) ? 366 : 365;
//    }
//    /**
//     * @param {number} year
//     * @return {?}
//     */
//    function isLeapYear(year) {
//        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
//    }
//    /**
//     * @param {string} unit
//     * @param {boolean} keepTime
//     * @return {?}
//     */
//    function makeGetSet(unit, keepTime) {
//        return function (year_date) {
//            return null != year_date ? (set(this, unit, year_date), hooks.updateOffset(this, keepTime), this) : get(this, unit);
//        };
//    }
//    /**
//     * @param {!Object} mom
//     * @param {string} unit
//     * @return {?}
//     */
//    function get(mom, unit) {
//        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
//    }
//    /**
//     * @param {!Object} mom
//     * @param {string} unit
//     * @param {number} date
//     * @return {undefined}
//     */
//    function set(mom, unit, date) {
//        if (mom.isValid() && !isNaN(date)) {
//            if ("FullYear" === unit && isLeapYear(mom.year()) && 1 === mom.month() && 29 === mom.date()) {
//                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](date, mom.month(), daysInMonth(date, mom.month()));
//            } else {
//                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](date);
//            }
//        }
//    }
//    /**
//     * @param {number} year
//     * @param {number} month
//     * @return {?}
//     */
//    function daysInMonth(year, month) {
//        if (isNaN(year) || isNaN(month)) {
//            return NaN;
//        }
//        var len;
//        /** @type {number} */
//        var idx = (month % (len = 12) + len) % len;
//        return year = year + (month - idx) / 12, 1 === idx ? isLeapYear(year) ? 29 : 28 : 31 - idx % 7 % 2;
//    }
//    /**
//     * @param {!Object} mom
//     * @param {number} value
//     * @return {?}
//     */
//    function setMonth(mom, value) {
//        var i;
//        if (!mom.isValid()) {
//            return mom;
//        }
//        if ("string" == typeof value) {
//            if (/^\d+$/.test(value)) {
//                value = toInt(value);
//            } else {
//                if (!isNumber(value = mom.localeData().monthsParse(value))) {
//                    return mom;
//                }
//            }
//        }
//        return i = Math.min(mom.date(), daysInMonth(mom.year(), value)), mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, i), mom;
//    }
//    /**
//     * @param {number} value
//     * @return {?}
//     */
//    function getSetMonth(value) {
//        return null != value ? (setMonth(this, value), hooks.updateOffset(this, true), this) : get(this, "Month");
//    }
//    /**
//     * @return {undefined}
//     */
//    function computeMonthsParse() {
//        /**
//         * @param {!NodeList} b
//         * @param {!NodeList} a
//         * @return {?}
//         */
//        function cmpLenRev(b, a) {
//            return a.length - b.length;
//        }
//        var i;
//        var mom;
//        /** @type {!Array} */
//        var shortPieces = [];
//        /** @type {!Array} */
//        var longPieces = [];
//        /** @type {!Array} */
//        var mixedPieces = [];
//        /** @type {number} */
//        i = 0;
//        for (; i < 12; i++) {
//            mom = createUTC([2e3, i]);
//            shortPieces.push(this.monthsShort(mom, ""));
//            longPieces.push(this.months(mom, ""));
//            mixedPieces.push(this.months(mom, ""));
//            mixedPieces.push(this.monthsShort(mom, ""));
//        }
//        shortPieces.sort(cmpLenRev);
//        longPieces.sort(cmpLenRev);
//        mixedPieces.sort(cmpLenRev);
//        /** @type {number} */
//        i = 0;
//        for (; i < 12; i++) {
//            shortPieces[i] = regexEscape(shortPieces[i]);
//            longPieces[i] = regexEscape(longPieces[i]);
//        }
//        /** @type {number} */
//        i = 0;
//        for (; i < 24; i++) {
//            mixedPieces[i] = regexEscape(mixedPieces[i]);
//        }
//        /** @type {!RegExp} */
//        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
//        /** @type {!RegExp} */
//        this._monthsShortRegex = this._monthsRegex;
//        /** @type {!RegExp} */
//        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
//        /** @type {!RegExp} */
//        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
//    }
//    /**
//     * @param {number} y
//     * @return {?}
//     */
//    function createUTCDate(y) {
//        var date;
//        if (y < 100 && 0 <= y) {
//            /** @type {!Array<?>} */
//            var d = Array.prototype.slice.call(arguments);
//            d[0] = y + 400;
//            /** @type {!Date} */
//            date = new Date(Date.UTC.apply(null, d));
//            if (isFinite(date.getUTCFullYear())) {
//                date.setUTCFullYear(y);
//            }
//        } else {
//            /** @type {!Date} */
//            date = new Date(Date.UTC.apply(null, arguments));
//        }
//        return date;
//    }
//    /**
//     * @param {number} year
//     * @param {number} dow
//     * @param {number} doy
//     * @return {?}
//     */
//    function firstWeekOffset(year, dow, doy) {
//        /** @type {number} */
//        var fwd = 7 + dow - doy;
//        return -((7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7) + fwd - 1;
//    }
//    /**
//     * @param {number} year
//     * @param {number} week
//     * @param {number} weekday
//     * @param {number} dow
//     * @param {number} doy
//     * @return {?}
//     */
//    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
//        var resYear;
//        var resDayOfYear;
//        var dayOfYear = 1 + 7 * (week - 1) + (7 + weekday - dow) % 7 + firstWeekOffset(year, dow, doy);
//        return resDayOfYear = dayOfYear <= 0 ? daysInYear(resYear = year - 1) + dayOfYear : dayOfYear > daysInYear(year) ? (resYear = year + 1, dayOfYear - daysInYear(year)) : (resYear = year, dayOfYear), {
//            year: resYear,
//            dayOfYear: resDayOfYear
//        };
//    }
//    /**
//     * @param {!Object} mom
//     * @param {number} dow
//     * @param {number} doy
//     * @return {?}
//     */
//    function weekOfYear(mom, dow, doy) {
//        var resWeek;
//        var unit;
//        var weekOffset = firstWeekOffset(mom.year(), dow, doy);
//        /** @type {number} */
//        var week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1;
//        return week < 1 ? resWeek = week + weeksInYear(unit = mom.year() - 1, dow, doy) : week > weeksInYear(mom.year(), dow, doy) ? (resWeek = week - weeksInYear(mom.year(), dow, doy), unit = mom.year() + 1) : (unit = mom.year(), resWeek = week), {
//            week: resWeek,
//            year: unit
//        };
//    }
//    /**
//     * @param {number} year
//     * @param {number} dow
//     * @param {number} doy
//     * @return {?}
//     */
//    function weeksInYear(year, dow, doy) {
//        var weekOffset = firstWeekOffset(year, dow, doy);
//        var weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
//        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
//    }
//    /**
//     * @param {string} t
//     * @param {?} e
//     * @return {?}
//     */
//    function data_extract(t, e) {
//        return t.slice(e, 7).concat(t.slice(0, e));
//    }
//    /**
//     * @return {undefined}
//     */
//    function computeWeekdaysParse() {
//        /**
//         * @param {!NodeList} b
//         * @param {!NodeList} a
//         * @return {?}
//         */
//        function cmpLenRev(b, a) {
//            return a.length - b.length;
//        }
//        var i;
//        var mom;
//        var minp;
//        var shortp;
//        var longp;
//        /** @type {!Array} */
//        var minPieces = [];
//        /** @type {!Array} */
//        var shortPieces = [];
//        /** @type {!Array} */
//        var longPieces = [];
//        /** @type {!Array} */
//        var mixedPieces = [];
//        /** @type {number} */
//        i = 0;
//        for (; i < 7; i++) {
//            mom = createUTC([2e3, 1]).day(i);
//            minp = this.weekdaysMin(mom, "");
//            shortp = this.weekdaysShort(mom, "");
//            longp = this.weekdays(mom, "");
//            minPieces.push(minp);
//            shortPieces.push(shortp);
//            longPieces.push(longp);
//            mixedPieces.push(minp);
//            mixedPieces.push(shortp);
//            mixedPieces.push(longp);
//        }
//        minPieces.sort(cmpLenRev);
//        shortPieces.sort(cmpLenRev);
//        longPieces.sort(cmpLenRev);
//        mixedPieces.sort(cmpLenRev);
//        /** @type {number} */
//        i = 0;
//        for (; i < 7; i++) {
//            shortPieces[i] = regexEscape(shortPieces[i]);
//            longPieces[i] = regexEscape(longPieces[i]);
//            mixedPieces[i] = regexEscape(mixedPieces[i]);
//        }
//        /** @type {!RegExp} */
//        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
//        /** @type {!RegExp} */
//        this._weekdaysShortRegex = this._weekdaysRegex;
//        /** @type {!RegExp} */
//        this._weekdaysMinRegex = this._weekdaysRegex;
//        /** @type {!RegExp} */
//        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
//        /** @type {!RegExp} */
//        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
//        /** @type {!RegExp} */
//        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
//    }
//    /**
//     * @return {?}
//     */
//    function hFormat() {
//        return this.hours() % 12 || 12;
//    }
//    /**
//     * @param {string} token
//     * @param {string} lowercase
//     * @return {undefined}
//     */
//    function meridiem(token, lowercase) {
//        addFormatToken(token, 0, 0, function () {
//            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
//        });
//    }
//    /**
//     * @param {?} isStrict
//     * @param {?} locale
//     * @return {?}
//     */
//    function matchMeridiem(isStrict, locale) {
//        return locale._meridiemParse;
//    }
//    /**
//     * @param {string} key
//     * @return {?}
//     */
//    function wrap(key) {
//        return key ? key.toLowerCase().replace("_", "-") : key;
//    }
//    /**
//     * @param {number} name
//     * @return {?}
//     */
//    function loadLocale(name) {
//        /** @type {null} */
//        var oldLocale = null;
//        if (!locales[name] && "undefined" != typeof module && module && module.exports) {
//            try {
//                oldLocale = globalLocale._abbr;
//                require("./locale/" + name);
//                getSetGlobalLocale(oldLocale);
//            } catch (e) {
//            }
//        }
//        return locales[name];
//    }
//    /**
//     * @param {string} key
//     * @param {!Arguments} values
//     * @return {?}
//     */
//    function getSetGlobalLocale(key, values) {
//        var data;
//        return key && ((data = isUndefined(values) ? getLocale(key) : defineLocale(key, values)) ? globalLocale = data : "undefined" != typeof console && console.warn && console.warn("Locale " + key + " not found. Did you forget to load it?")), globalLocale._abbr;
//    }
//    /**
//     * @param {string} name
//     * @param {!Object} config
//     * @return {?}
//     */
//    function defineLocale(name, config) {
//        if (null === config) {
//            return delete locales[name], null;
//        }
//        var locale;
//        var parentConfig = baseConfig;
//        if (config.abbr = name, null != locales[name]) {
//            deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
//            parentConfig = locales[name]._config;
//        } else {
//            if (null != config.parentLocale) {
//                if (null != locales[config.parentLocale]) {
//                    parentConfig = locales[config.parentLocale]._config;
//                } else {
//                    if (null == (locale = loadLocale(config.parentLocale))) {
//                        return localeFamilies[config.parentLocale] || (localeFamilies[config.parentLocale] = []), localeFamilies[config.parentLocale].push({
//                            name: name,
//                            config: config
//                        }), null;
//                    }
//                    parentConfig = locale._config;
//                }
//            }
//        }
//        return locales[name] = new Locale(mergeConfigs(parentConfig, config)), localeFamilies[name] && localeFamilies[name].forEach(function (x) {
//            defineLocale(x.name, x.config);
//        }), getSetGlobalLocale(name), locales[name];
//    }
//    /**
//     * @param {number} key
//     * @return {?}
//     */
//    function getLocale(key) {
//        var locale;
//        if (key && key._locale && key._locale._abbr && (key = key._locale._abbr), !key) {
//            return globalLocale;
//        }
//        if (!isArray(key)) {
//            if (locale = loadLocale(key)) {
//                return locale;
//            }
//            /** @type {!Array} */
//            key = [key];
//        }
//        return function (result) {
//            var j;
//            var next;
//            var locale;
//            var split;
//            /** @type {number} */
//            var i = 0;
//            for (; i < result.length;) {
//                j = (split = wrap(result[i]).split("-")).length;
//                next = (next = wrap(result[i + 1])) ? next.split("-") : null;
//                for (; 0 < j;) {
//                    if (locale = loadLocale(split.slice(0, j).join("-"))) {
//                        return locale;
//                    }
//                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
//                        break;
//                    }
//                    j--;
//                }
//                i++;
//            }
//            return globalLocale;
//        }(key);
//    }
//    /**
//     * @param {!Object} m
//     * @return {?}
//     */
//    function checkOverflow(m) {
//        var value;
//        var a = m._a;
//        return a && -2 === getParsingFlags(m).overflow && (value = a[1] < 0 || 11 < a[1] ? 1 : a[2] < 1 || a[2] > daysInMonth(a[0], a[1]) ? 2 : a[3] < 0 || 24 < a[3] || 24 === a[3] && (0 !== a[4] || 0 !== a[5] || 0 !== a[6]) ? 3 : a[4] < 0 || 59 < a[4] ? 4 : a[5] < 0 || 59 < a[5] ? 5 : a[6] < 0 || 999 < a[6] ? 6 : -1, getParsingFlags(m)._overflowDayOfYear && (value < 0 || 2 < value) && (value = 2), getParsingFlags(m)._overflowWeeks && -1 === value && (value = 7), getParsingFlags(m)._overflowWeekday &&
//            -1 === value && (value = 8), getParsingFlags(m).overflow = value), m;
//    }
//    /**
//     * @param {?} path
//     * @param {?} name
//     * @param {?} handler
//     * @return {?}
//     */
//    function defaults(path, name, handler) {
//        return null != path ? path : null != name ? name : handler;
//    }
//    /**
//     * @param {!Object} config
//     * @return {undefined}
//     */
//    function configFromArray(config) {
//        var i;
//        var date;
//        var currentDate;
//        var deleted;
//        var yearToUse;
//        /** @type {!Array} */
//        var input = [];
//        if (!config._d) {
//            var c;
//            var dt;
//            /** @type {!Object} */
//            c = config;
//            /** @type {!Date} */
//            dt = new Date(hooks.now());
//            /** @type {!Array} */
//            currentDate = c._useUTC ? [dt.getUTCFullYear(), dt.getUTCMonth(), dt.getUTCDate()] : [dt.getFullYear(), dt.getMonth(), dt.getDate()];
//            if (config._w && null == config._a[2] && null == config._a[1]) {
//                (function (config) {
//                    var w;
//                    var weekYear;
//                    var week;
//                    var weekday;
//                    var dow;
//                    var doy;
//                    var temp;
//                    var l;
//                    if (null != (w = config._w).GG || null != w.W || null != w.E) {
//                        /** @type {number} */
//                        dow = 1;
//                        /** @type {number} */
//                        doy = 4;
//                        weekYear = defaults(w.GG, config._a[0], weekOfYear(createLocal(), 1, 4).year);
//                        week = defaults(w.W, 1);
//                        if ((weekday = defaults(w.E, 1)) < 1 || 7 < weekday) {
//                            /** @type {boolean} */
//                            l = true;
//                        }
//                    } else {
//                        dow = config._locale._week.dow;
//                        doy = config._locale._week.doy;
//                        var curWeek = weekOfYear(createLocal(), dow, doy);
//                        weekYear = defaults(w.gg, config._a[0], curWeek.year);
//                        week = defaults(w.w, curWeek.week);
//                        if (null != w.d) {
//                            if ((weekday = w.d) < 0 || 6 < weekday) {
//                                /** @type {boolean} */
//                                l = true;
//                            }
//                        } else {
//                            if (null != w.e) {
//                                weekday = w.e + dow;
//                                if (w.e < 0 || 6 < w.e) {
//                                    /** @type {boolean} */
//                                    l = true;
//                                }
//                            } else {
//                                weekday = dow;
//                            }
//                        }
//                    }
//                    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
//                        /** @type {boolean} */
//                        getParsingFlags(config)._overflowWeeks = true;
//                    } else {
//                        if (null != l) {
//                            /** @type {boolean} */
//                            getParsingFlags(config)._overflowWeekday = true;
//                        } else {
//                            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
//                            config._a[0] = temp.year;
//                            config._dayOfYear = temp.dayOfYear;
//                        }
//                    }
//                })(config);
//            }
//            if (null != config._dayOfYear) {
//                yearToUse = defaults(config._a[0], currentDate[0]);
//                if (config._dayOfYear > daysInYear(yearToUse) || 0 === config._dayOfYear) {
//                    /** @type {boolean} */
//                    getParsingFlags(config)._overflowDayOfYear = true;
//                }
//                date = createUTCDate(yearToUse, 0, config._dayOfYear);
//                config._a[1] = date.getUTCMonth();
//                config._a[2] = date.getUTCDate();
//            }
//            /** @type {number} */
//            i = 0;
//            for (; i < 3 && null == config._a[i]; ++i) {
//                config._a[i] = input[i] = currentDate[i];
//            }
//            for (; i < 7; i++) {
//                config._a[i] = input[i] = null == config._a[i] ? 2 === i ? 1 : 0 : config._a[i];
//            }
//            if (24 === config._a[3] && 0 === config._a[4] && 0 === config._a[5] && 0 === config._a[6]) {
//                /** @type {boolean} */
//                config._nextDay = true;
//                /** @type {number} */
//                config._a[3] = 0;
//            }
//            config._d = (config._useUTC ? createUTCDate : function (y, i, d, hour, minute, s, ms) {
//                var date;
//                return y < 100 && 0 <= y ? (date = new Date(y + 400, i, d, hour, minute, s, ms), isFinite(date.getFullYear()) && date.setFullYear(y)) : date = new Date(y, i, d, hour, minute, s, ms), date;
//            }).apply(null, input);
//            deleted = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
//            if (null != config._tzm) {
//                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
//            }
//            if (config._nextDay) {
//                /** @type {number} */
//                config._a[3] = 24;
//            }
//            if (config._w && void 0 !== config._w.d && config._w.d !== deleted) {
//                /** @type {boolean} */
//                getParsingFlags(config).weekdayMismatch = true;
//            }
//        }
//    }
//    /**
//     * @param {!Object} config
//     * @return {?}
//     */
//    function configFromISO(config) {
//        var i;
//        var tableslen;
//        var dontAddBase;
//        var dateFormat;
//        var timeFormat;
//        var tzFormat;
//        var string = config._i;
//        /** @type {(Array<string>|null)} */
//        var lines = leadingTextRegExp.exec(string) || reLine.exec(string);
//        if (lines) {
//            /** @type {boolean} */
//            getParsingFlags(config).iso = true;
//            /** @type {number} */
//            i = 0;
//            /** @type {number} */
//            tableslen = tables.length;
//            for (; i < tableslen; i++) {
//                if (tables[i][1].exec(lines[1])) {
//                    dateFormat = tables[i][0];
//                    /** @type {boolean} */
//                    dontAddBase = false !== tables[i][2];
//                    break;
//                }
//            }
//            if (null == dateFormat) {
//                return void (config._isValid = false);
//            }
//            if (lines[3]) {
//                /** @type {number} */
//                i = 0;
//                /** @type {number} */
//                tableslen = onCompleteBindings.length;
//                for (; i < tableslen; i++) {
//                    if (onCompleteBindings[i][1].exec(lines[3])) {
//                        timeFormat = (lines[2] || " ") + onCompleteBindings[i][0];
//                        break;
//                    }
//                }
//                if (null == timeFormat) {
//                    return void (config._isValid = false);
//                }
//            }
//            if (!dontAddBase && null != timeFormat) {
//                return void (config._isValid = false);
//            }
//            if (lines[4]) {
//                if (!moveRegex.exec(lines[4])) {
//                    return void (config._isValid = false);
//                }
//                /** @type {string} */
//                tzFormat = "Z";
//            }
//            /** @type {string} */
//            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
//            configFromStringAndFormat(config);
//        } else {
//            /** @type {boolean} */
//            config._isValid = false;
//        }
//    }
//    /**
//     * @param {string} e
//     * @param {string} value
//     * @param {string} spec
//     * @param {string} n
//     * @param {string} a
//     * @param {string} item
//     * @return {?}
//     */
//    function replace(e, value, spec, n, a, item) {
//        /** @type {!Array} */
//        var final = [function (obj) {
//            /** @type {number} */
//            var t = parseInt(obj, 10);
//            return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t;
//        }(e), monthsShort.indexOf(value), parseInt(spec, 10), parseInt(n, 10), parseInt(a, 10)];
//        return item && final.push(parseInt(item, 10)), final;
//    }
//    /**
//     * @param {!Object} config
//     * @return {undefined}
//     */
//    function init(config) {
//        var full;
//        var result;
//        var conf;
//        /** @type {(Array<string>|null)} */
//        var ids = filename_pttrn.exec(config._i.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, ""));
//        if (ids) {
//            var file = replace(ids[4], ids[3], ids[2], ids[5], ids[6], ids[7]);
//            if (full = ids[1], result = file, conf = config, full && fragment.indexOf(full) !== (new Date(result[0], result[1], result[2])).getDay() && (getParsingFlags(conf).weekdayMismatch = true, !(conf._isValid = false))) {
//                return;
//            }
//            config._a = file;
//            config._tzm = function (wikiId, canCreateDiscussions, byDay) {
//                if (wikiId) {
//                    return subwikiListsCache[wikiId];
//                }
//                if (canCreateDiscussions) {
//                    return 0;
//                }
//                /** @type {number} */
//                var n = parseInt(byDay, 10);
//                /** @type {number} */
//                var i = n % 100;
//                return (n - i) / 100 * 60 + i;
//            }(ids[8], ids[9], ids[10]);
//            config._d = createUTCDate.apply(null, config._a);
//            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
//            /** @type {boolean} */
//            getParsingFlags(config).rfc2822 = true;
//        } else {
//            /** @type {boolean} */
//            config._isValid = false;
//        }
//    }
//    /**
//     * @param {!Object} config
//     * @return {undefined}
//     */
//    function configFromStringAndFormat(config) {
//        if (config._f !== hooks.ISO_8601) {
//            if (config._f !== hooks.RFC_2822) {
//                /** @type {!Array} */
//                config._a = [];
//                /** @type {boolean} */
//                getParsingFlags(config).empty = true;
//                var i;
//                var parsedInput;
//                var marks;
//                var match;
//                var groups;
//                var token;
//                var input;
//                var value;
//                /** @type {string} */
//                var string = "" + config._i;
//                /** @type {number} */
//                var stringLength = string.length;
//                /** @type {number} */
//                var totalParsedInputLength = 0;
//                marks = expandFormat(config._f, config._locale).match(formattingTokens) || [];
//                /** @type {number} */
//                i = 0;
//                for (; i < marks.length; i++) {
//                    match = marks[i];
//                    if (parsedInput = (string.match(getParseRegexForToken(match, config)) || [])[0]) {
//                        if (0 < (groups = string.substr(0, string.indexOf(parsedInput))).length) {
//                            getParsingFlags(config).unusedInput.push(groups);
//                        }
//                        /** @type {string} */
//                        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
//                        totalParsedInputLength = totalParsedInputLength + parsedInput.length;
//                    }
//                    if (formatTokenFunctions[match]) {
//                        if (parsedInput) {
//                            /** @type {boolean} */
//                            getParsingFlags(config).empty = false;
//                        } else {
//                            getParsingFlags(config).unusedTokens.push(match);
//                        }
//                        token = match;
//                        /** @type {!Object} */
//                        value = config;
//                        if (null != (input = parsedInput) && hasOwnProp(tokens, token)) {
//                            tokens[token](input, value._a, value, token);
//                        }
//                    } else {
//                        if (config._strict && !parsedInput) {
//                            getParsingFlags(config).unusedTokens.push(match);
//                        }
//                    }
//                }
//                /** @type {number} */
//                getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
//                if (0 < string.length) {
//                    getParsingFlags(config).unusedInput.push(string);
//                }
//                if (config._a[3] <= 12 && true === getParsingFlags(config).bigHour && 0 < config._a[3]) {
//                    getParsingFlags(config).bigHour = void 0;
//                }
//                /** @type {!Array<?>} */
//                getParsingFlags(config).parsedDateParts = config._a.slice(0);
//                getParsingFlags(config).meridiem = config._meridiem;
//                config._a[3] = function (locale, value, meridiem) {
//                    var needsProperty;
//                    return null == meridiem ? value : null != locale.meridiemHour ? locale.meridiemHour(value, meridiem) : (null != locale.isPM && ((needsProperty = locale.isPM(meridiem)) && value < 12 && (value = value + 12), needsProperty || 12 !== value || (value = 0)), value);
//                }(config._locale, config._a[3], config._meridiem);
//                configFromArray(config);
//                checkOverflow(config);
//            } else {
//                init(config);
//            }
//        } else {
//            configFromISO(config);
//        }
//    }
//    /**
//     * @param {!Object} config
//     * @return {?}
//     */
//    function parse(config) {
//        var value;
//        var val;
//        var m;
//        var y;
//        var input = config._i;
//        var options = config._f;
//        return config._locale = config._locale || getLocale(config._l), null === input || void 0 === options && "" === input ? createInvalid({
//            nullInput: true
//        }) : ("string" == typeof input && (config._i = input = config._locale.preparse(input)), isMoment(input) ? new Moment(checkOverflow(input)) : (isDate(input) ? config._d = input : isArray(options) ? function (config) {
//            var tempConfig;
//            var bestMoment;
//            var scoreToBeat;
//            var i;
//            var currentScore;
//            if (0 === config._f.length) {
//                return getParsingFlags(config).invalidFormat = true, config._d = new Date(NaN);
//            }
//            /** @type {number} */
//            i = 0;
//            for (; i < config._f.length; i++) {
//                /** @type {number} */
//                currentScore = 0;
//                tempConfig = copyConfig({}, config);
//                if (null != config._useUTC) {
//                    tempConfig._useUTC = config._useUTC;
//                }
//                tempConfig._f = config._f[i];
//                configFromStringAndFormat(tempConfig);
//                if (isValid(tempConfig)) {
//                    currentScore = currentScore + getParsingFlags(tempConfig).charsLeftOver;
//                    currentScore = currentScore + 10 * getParsingFlags(tempConfig).unusedTokens.length;
//                    getParsingFlags(tempConfig).score = currentScore;
//                    if (null == scoreToBeat || currentScore < scoreToBeat) {
//                        scoreToBeat = currentScore;
//                        bestMoment = tempConfig;
//                    }
//                }
//            }
//            extend(config, bestMoment || tempConfig);
//        }(config) : options ? configFromStringAndFormat(config) : isUndefined(val = (value = config)._i) ? value._d = new Date(hooks.now()) : isDate(val) ? value._d = new Date(val.valueOf()) : "string" == typeof val ? (m = value, null === (y = aspNetJsonRegex.exec(m._i)) ? (configFromISO(m), false === m._isValid && (delete m._isValid, init(m), false === m._isValid && (delete m._isValid, hooks.createFromInputFallback(m)))) : m._d = new Date(+y[1])) : isArray(val) ? (value._a = map(val.slice(0), function (id_local) {
//            return parseInt(id_local, 10);
//        }), configFromArray(value)) : isObject(val) ? function (config) {
//            if (!config._d) {
//                var normalizedInput = normalizeObjectUnits(config._i);
//                config._a = map([normalizedInput.year, normalizedInput.month, normalizedInput.day || normalizedInput.date, normalizedInput.hour, normalizedInput.minute, normalizedInput.second, normalizedInput.millisecond], function (start) {
//                    return start && parseInt(start, 10);
//                });
//                configFromArray(config);
//            }
//        }(value) : isNumber(val) ? value._d = new Date(val) : hooks.createFromInputFallback(value), isValid(config) || (config._d = null), config));
//    }
//    /**
//     * @param {!Object} input
//     * @param {!Array} format
//     * @param {!Object} locale
//     * @param {!Object} strict
//     * @param {boolean} isUTC
//     * @return {?}
//     */
//    function createLocalOrUTC(input, format, locale, strict, isUTC) {
//        var res;
//        var c = {};
//        return true !== locale && false !== locale || (strict = locale, locale = void 0), (isObject(input) && function (e) {
//            if (Object.getOwnPropertyNames) {
//                return 0 === Object.getOwnPropertyNames(e).length;
//            }
//            var t;
//            for (t in e) {
//                if (e.hasOwnProperty(t)) {
//                    return false;
//                }
//            }
//            return true;
//        }(input) || isArray(input) && 0 === input.length) && (input = void 0), c._isAMomentObject = true, c._useUTC = c._isUTC = isUTC, c._l = locale, c._i = input, c._f = format, c._strict = strict, (res = new Moment(checkOverflow(parse(c))))._nextDay && (res.add(1, "d"), res._nextDay = void 0), res;
//    }
//    /**
//     * @param {!Object} input
//     * @param {!Array} format
//     * @param {!Object} locale
//     * @param {!Object} strict
//     * @return {?}
//     */
//    function createLocal(input, format, locale, strict) {
//        return createLocalOrUTC(input, format, locale, strict, false);
//    }
//    /**
//     * @param {string} fn
//     * @param {!Object} moments
//     * @return {?}
//     */
//    function pickBy(fn, moments) {
//        var res;
//        var i;
//        if (1 === moments.length && isArray(moments[0]) && (moments = moments[0]), !moments.length) {
//            return createLocal();
//        }
//        res = moments[0];
//        /** @type {number} */
//        i = 1;
//        for (; i < moments.length; ++i) {
//            if (!(moments[i].isValid() && !moments[i][fn](res))) {
//                res = moments[i];
//            }
//        }
//        return res;
//    }
//    /**
//     * @param {!Object} duration
//     * @return {undefined}
//     */
//    function Duration(duration) {
//        var normalizedInput = normalizeObjectUnits(duration);
//        var i = normalizedInput.year || 0;
//        var isAdding = normalizedInput.quarter || 0;
//        var mom = normalizedInput.month || 0;
//        var _oneDayInMilliseconds = normalizedInput.week || normalizedInput.isoWeek || 0;
//        var _now = normalizedInput.day || 0;
//        var s = normalizedInput.hour || 0;
//        var l = normalizedInput.minute || 0;
//        var _dim = normalizedInput.second || 0;
//        var _pos = normalizedInput.millisecond || 0;
//        this._isValid = function (m) {
//            var name;
//            for (name in m) {
//                if (-1 === indexOf$1.call(ordering, name) || null != m[name] && isNaN(m[name])) {
//                    return false;
//                }
//            }
//            /** @type {boolean} */
//            var j = false;
//            /** @type {number} */
//            var i = 0;
//            for (; i < ordering.length; ++i) {
//                if (m[ordering[i]]) {
//                    if (j) {
//                        return false;
//                    }
//                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
//                        /** @type {boolean} */
//                        j = true;
//                    }
//                }
//            }
//            return true;
//        }(normalizedInput);
//        /** @type {number} */
//        this._milliseconds = +_pos + 1e3 * _dim + 6e4 * l + 1e3 * s * 60 * 60;
//        /** @type {number} */
//        this._days = +_now + 7 * _oneDayInMilliseconds;
//        /** @type {number} */
//        this._months = +mom + 3 * isAdding + 12 * i;
//        this._data = {};
//        this._locale = getLocale();
//        this._bubble();
//    }
//    /**
//     * @param {?} value
//     * @return {?}
//     */
//    function isDuration(value) {
//        return value instanceof Duration;
//    }
//    /**
//     * @param {number} number
//     * @return {?}
//     */
//    function absRound(number) {
//        return number < 0 ? -1 * Math.round(-1 * number) : Math.round(number);
//    }
//    /**
//     * @param {string} token
//     * @param {string} separator
//     * @return {undefined}
//     */
//    function offset(token, separator) {
//        addFormatToken(token, 0, 0, function () {
//            var offset = this.utcOffset();
//            /** @type {string} */
//            var sign = "+";
//            return offset < 0 && (offset = -offset, sign = "-"), sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
//        });
//    }
//    /**
//     * @param {!RegExp} matcher
//     * @param {string} string
//     * @return {?}
//     */
//    function offsetFromString(matcher, string) {
//        var m = (string || "").match(matcher);
//        if (null === m) {
//            return null;
//        }
//        var match = ((m[m.length - 1] || []) + "").match(/([\+\-]|\d\d)/gi) || ["-", 0, 0];
//        var a = 60 * match[1] + toInt(match[2]);
//        return 0 === a ? 0 : "+" === match[0] ? a : -a;
//    }
//    /**
//     * @param {?} input
//     * @param {?} model
//     * @return {?}
//     */
//    function cloneWithOffset(input, model) {
//        var res;
//        var offset;
//        return model._isUTC ? (res = model.clone(), offset = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(), res._d.setTime(res._d.valueOf() + offset), hooks.updateOffset(res, false), res) : createLocal(input).local();
//    }
//    /**
//     * @param {!Function} m
//     * @return {?}
//     */
//    function getDateOffset(m) {
//        return 15 * -Math.round(m._d.getTimezoneOffset() / 15);
//    }
//    /**
//     * @return {?}
//     */
//    function isUtc() {
//        return !!this.isValid() && this._isUTC && 0 === this._offset;
//    }
//    /**
//     * @param {number} input
//     * @param {!Object} key
//     * @return {?}
//     */
//    function createDuration(input, key) {
//        var sign;
//        var ret;
//        var diffRes;
//        /** @type {number} */
//        var duration = input;
//        /** @type {null} */
//        var match = null;
//        return isDuration(input) ? duration = {
//            ms: input._milliseconds,
//            d: input._days,
//            M: input._months
//        } : isNumber(input) ? (duration = {}, key ? duration[key] = input : duration.milliseconds = input) : (match = doctypeRegex.exec(input)) ? (sign = "-" === match[1] ? -1 : 1, duration = {
//            y: 0,
//            d: toInt(match[2]) * sign,
//            h: toInt(match[3]) * sign,
//            m: toInt(match[4]) * sign,
//            s: toInt(match[5]) * sign,
//            ms: toInt(absRound(1e3 * match[6])) * sign
//        }) : (match = linePat.exec(input)) ? (sign = "-" === match[1] ? -1 : 1, duration = {
//            y: parseIso(match[2], sign),
//            M: parseIso(match[3], sign),
//            w: parseIso(match[4], sign),
//            d: parseIso(match[5], sign),
//            h: parseIso(match[6], sign),
//            m: parseIso(match[7], sign),
//            s: parseIso(match[8], sign)
//        }) : null == duration ? duration = {} : "object" == typeof duration && ("from" in duration || "to" in duration) && (diffRes = function (base, other) {
//            var res;
//            return base.isValid() && other.isValid() ? (other = cloneWithOffset(other, base), base.isBefore(other) ? res = positiveMomentsDifference(base, other) : ((res = positiveMomentsDifference(other, base)).milliseconds = -res.milliseconds, res.months = -res.months), res) : {
//                milliseconds: 0,
//                months: 0
//            };
//        }(createLocal(duration.from), createLocal(duration.to)), (duration = {}).ms = diffRes.milliseconds, duration.M = diffRes.months), ret = new Duration(duration), isDuration(input) && hasOwnProp(input, "_locale") && (ret._locale = input._locale), ret;
//    }
//    /**
//     * @param {string} inp
//     * @param {!Object} sign
//     * @return {?}
//     */
//    function parseIso(inp, sign) {
//        var res = inp && parseFloat(inp.replace(",", "."));
//        return (isNaN(res) ? 0 : res) * sign;
//    }
//    /**
//     * @param {!Object} base
//     * @param {!Object} other
//     * @return {?}
//     */
//    function positiveMomentsDifference(base, other) {
//        var th = {};
//        return th.months = other.month() - base.month() + 12 * (other.year() - base.year()), base.clone().add(th.months, "M").isAfter(other) && --th.months, th.milliseconds = +other - +base.clone().add(th.months, "M"), th;
//    }
//    /**
//     * @param {number} direction
//     * @param {string} name
//     * @return {?}
//     */
//    function createAdder(direction, name) {
//        return function (a, value) {
//            var _x$2;
//            return null === value || isNaN(+value) || (deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), _x$2 = a, a = value, value = _x$2), addSubtract(this, createDuration(a = "string" == typeof a ? +a : a, value), direction), this;
//        };
//    }
//    /**
//     * @param {!Object} mom
//     * @param {!Object} duration
//     * @param {number} isAdding
//     * @param {string} updateOffset
//     * @return {undefined}
//     */
//    function addSubtract(mom, duration, isAdding, updateOffset) {
//        var milliseconds = duration._milliseconds;
//        var days = absRound(duration._days);
//        var months = absRound(duration._months);
//        if (mom.isValid()) {
//            updateOffset = null == updateOffset || updateOffset;
//            if (months) {
//                setMonth(mom, get(mom, "Month") + months * isAdding);
//            }
//            if (days) {
//                set(mom, "Date", get(mom, "Date") + days * isAdding);
//            }
//            if (milliseconds) {
//                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
//            }
//            if (updateOffset) {
//                hooks.updateOffset(mom, days || months);
//            }
//        }
//    }
//    /**
//     * @param {!Object} date
//     * @param {!Object} month
//     * @return {?}
//     */
//    function _buildWeek(date, month) {
//        /** @type {number} */
//        var wholeMonthDiff = 12 * (month.year() - date.year()) + (month.month() - date.month());
//        var anchor = date.clone().add(wholeMonthDiff, "months");
//        return -(wholeMonthDiff + (month - anchor < 0 ? (month - anchor) / (anchor - date.clone().add(wholeMonthDiff - 1, "months")) : (month - anchor) / (date.clone().add(wholeMonthDiff + 1, "months") - anchor))) || 0;
//    }
//    /**
//     * @param {?} key
//     * @return {?}
//     */
//    function locale(key) {
//        var newLocaleData;
//        return void 0 === key ? this._locale._abbr : (null != (newLocaleData = getLocale(key)) && (this._locale = newLocaleData), this);
//    }
//    /**
//     * @return {?}
//     */
//    function localeData() {
//        return this._locale;
//    }
//    /**
//     * @param {number} x
//     * @param {number} n
//     * @return {?}
//     */
//    function floor(x, n) {
//        return (x % n + n) % n;
//    }
//    /**
//     * @param {number} year
//     * @param {number} month
//     * @param {number} date
//     * @return {?}
//     */
//    function getEventsData(year, month, date) {
//        return year < 100 && 0 <= year ? new Date(year + 400, month, date) - ofs : (new Date(year, month, date)).valueOf();
//    }
//    /**
//     * @param {number} year
//     * @param {number} month
//     * @param {number} day
//     * @return {?}
//     */
//    function serializeUTCDate(year, month, day) {
//        return year < 100 && 0 <= year ? Date.UTC(year + 400, month, day) - ofs : Date.UTC(year, month, day);
//    }
//    /**
//     * @param {string} token
//     * @param {string} getter
//     * @return {undefined}
//     */
//    function addWeekYearFormatToken(token, getter) {
//        addFormatToken(0, [token, token.length], 0, getter);
//    }
//    /**
//     * @param {number} input
//     * @param {!Array} week
//     * @param {?} weekday
//     * @param {undefined} dow
//     * @param {undefined} doy
//     * @return {?}
//     */
//    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
//        var weeksTarget;
//        return null == input ? weekOfYear(this, dow, doy).year : ((weeksTarget = weeksInYear(input, dow, doy)) < week && (week = weeksTarget), function (weekYear, week, weekday, dow, doy) {
//            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
//            var date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
//            return this.year(date.getUTCFullYear()), this.month(date.getUTCMonth()), this.date(date.getUTCDate()), this;
//        }.call(this, input, week, weekday, dow, doy));
//    }
//    /**
//     * @param {string} v
//     * @param {!Array} time
//     * @return {undefined}
//     */
//    function valueOf(v, time) {
//        time[6] = toInt(1e3 * ("0." + v));
//    }
//    /**
//     * @param {?} string
//     * @return {?}
//     */
//    function preParsePostFormat(string) {
//        return string;
//    }
//    /**
//     * @param {string} format
//     * @param {!Object} index
//     * @param {string} field
//     * @param {string} setter
//     * @return {?}
//     */
//    function get$1(format, index, field, setter) {
//        var locale = getLocale();
//        var utc = createUTC().set(setter, index);
//        return locale[field](utc, format);
//    }
//    /**
//     * @param {string} format
//     * @param {string} index
//     * @param {string} field
//     * @return {?}
//     */
//    function listMonthsImpl(format, index, field) {
//        if (isNumber(format) && (index = format, format = void 0), format = format || "", null != index) {
//            return get$1(format, index, field, "month");
//        }
//        var i;
//        /** @type {!Array} */
//        var out = [];
//        /** @type {number} */
//        i = 0;
//        for (; i < 12; i++) {
//            out[i] = get$1(format, i, field, "month");
//        }
//        return out;
//    }
//    /**
//     * @param {string} val
//     * @param {string} format
//     * @param {string} index
//     * @param {string} field
//     * @return {?}
//     */
//    function listWeekdaysImpl(val, format, index, field) {
//        if ("boolean" == typeof val) {
//            if (isNumber(format)) {
//                /** @type {string} */
//                index = format;
//                format = void 0;
//            }
//        } else {
//            /** @type {string} */
//            format = val;
//            /** @type {boolean} */
//            val = false;
//            if (isNumber(index = format)) {
//                /** @type {string} */
//                index = format;
//                format = void 0;
//            }
//        }
//        format = format || "";
//        var i;
//        var locale = getLocale();
//        var len = val ? locale._week.dow : 0;
//        if (null != index) {
//            return get$1(format, (index + len) % 7, field, "day");
//        }
//        /** @type {!Array} */
//        var out = [];
//        /** @type {number} */
//        i = 0;
//        for (; i < 7; i++) {
//            out[i] = get$1(format, (i + len) % 7, field, "day");
//        }
//        return out;
//    }
//    /**
//     * @param {!Object} duration
//     * @param {number} input
//     * @param {!Object} value
//     * @param {number} direction
//     * @return {?}
//     */
//    function addSubtract$1(duration, input, value, direction) {
//        var other = createDuration(input, value);
//        return duration._milliseconds += direction * other._milliseconds, duration._days += direction * other._days, duration._months += direction * other._months, duration._bubble();
//    }
//    /**
//     * @param {?} n
//     * @return {?}
//     */
//    function absCeil(n) {
//        return n < 0 ? Math.floor(n) : Math.ceil(n);
//    }
//    /**
//     * @param {number} days
//     * @return {?}
//     */
//    function daysToYears(days) {
//        return 4800 * days / 146097;
//    }
//    /**
//     * @param {number} months
//     * @return {?}
//     */
//    function monthsToDays(months) {
//        return 146097 * months / 4800;
//    }
//    /**
//     * @param {string} alias
//     * @return {?}
//     */
//    function makeAs(alias) {
//        return function () {
//            return this.as(alias);
//        };
//    }
//    /**
//     * @param {string} name
//     * @return {?}
//     */
//    function makeGetter(name) {
//        return function () {
//            return this.isValid() ? this._data[name] : NaN;
//        };
//    }
//    /**
//     * @param {number} num_queued
//     * @return {?}
//     */
//    function abs$1(num_queued) {
//        return (0 < num_queued) - (num_queued < 0) || +num_queued;
//    }
//    /**
//     * @return {?}
//     */
//    function toISOString$1() {
//        if (!this.isValid()) {
//            return this.localeData().invalidDate();
//        }
//        var value;
//        var totalHours;
//        /** @type {number} */
//        var r = iso_string__abs(this._milliseconds) / 1e3;
//        /** @type {number} */
//        var daysInMonth = iso_string__abs(this._days);
//        /** @type {number} */
//        var months = iso_string__abs(this._months);
//        totalHours = absFloor((value = absFloor(r / 60)) / 60);
//        /** @type {number} */
//        r = r % 60;
//        /** @type {number} */
//        value = value % 60;
//        var years = absFloor(months / 12);
//        var height = months = months % 12;
//        /** @type {number} */
//        var days = daysInMonth;
//        var hours = totalHours;
//        var minutes = value;
//        /** @type {string} */
//        var seconds = r ? r.toFixed(3).replace(/\.?0+$/, "") : "";
//        var total = this.asSeconds();
//        if (!total) {
//            return "P0D";
//        }
//        /** @type {string} */
//        var str = total < 0 ? "-" : "";
//        /** @type {string} */
//        var s = abs$1(this._months) !== abs$1(total) ? "-" : "";
//        /** @type {string} */
//        var sign = abs$1(this._days) !== abs$1(total) ? "-" : "";
//        /** @type {string} */
//        var TLT = abs$1(this._milliseconds) !== abs$1(total) ? "-" : "";
//        return str + "P" + (years ? s + years + "Y" : "") + (height ? s + height + "M" : "") + (days ? sign + days + "D" : "") + (hours || minutes || seconds ? "T" : "") + (hours ? TLT + hours + "H" : "") + (minutes ? TLT + minutes + "M" : "") + (seconds ? TLT + seconds + "S" : "");
//    }
//    var oldSetupComputes;
//    var some$1;
//    /** @type {!Function} */
//    some$1 = Array.prototype.some ? Array.prototype.some : function (callback) {
//        /** @type {!Object} */
//        var self = Object(this);
//        /** @type {number} */
//        var inputsSize = self.length >>> 0;
//        /** @type {number} */
//        var i = 0;
//        for (; i < inputsSize; i++) {
//            if (i in self && callback.call(this, self[i], i, self)) {
//                return true;
//            }
//        }
//        return false;
//    };
//    var callback;
//    /** @type {!Array} */
//    var for_check = hooks.momentProperties = [];
//    /** @type {boolean} */
//    var nt = false;
//    var processedOptions = {};
//    /** @type {boolean} */
//    hooks.suppressDeprecationWarnings = false;
//    /** @type {null} */
//    hooks.deprecationHandler = null;
//    /** @type {!Function} */
//    callback = Object.keys ? Object.keys : function (b) {
//        var k;
//        /** @type {!Array} */
//        var coordsParsed = [];
//        for (k in b) {
//            if (hasOwnProp(b, k)) {
//                coordsParsed.push(k);
//            }
//        }
//        return coordsParsed;
//    };
//    var aliases = {};
//    var priorities = {};
//    /** @type {!RegExp} */
//    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
//    /** @type {!RegExp} */
//    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
//    var formatFunctions = {};
//    var formatTokenFunctions = {};
//    /** @type {!RegExp} */
//    var match4 = /\d\d/;
//    /** @type {!RegExp} */
//    var match3 = /\d{3}/;
//    /** @type {!RegExp} */
//    var match6 = /\d{4}/;
//    /** @type {!RegExp} */
//    var match2 = /[+-]?\d{6}/;
//    /** @type {!RegExp} */
//    var match1to2 = /\d\d?/;
//    /** @type {!RegExp} */
//    var matchSigned = /\d\d\d\d?/;
//    /** @type {!RegExp} */
//    var matchTimestamp = /\d\d\d\d\d\d?/;
//    /** @type {!RegExp} */
//    var match1to3 = /\d{1,3}/;
//    /** @type {!RegExp} */
//    var match1to4 = /\d{1,4}/;
//    /** @type {!RegExp} */
//    var match1to6 = /[+-]?\d{1,6}/;
//    /** @type {!RegExp} */
//    var matchUnsigned = /[+-]?\d+/;
//    /** @type {!RegExp} */
//    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
//    /** @type {!RegExp} */
//    var defaultMonthsShortRegex = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
//    var regexes = {};
//    var tokens = {};
//    addFormatToken("Y", 0, 0, function () {
//        var y = this.year();
//        return y <= 9999 ? "" + y : "+" + y;
//    });
//    addFormatToken(0, ["YY", 2], 0, function () {
//        return this.year() % 100;
//    });
//    addFormatToken(0, ["YYYY", 4], 0, "year");
//    addFormatToken(0, ["YYYYY", 5], 0, "year");
//    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
//    addUnitAlias("year", "y");
//    addUnitPriority("year", 1);
//    addRegexToken("Y", matchUnsigned);
//    addRegexToken("YY", match1to2, match4);
//    addRegexToken("YYYY", match1to4, match6);
//    addRegexToken("YYYYY", match1to6, match2);
//    addRegexToken("YYYYYY", match1to6, match2);
//    addParseToken(["YYYYY", "YYYYYY"], 0);
//    addParseToken("YYYY", function (input, i) {
//        i[0] = 2 === input.length ? hooks.parseTwoDigitYear(input) : toInt(input);
//    });
//    addParseToken("YY", function (input, array) {
//        array[0] = hooks.parseTwoDigitYear(input);
//    });
//    addParseToken("Y", function (time, times) {
//        /** @type {number} */
//        times[0] = parseInt(time, 10);
//    });
//    /**
//     * @param {!Object} input
//     * @return {?}
//     */
//    hooks.parseTwoDigitYear = function (input) {
//        return toInt(input) + (68 < toInt(input) ? 1900 : 2e3);
//    };
//    var indexOf$1;
//    var getSetYear = makeGetSet("FullYear", true);
//    /** @type {!Function} */
//    indexOf$1 = Array.prototype.indexOf ? Array.prototype.indexOf : function (input) {
//        var i;
//        /** @type {number} */
//        i = 0;
//        for (; i < this.length; ++i) {
//            if (this[i] === input) {
//                return i;
//            }
//        }
//        return -1;
//    };
//    addFormatToken("M", ["MM", 2], "Mo", function () {
//        return this.month() + 1;
//    });
//    addFormatToken("MMM", 0, 0, function (format) {
//        return this.localeData().monthsShort(this, format);
//    });
//    addFormatToken("MMMM", 0, 0, function (format) {
//        return this.localeData().months(this, format);
//    });
//    addUnitAlias("month", "M");
//    addUnitPriority("month", 8);
//    addRegexToken("M", match1to2);
//    addRegexToken("MM", match1to2, match4);
//    addRegexToken("MMM", function (isStrict, locale) {
//        return locale.monthsShortRegex(isStrict);
//    });
//    addRegexToken("MMMM", function (isStrict, locale) {
//        return locale.monthsRegex(isStrict);
//    });
//    addParseToken(["M", "MM"], function (begin, canCreateDiscussions) {
//        /** @type {number} */
//        canCreateDiscussions[1] = toInt(begin) - 1;
//    });
//    addParseToken(["MMM", "MMMM"], function (input, boleto, config, token) {
//        var i = config._locale.monthsParse(input, token, config._strict);
//        if (null != i) {
//            boleto[1] = i;
//        } else {
//            getParsingFlags(config).invalidMonth = input;
//        }
//    });
//    /** @type {!RegExp} */
//    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
//    /** @type {!Array<string>} */
//    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_");
//    /** @type {!Array<string>} */
//    var monthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
//    addFormatToken("w", ["ww", 2], "wo", "week");
//    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
//    addUnitAlias("week", "w");
//    addUnitAlias("isoWeek", "W");
//    addUnitPriority("week", 5);
//    addUnitPriority("isoWeek", 5);
//    addRegexToken("w", match1to2);
//    addRegexToken("ww", match1to2, match4);
//    addRegexToken("W", match1to2);
//    addRegexToken("WW", match1to2, match4);
//    addWeekParseToken(["w", "ww", "W", "WW"], function (input, week, i, patternStartsWith) {
//        week[patternStartsWith.substr(0, 1)] = toInt(input);
//    });
//    addFormatToken("d", 0, "do", "day");
//    addFormatToken("dd", 0, 0, function (format) {
//        return this.localeData().weekdaysMin(this, format);
//    });
//    addFormatToken("ddd", 0, 0, function (format) {
//        return this.localeData().weekdaysShort(this, format);
//    });
//    addFormatToken("dddd", 0, 0, function (format) {
//        return this.localeData().weekdays(this, format);
//    });
//    addFormatToken("e", 0, 0, "weekday");
//    addFormatToken("E", 0, 0, "isoWeekday");
//    addUnitAlias("day", "d");
//    addUnitAlias("weekday", "e");
//    addUnitAlias("isoWeekday", "E");
//    addUnitPriority("day", 11);
//    addUnitPriority("weekday", 11);
//    addUnitPriority("isoWeekday", 11);
//    addRegexToken("d", match1to2);
//    addRegexToken("e", match1to2);
//    addRegexToken("E", match1to2);
//    addRegexToken("dd", function (isStrict, locale) {
//        return locale.weekdaysMinRegex(isStrict);
//    });
//    addRegexToken("ddd", function (isStrict, locale) {
//        return locale.weekdaysShortRegex(isStrict);
//    });
//    addRegexToken("dddd", function (isStrict, locale) {
//        return locale.weekdaysRegex(isStrict);
//    });
//    addWeekParseToken(["dd", "ddd", "dddd"], function (input, t, config, token) {
//        var data = config._locale.weekdaysParse(input, token, config._strict);
//        if (null != data) {
//            t.d = data;
//        } else {
//            /** @type {!Object} */
//            getParsingFlags(config).invalidWeekday = input;
//        }
//    });
//    addWeekParseToken(["d", "e", "E"], function (input, week, i, token) {
//        week[token] = toInt(input);
//    });
//    /** @type {!Array<string>} */
//    var weekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");
//    /** @type {!Array<string>} */
//    var fragment = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
//    /** @type {!Array<string>} */
//    var defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
//    addFormatToken("H", ["HH", 2], 0, "hour");
//    addFormatToken("h", ["hh", 2], 0, hFormat);
//    addFormatToken("k", ["kk", 2], 0, function () {
//        return this.hours() || 24;
//    });
//    addFormatToken("hmm", 0, 0, function () {
//        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
//    });
//    addFormatToken("hmmss", 0, 0, function () {
//        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
//    });
//    addFormatToken("Hmm", 0, 0, function () {
//        return "" + this.hours() + zeroFill(this.minutes(), 2);
//    });
//    addFormatToken("Hmmss", 0, 0, function () {
//        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
//    });
//    meridiem("a", true);
//    meridiem("A", false);
//    addUnitAlias("hour", "h");
//    addUnitPriority("hour", 13);
//    addRegexToken("a", matchMeridiem);
//    addRegexToken("A", matchMeridiem);
//    addRegexToken("H", match1to2);
//    addRegexToken("h", match1to2);
//    addRegexToken("k", match1to2);
//    addRegexToken("HH", match1to2, match4);
//    addRegexToken("hh", match1to2, match4);
//    addRegexToken("kk", match1to2, match4);
//    addRegexToken("hmm", matchSigned);
//    addRegexToken("hmmss", matchTimestamp);
//    addRegexToken("Hmm", matchSigned);
//    addRegexToken("Hmmss", matchTimestamp);
//    addParseToken(["H", "HH"], 3);
//    addParseToken(["k", "kk"], function (limit, a, i) {
//        var x = toInt(limit);
//        a[3] = 24 === x ? 0 : x;
//    });
//    addParseToken(["a", "A"], function (input, canCreateDiscussions, config) {
//        config._isPm = config._locale.isPM(input);
//        /** @type {string} */
//        config._meridiem = input;
//    });
//    addParseToken(["h", "hh"], function (input, week, config) {
//        week[3] = toInt(input);
//        /** @type {boolean} */
//        getParsingFlags(config).bigHour = true;
//    });
//    addParseToken("hmm", function (input, array, config) {
//        /** @type {number} */
//        var pos1 = input.length - 2;
//        array[3] = toInt(input.substr(0, pos1));
//        array[4] = toInt(input.substr(pos1));
//        /** @type {boolean} */
//        getParsingFlags(config).bigHour = true;
//    });
//    addParseToken("hmmss", function (input, array, config) {
//        /** @type {number} */
//        var pos1 = input.length - 4;
//        /** @type {number} */
//        var pos2 = input.length - 2;
//        array[3] = toInt(input.substr(0, pos1));
//        array[4] = toInt(input.substr(pos1, 2));
//        array[5] = toInt(input.substr(pos2));
//        /** @type {boolean} */
//        getParsingFlags(config).bigHour = true;
//    });
//    addParseToken("Hmm", function (input, array, i) {
//        /** @type {number} */
//        var pos1 = input.length - 2;
//        array[3] = toInt(input.substr(0, pos1));
//        array[4] = toInt(input.substr(pos1));
//    });
//    addParseToken("Hmmss", function (input, array, i) {
//        /** @type {number} */
//        var pos1 = input.length - 4;
//        /** @type {number} */
//        var pos2 = input.length - 2;
//        array[3] = toInt(input.substr(0, pos1));
//        array[4] = toInt(input.substr(pos1, 2));
//        array[5] = toInt(input.substr(pos2));
//    });
//    var globalLocale;
//    var getSetHour = makeGetSet("Hours", true);
//    var baseConfig = {
//        calendar: {
//            sameDay: "[Today at] LT",
//            nextDay: "[Tomorrow at] LT",
//            nextWeek: "dddd [at] LT",
//            lastDay: "[Yesterday at] LT",
//            lastWeek: "[Last] dddd [at] LT",
//            sameElse: "L"
//        },
//        longDateFormat: {
//            LTS: "h:mm:ss A",
//            LT: "h:mm A",
//            L: "MM/DD/YYYY",
//            LL: "MMMM D, YYYY",
//            LLL: "MMMM D, YYYY h:mm A",
//            LLLL: "dddd, MMMM D, YYYY h:mm A"
//        },
//        invalidDate: "Invalid date",
//        ordinal: "%d",
//        dayOfMonthOrdinalParse: /\d{1,2}/,
//        relativeTime: {
//            future: "in %s",
//            past: "%s ago",
//            s: "a few seconds",
//            ss: "%d seconds",
//            m: "a minute",
//            mm: "%d minutes",
//            h: "an hour",
//            hh: "%d hours",
//            d: "a day",
//            dd: "%d days",
//            M: "a month",
//            MM: "%d months",
//            y: "a year",
//            yy: "%d years"
//        },
//        months: defaultLocaleMonths,
//        monthsShort: monthsShort,
//        week: {
//            dow: 0,
//            doy: 6
//        },
//        weekdays: weekdays,
//        weekdaysMin: defaultLocaleWeekdaysMin,
//        weekdaysShort: fragment,
//        meridiemParse: /[ap]\.?m?\.?/i
//    };
//    var locales = {};
//    var localeFamilies = {};
//    /** @type {!RegExp} */
//    var leadingTextRegExp = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
//    /** @type {!RegExp} */
//    var reLine = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
//    /** @type {!RegExp} */
//    var moveRegex = /Z|[+-]\d\d(?::?\d\d)?/;
//    /** @type {!Array} */
//    var tables = [["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/], ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/], ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/], ["GGGG-[W]WW", /\d{4}-W\d\d/, false], ["YYYY-DDD", /\d{4}-\d{3}/], ["YYYY-MM", /\d{4}-\d\d/, false], ["YYYYYYMMDD", /[+-]\d{10}/], ["YYYYMMDD", /\d{8}/], ["GGGG[W]WWE", /\d{4}W\d{3}/], ["GGGG[W]WW", /\d{4}W\d{2}/, false], ["YYYYDDD", /\d{7}/]];
//    /** @type {!Array} */
//    var onCompleteBindings = [["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/], ["HH:mm:ss", /\d\d:\d\d:\d\d/], ["HH:mm", /\d\d:\d\d/], ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/], ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/], ["HHmmss", /\d\d\d\d\d\d/], ["HHmm", /\d\d\d\d/], ["HH", /\d\d/]];
//    /** @type {!RegExp} */
//    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
//    /** @type {!RegExp} */
//    var filename_pttrn = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
//    var subwikiListsCache = {
//        UT: 0,
//        GMT: 0,
//        EDT: -240,
//        EST: -300,
//        CDT: -300,
//        CST: -360,
//        MDT: -360,
//        MST: -420,
//        PDT: -420,
//        PST: -480
//    };
//    hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function (config) {
//        /** @type {!Date} */
//        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
//    });
//    /**
//     * @return {undefined}
//     */
//    hooks.ISO_8601 = function () {
//    };
//    /**
//     * @return {undefined}
//     */
//    hooks.RFC_2822 = function () {
//    };
//    var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
//        var e = createLocal.apply(null, arguments);
//        return this.isValid() && e.isValid() ? e < this ? this : e : createInvalid();
//    });
//    var prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
//        var e = createLocal.apply(null, arguments);
//        return this.isValid() && e.isValid() ? this < e ? this : e : createInvalid();
//    });
//    /** @type {!Array} */
//    var ordering = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];
//    offset("Z", ":");
//    offset("ZZ", "");
//    addRegexToken("Z", matchShortOffset);
//    addRegexToken("ZZ", matchShortOffset);
//    addParseToken(["Z", "ZZ"], function (input, canCreateDiscussions, config) {
//        /** @type {boolean} */
//        config._useUTC = true;
//        config._tzm = offsetFromString(matchShortOffset, input);
//    });
//    /**
//     * @return {undefined}
//     */
//    hooks.updateOffset = function () {
//    };
//    /** @type {!RegExp} */
//    var doctypeRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/;
//    /** @type {!RegExp} */
//    var linePat = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
//    createDuration.fn = Duration.prototype;
//    /**
//     * @return {?}
//     */
//    createDuration.invalid = function () {
//        return createDuration(NaN);
//    };
//    var add = createAdder(1, "add");
//    var subtract = createAdder(-1, "subtract");
//    /** @type {string} */
//    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
//    /** @type {string} */
//    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
//    var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function (key) {
//        return void 0 === key ? this.localeData() : this.locale(key);
//    });
//    /** @type {number} */
//    var ofs = 126227808e5;
//    addFormatToken(0, ["gg", 2], 0, function () {
//        return this.weekYear() % 100;
//    });
//    addFormatToken(0, ["GG", 2], 0, function () {
//        return this.isoWeekYear() % 100;
//    });
//    addWeekYearFormatToken("gggg", "weekYear");
//    addWeekYearFormatToken("ggggg", "weekYear");
//    addWeekYearFormatToken("GGGG", "isoWeekYear");
//    addWeekYearFormatToken("GGGGG", "isoWeekYear");
//    addUnitAlias("weekYear", "gg");
//    addUnitAlias("isoWeekYear", "GG");
//    addUnitPriority("weekYear", 1);
//    addUnitPriority("isoWeekYear", 1);
//    addRegexToken("G", matchUnsigned);
//    addRegexToken("g", matchUnsigned);
//    addRegexToken("GG", match1to2, match4);
//    addRegexToken("gg", match1to2, match4);
//    addRegexToken("GGGG", match1to4, match6);
//    addRegexToken("gggg", match1to4, match6);
//    addRegexToken("GGGGG", match1to6, match2);
//    addRegexToken("ggggg", match1to6, match2);
//    addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function (input, week, i, patternStartsWith) {
//        week[patternStartsWith.substr(0, 2)] = toInt(input);
//    });
//    addWeekParseToken(["gg", "GG"], function (input, week, n, token) {
//        week[token] = hooks.parseTwoDigitYear(input);
//    });
//    addFormatToken("Q", 0, "Qo", "quarter");
//    addUnitAlias("quarter", "Q");
//    addUnitPriority("quarter", 7);
//    addRegexToken("Q", /\d/);
//    addParseToken("Q", function (begin, canCreateDiscussions) {
//        /** @type {number} */
//        canCreateDiscussions[1] = 3 * (toInt(begin) - 1);
//    });
//    addFormatToken("D", ["DD", 2], "Do", "date");
//    addUnitAlias("date", "D");
//    addUnitPriority("date", 9);
//    addRegexToken("D", match1to2);
//    addRegexToken("DD", match1to2, match4);
//    addRegexToken("Do", function (isStrict, locale) {
//        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
//    });
//    addParseToken(["D", "DD"], 2);
//    addParseToken("Do", function (input, array) {
//        array[2] = toInt(input.match(match1to2)[0]);
//    });
//    var getSetDayOfMonth = makeGetSet("Date", true);
//    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
//    addUnitAlias("dayOfYear", "DDD");
//    addUnitPriority("dayOfYear", 4);
//    addRegexToken("DDD", match1to3);
//    addRegexToken("DDDD", match3);
//    addParseToken(["DDD", "DDDD"], function (input, canCreateDiscussions, config) {
//        config._dayOfYear = toInt(input);
//    });
//    addFormatToken("m", ["mm", 2], 0, "minute");
//    addUnitAlias("minute", "m");
//    addUnitPriority("minute", 14);
//    addRegexToken("m", match1to2);
//    addRegexToken("mm", match1to2, match4);
//    addParseToken(["m", "mm"], 4);
//    var getSetMinute = makeGetSet("Minutes", false);
//    addFormatToken("s", ["ss", 2], 0, "second");
//    addUnitAlias("second", "s");
//    addUnitPriority("second", 15);
//    addRegexToken("s", match1to2);
//    addRegexToken("ss", match1to2, match4);
//    addParseToken(["s", "ss"], 5);
//    var token;
//    var getSetSecond = makeGetSet("Seconds", false);
//    addFormatToken("S", 0, 0, function () {
//        return ~~(this.millisecond() / 100);
//    });
//    addFormatToken(0, ["SS", 2], 0, function () {
//        return ~~(this.millisecond() / 10);
//    });
//    addFormatToken(0, ["SSS", 3], 0, "millisecond");
//    addFormatToken(0, ["SSSS", 4], 0, function () {
//        return 10 * this.millisecond();
//    });
//    addFormatToken(0, ["SSSSS", 5], 0, function () {
//        return 100 * this.millisecond();
//    });
//    addFormatToken(0, ["SSSSSS", 6], 0, function () {
//        return 1e3 * this.millisecond();
//    });
//    addFormatToken(0, ["SSSSSSS", 7], 0, function () {
//        return 1e4 * this.millisecond();
//    });
//    addFormatToken(0, ["SSSSSSSS", 8], 0, function () {
//        return 1e5 * this.millisecond();
//    });
//    addFormatToken(0, ["SSSSSSSSS", 9], 0, function () {
//        return 1e6 * this.millisecond();
//    });
//    addUnitAlias("millisecond", "ms");
//    addUnitPriority("millisecond", 16);
//    addRegexToken("S", match1to3, /\d/);
//    addRegexToken("SS", match1to3, match4);
//    addRegexToken("SSS", match1to3, match3);
//    /** @type {string} */
//    token = "SSSS";
//    for (; token.length <= 9; token = token + "S") {
//        addRegexToken(token, /\d+/);
//    }
//    /** @type {string} */
//    token = "S";
//    for (; token.length <= 9; token = token + "S") {
//        addParseToken(token, valueOf);
//    }
//    var getSetMillisecond = makeGetSet("Milliseconds", false);
//    addFormatToken("z", 0, 0, "zoneAbbr");
//    addFormatToken("zz", 0, 0, "zoneName");
//    var proto = Moment.prototype;
//    proto.add = add;
//    /**
//     * @param {?} time
//     * @param {?} formats
//     * @return {?}
//     */
//    proto.calendar = function (time, formats) {
//        var now = time || createLocal();
//        var sod = cloneWithOffset(now, this).startOf("day");
//        var format = hooks.calendarFormat(this, sod) || "sameElse";
//        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
//        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
//    };
//    /**
//     * @return {?}
//     */
//    proto.clone = function () {
//        return new Moment(this);
//    };
//    /**
//     * @param {?} input
//     * @param {string} units
//     * @param {boolean} asFloat
//     * @return {?}
//     */
//    proto.diff = function (input, units, asFloat) {
//        var month;
//        var year;
//        var result;
//        if (!this.isValid()) {
//            return NaN;
//        }
//        if (!(month = cloneWithOffset(input, this)).isValid()) {
//            return NaN;
//        }
//        switch (year = 6e4 * (month.utcOffset() - this.utcOffset()), units = normalizeUnits(units)) {
//            case "year":
//                /** @type {number} */
//                result = _buildWeek(this, month) / 12;
//                break;
//            case "month":
//                result = _buildWeek(this, month);
//                break;
//            case "quarter":
//                /** @type {number} */
//                result = _buildWeek(this, month) / 3;
//                break;
//            case "second":
//                /** @type {number} */
//                result = (this - month) / 1e3;
//                break;
//            case "minute":
//                /** @type {number} */
//                result = (this - month) / 6e4;
//                break;
//            case "hour":
//                /** @type {number} */
//                result = (this - month) / 36e5;
//                break;
//            case "day":
//                /** @type {number} */
//                result = (this - month - year) / 864e5;
//                break;
//            case "week":
//                /** @type {number} */
//                result = (this - month - year) / 6048e5;
//                break;
//            default:
//                /** @type {number} */
//                result = this - month;
//        }
//        return asFloat ? result : absFloor(result);
//    };
//    /**
//     * @param {string} units
//     * @return {?}
//     */
//    proto.endOf = function (units) {
//        var x;
//        if (void 0 === (units = normalizeUnits(units)) || "millisecond" === units || !this.isValid()) {
//            return this;
//        }
//        /** @type {function(number, number, number): ?} */
//        var daysInMonth = this._isUTC ? serializeUTCDate : getEventsData;
//        switch (units) {
//            case "year":
//                /** @type {number} */
//                x = daysInMonth(this.year() + 1, 0, 1) - 1;
//                break;
//            case "quarter":
//                /** @type {number} */
//                x = daysInMonth(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
//                break;
//            case "month":
//                /** @type {number} */
//                x = daysInMonth(this.year(), this.month() + 1, 1) - 1;
//                break;
//            case "week":
//                /** @type {number} */
//                x = daysInMonth(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
//                break;
//            case "isoWeek":
//                /** @type {number} */
//                x = daysInMonth(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
//                break;
//            case "day":
//            case "date":
//                /** @type {number} */
//                x = daysInMonth(this.year(), this.month(), this.date() + 1) - 1;
//                break;
//            case "hour":
//                x = this._d.valueOf();
//                x = x + (36e5 - floor(x + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5) - 1);
//                break;
//            case "minute":
//                x = this._d.valueOf();
//                x = x + (6e4 - floor(x, 6e4) - 1);
//                break;
//            case "second":
//                x = this._d.valueOf();
//                x = x + (1e3 - floor(x, 1e3) - 1);
//        }
//        return this._d.setTime(x), hooks.updateOffset(this, true), this;
//    };
//    /**
//     * @param {string} value
//     * @return {?}
//     */
//    proto.format = function (value) {
//        if (!value) {
//            /** @type {string} */
//            value = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
//        }
//        var output = format(this, value);
//        return this.localeData().postformat(output);
//    };
//    /**
//     * @param {!Object} time
//     * @param {?} withoutSuffix
//     * @return {?}
//     */
//    proto.from = function (time, withoutSuffix) {
//        return this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid()) ? createDuration({
//            to: this,
//            from: time
//        }).locale(this.locale()).humanize(!withoutSuffix) : this.localeData().invalidDate();
//    };
//    /**
//     * @param {?} withoutSuffix
//     * @return {?}
//     */
//    proto.fromNow = function (withoutSuffix) {
//        return this.from(createLocal(), withoutSuffix);
//    };
//    /**
//     * @param {!Object} time
//     * @param {?} withoutSuffix
//     * @return {?}
//     */
//    proto.to = function (time, withoutSuffix) {
//        return this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid()) ? createDuration({
//            from: this,
//            to: time
//        }).locale(this.locale()).humanize(!withoutSuffix) : this.localeData().invalidDate();
//    };
//    /**
//     * @param {?} withoutSuffix
//     * @return {?}
//     */
//    proto.toNow = function (withoutSuffix) {
//        return this.to(createLocal(), withoutSuffix);
//    };
//    /**
//     * @param {number} units
//     * @return {?}
//     */
//    proto.get = function (units) {
//        return isFunction(this[units = normalizeUnits(units)]) ? this[units]() : this;
//    };
//    /**
//     * @return {?}
//     */
//    proto.invalidAt = function () {
//        return getParsingFlags(this).overflow;
//    };
//    /**
//     * @param {!Object} input
//     * @param {string} units
//     * @return {?}
//     */
//    proto.isAfter = function (input, units) {
//        var localInput = isMoment(input) ? input : createLocal(input);
//        return !(!this.isValid() || !localInput.isValid()) && ("millisecond" === (units = normalizeUnits(units) || "millisecond") ? this.valueOf() > localInput.valueOf() : localInput.valueOf() < this.clone().startOf(units).valueOf());
//    };
//    /**
//     * @param {!Object} input
//     * @param {string} units
//     * @return {?}
//     */
//    proto.isBefore = function (input, units) {
//        var localInput = isMoment(input) ? input : createLocal(input);
//        return !(!this.isValid() || !localInput.isValid()) && ("millisecond" === (units = normalizeUnits(units) || "millisecond") ? this.valueOf() < localInput.valueOf() : this.clone().endOf(units).valueOf() < localInput.valueOf());
//    };
//    /**
//     * @param {!Object} input
//     * @param {!Object} time
//     * @param {string} units
//     * @param {string} inclusivity
//     * @return {?}
//     */
//    proto.isBetween = function (input, time, units, inclusivity) {
//        var to = isMoment(input) ? input : createLocal(input);
//        var other = isMoment(time) ? time : createLocal(time);
//        return !!(this.isValid() && to.isValid() && other.isValid()) && ("(" === (inclusivity = inclusivity || "()")[0] ? this.isAfter(to, units) : !this.isBefore(to, units)) && (")" === inclusivity[1] ? this.isBefore(other, units) : !this.isAfter(other, units));
//    };
//    /**
//     * @param {!Object} input
//     * @param {string} units
//     * @return {?}
//     */
//    proto.isSame = function (input, units) {
//        var i;
//        var localInput = isMoment(input) ? input : createLocal(input);
//        return !(!this.isValid() || !localInput.isValid()) && ("millisecond" === (units = normalizeUnits(units) || "millisecond") ? this.valueOf() === localInput.valueOf() : (i = localInput.valueOf(), this.clone().startOf(units).valueOf() <= i && i <= this.clone().endOf(units).valueOf()));
//    };
//    /**
//     * @param {undefined} input
//     * @param {string} units
//     * @return {?}
//     */
//    proto.isSameOrAfter = function (input, units) {
//        return this.isSame(input, units) || this.isAfter(input, units);
//    };
//    /**
//     * @param {!Object} input
//     * @param {string} units
//     * @return {?}
//     */
//    proto.isSameOrBefore = function (input, units) {
//        return this.isSame(input, units) || this.isBefore(input, units);
//    };
//    /**
//     * @return {?}
//     */
//    proto.isValid = function () {
//        return isValid(this);
//    };
//    proto.lang = lang;
//    /** @type {function(?): ?} */
//    proto.locale = locale;
//    /** @type {function(): ?} */
//    proto.localeData = localeData;
//    proto.max = prototypeMax;
//    proto.min = prototypeMin;
//    /**
//     * @return {?}
//     */
//    proto.parsingFlags = function () {
//        return extend({}, getParsingFlags(this));
//    };
//    /**
//     * @param {string} units
//     * @param {!Object} value
//     * @return {?}
//     */
//    proto.set = function (units, value) {
//        if ("object" == typeof units) {
//            var array = function (songsByAlbum) {
//                /** @type {!Array} */
//                var units = [];
//                var i;
//                for (i in songsByAlbum) {
//                    units.push({
//                        unit: i,
//                        priority: priorities[i]
//                    });
//                }
//                return units.sort(function (secondListenerDetails, firstListenerDetails) {
//                    return secondListenerDetails.priority - firstListenerDetails.priority;
//                }), units;
//            }(units = normalizeObjectUnits(units));
//            /** @type {number} */
//            var i = 0;
//            for (; i < array.length; i++) {
//                this[array[i].unit](units[array[i].unit]);
//            }
//        } else {
//            if (isFunction(this[units = normalizeUnits(units)])) {
//                return this[units](value);
//            }
//        }
//        return this;
//    };
//    /**
//     * @param {string} units
//     * @return {?}
//     */
//    proto.startOf = function (units) {
//        var x;
//        if (void 0 === (units = normalizeUnits(units)) || "millisecond" === units || !this.isValid()) {
//            return this;
//        }
//        /** @type {function(number, number, number): ?} */
//        var toJalaali = this._isUTC ? serializeUTCDate : getEventsData;
//        switch (units) {
//            case "year":
//                x = toJalaali(this.year(), 0, 1);
//                break;
//            case "quarter":
//                x = toJalaali(this.year(), this.month() - this.month() % 3, 1);
//                break;
//            case "month":
//                x = toJalaali(this.year(), this.month(), 1);
//                break;
//            case "week":
//                x = toJalaali(this.year(), this.month(), this.date() - this.weekday());
//                break;
//            case "isoWeek":
//                x = toJalaali(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
//                break;
//            case "day":
//            case "date":
//                x = toJalaali(this.year(), this.month(), this.date());
//                break;
//            case "hour":
//                x = this._d.valueOf();
//                /** @type {number} */
//                x = x - floor(x + (this._isUTC ? 0 : 6e4 * this.utcOffset()), 36e5);
//                break;
//            case "minute":
//                x = this._d.valueOf();
//                /** @type {number} */
//                x = x - floor(x, 6e4);
//                break;
//            case "second":
//                x = this._d.valueOf();
//                /** @type {number} */
//                x = x - floor(x, 1e3);
//        }
//        return this._d.setTime(x), hooks.updateOffset(this, true), this;
//    };
//    proto.subtract = subtract;
//    /**
//     * @return {?}
//     */
//    proto.toArray = function () {
//        var options = this;
//        return [options.year(), options.month(), options.date(), options.hour(), options.minute(), options.second(), options.millisecond()];
//    };
//    /**
//     * @return {?}
//     */
//    proto.toObject = function () {
//        var TProto = this;
//        return {
//            years: TProto.year(),
//            months: TProto.month(),
//            date: TProto.date(),
//            hours: TProto.hours(),
//            minutes: TProto.minutes(),
//            seconds: TProto.seconds(),
//            milliseconds: TProto.milliseconds()
//        };
//    };
//    /**
//     * @return {?}
//     */
//    proto.toDate = function () {
//        return new Date(this.valueOf());
//    };
//    /**
//     * @param {number} l
//     * @return {?}
//     */
//    proto.toISOString = function (l) {
//        if (!this.isValid()) {
//            return null;
//        }
//        /** @type {boolean} */
//        var lChanged = true !== l;
//        var field = lChanged ? this.clone().utc() : this;
//        return field.year() < 0 || 9999 < field.year() ? format(field, lChanged ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : isFunction(Date.prototype.toISOString) ? lChanged ? this.toDate().toISOString() : (new Date(this.valueOf() + 60 * this.utcOffset() * 1e3)).toISOString().replace("Z", format(field, "Z")) : format(field, lChanged ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
//    };
//    /**
//     * @return {?}
//     */
//    proto.inspect = function () {
//        if (!this.isValid()) {
//            return "moment.invalid(/* " + this._i + " */)";
//        }
//        /** @type {string} */
//        var lib = "moment";
//        /** @type {string} */
//        var zone = "";
//        if (!this.isLocal()) {
//            /** @type {string} */
//            lib = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone";
//            /** @type {string} */
//            zone = "Z";
//        }
//        /** @type {string} */
//        var prefix = "[" + lib + '("]';
//        /** @type {string} */
//        var year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
//        /** @type {string} */
//        var suffix = zone + '[")]';
//        return this.format(prefix + year + "-MM-DD[T]HH:mm:ss.SSS" + suffix);
//    };
//    /**
//     * @return {?}
//     */
//    proto.toJSON = function () {
//        return this.isValid() ? this.toISOString() : null;
//    };
//    /**
//     * @return {?}
//     */
//    proto.toString = function () {
//        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
//    };
//    /**
//     * @return {?}
//     */
//    proto.unix = function () {
//        return Math.floor(this.valueOf() / 1e3);
//    };
//    /**
//     * @return {?}
//     */
//    proto.valueOf = function () {
//        return this._d.valueOf() - 6e4 * (this._offset || 0);
//    };
//    /**
//     * @return {?}
//     */
//    proto.creationData = function () {
//        return {
//            input: this._i,
//            format: this._f,
//            locale: this._locale,
//            isUTC: this._isUTC,
//            strict: this._strict
//        };
//    };
//    proto.year = getSetYear;
//    /**
//     * @return {?}
//     */
//    proto.isLeapYear = function () {
//        return isLeapYear(this.year());
//    };
//    /**
//     * @param {?} input
//     * @return {?}
//     */
//    proto.weekYear = function (input) {
//        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
//    };
//    /**
//     * @param {?} input
//     * @return {?}
//     */
//    proto.isoWeekYear = function (input) {
//        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
//    };
//    /** @type {function(number): ?} */
//    proto.quarter = proto.quarters = function (opt_value) {
//        return null == opt_value ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (opt_value - 1) + this.month() % 3);
//    };
//    /** @type {function(number): ?} */
//    proto.month = getSetMonth;
//    /**
//     * @return {?}
//     */
//    proto.daysInMonth = function () {
//        return daysInMonth(this.year(), this.month());
//    };
//    /** @type {function(string): ?} */
//    proto.week = proto.weeks = function (i) {
//        var c = this.localeData().week(this);
//        return null == i ? c : this.add(7 * (i - c), "d");
//    };
//    /** @type {function(string): ?} */
//    proto.isoWeek = proto.isoWeeks = function (l) {
//        var i = weekOfYear(this, 1, 4).week;
//        return null == l ? i : this.add(7 * (l - i), "d");
//    };
//    /**
//     * @return {?}
//     */
//    proto.weeksInYear = function () {
//        var weekInfo = this.localeData()._week;
//        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
//    };
//    /**
//     * @return {?}
//     */
//    proto.isoWeeksInYear = function () {
//        return weeksInYear(this.year(), 1, 4);
//    };
//    proto.date = getSetDayOfMonth;
//    /** @type {function(string): ?} */
//    proto.day = proto.days = function (input) {
//        if (!this.isValid()) {
//            return null != input ? this : NaN;
//        }
//        var a;
//        var b;
//        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
//        return null != input ? (a = input, b = this.localeData(), input = "string" != typeof a ? a : isNaN(a) ? "number" == typeof (a = b.weekdaysParse(a)) ? a : null : parseInt(a, 10), this.add(input - day, "d")) : day;
//    };
//    /**
//     * @param {string} input
//     * @return {?}
//     */
//    proto.weekday = function (input) {
//        if (!this.isValid()) {
//            return null != input ? this : NaN;
//        }
//        /** @type {number} */
//        var day = (this.day() + 7 - this.localeData()._week.dow) % 7;
//        return null == input ? day : this.add(input - day, "d");
//    };
//    /**
//     * @param {number} input
//     * @return {?}
//     */
//    proto.isoWeekday = function (input) {
//        if (!this.isValid()) {
//            return null != input ? this : NaN;
//        }
//        if (null == input) {
//            return this.day() || 7;
//        }
//        var a;
//        var b;
//        var weekday = (a = input, b = this.localeData(), "string" == typeof a ? b.weekdaysParse(a) % 7 || 7 : isNaN(a) ? null : a);
//        return this.day(this.day() % 7 ? weekday : weekday - 7);
//    };
//    /**
//     * @param {string} input
//     * @return {?}
//     */
//    proto.dayOfYear = function (input) {
//        /** @type {number} */
//        var day = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
//        return null == input ? day : this.add(input - day, "d");
//    };
//    proto.hour = proto.hours = getSetHour;
//    proto.minute = proto.minutes = getSetMinute;
//    proto.second = proto.seconds = getSetSecond;
//    proto.millisecond = proto.milliseconds = getSetMillisecond;
//    /**
//     * @param {number} input
//     * @param {string} keepLocalTime
//     * @param {boolean} keepMinutes
//     * @return {?}
//     */
//    proto.utcOffset = function (input, keepLocalTime, keepMinutes) {
//        var localAdjust;
//        var offset = this._offset || 0;
//        if (!this.isValid()) {
//            return null != input ? this : NaN;
//        }
//        if (null == input) {
//            return this._isUTC ? offset : getDateOffset(this);
//        }
//        if ("string" == typeof input) {
//            if (null === (input = offsetFromString(matchShortOffset, input))) {
//                return this;
//            }
//        } else {
//            if (Math.abs(input) < 16 && !keepMinutes) {
//                /** @type {number} */
//                input = input * 60;
//            }
//        }
//        return !this._isUTC && keepLocalTime && (localAdjust = getDateOffset(this)), this._offset = input, this._isUTC = true, null != localAdjust && this.add(localAdjust, "m"), offset !== input && (!keepLocalTime || this._changeInProgress ? addSubtract(this, createDuration(input - offset, "m"), 1, false) : this._changeInProgress || (this._changeInProgress = true, hooks.updateOffset(this, true), this._changeInProgress = null)), this;
//    };
//    /**
//     * @param {!Object} keepLocalTime
//     * @return {?}
//     */
//    proto.utc = function (keepLocalTime) {
//        return this.utcOffset(0, keepLocalTime);
//    };
//    /**
//     * @param {string} keepLocalTime
//     * @return {?}
//     */
//    proto.local = function (keepLocalTime) {
//        return this._isUTC && (this.utcOffset(0, keepLocalTime), this._isUTC = false, keepLocalTime && this.subtract(getDateOffset(this), "m")), this;
//    };
//    /**
//     * @return {?}
//     */
//    proto.parseZone = function () {
//        if (null != this._tzm) {
//            this.utcOffset(this._tzm, false, true);
//        } else {
//            if ("string" == typeof this._i) {
//                var tZone = offsetFromString(/Z|[+-]\d\d:?\d\d/gi, this._i);
//                if (null != tZone) {
//                    this.utcOffset(tZone);
//                } else {
//                    this.utcOffset(0, true);
//                }
//            }
//        }
//        return this;
//    };
//    /**
//     * @param {number} input
//     * @return {?}
//     */
//    proto.hasAlignedHourOffset = function (input) {
//        return !!this.isValid() && (input = input ? createLocal(input).utcOffset() : 0, (this.utcOffset() - input) % 60 == 0);
//    };
//    /**
//     * @return {?}
//     */
//    proto.isDST = function () {
//        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
//    };
//    /**
//     * @return {?}
//     */
//    proto.isLocal = function () {
//        return !!this.isValid() && !this._isUTC;
//    };
//    /**
//     * @return {?}
//     */
//    proto.isUtcOffset = function () {
//        return !!this.isValid() && this._isUTC;
//    };
//    /** @type {function(): ?} */
//    proto.isUtc = isUtc;
//    /** @type {function(): ?} */
//    proto.isUTC = isUtc;
//    /**
//     * @return {?}
//     */
//    proto.zoneAbbr = function () {
//        return this._isUTC ? "UTC" : "";
//    };
//    /**
//     * @return {?}
//     */
//    proto.zoneName = function () {
//        return this._isUTC ? "Coordinated Universal Time" : "";
//    };
//    proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
//    proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
//    proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
//    proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", function (val, keepLocalTime) {
//        return null != val ? ("string" != typeof val && (val = -val), this.utcOffset(val, keepLocalTime), this) : -this.utcOffset();
//    });
//    proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", function () {
//        if (!isUndefined(this._isDSTShifted)) {
//            return this._isDSTShifted;
//        }
//        var c = {};
//        if (copyConfig(c, this), (c = parse(c))._a) {
//            var resultsSubject = c._isUTC ? createUTC(c._a) : createLocal(c._a);
//            this._isDSTShifted = this.isValid() && 0 < compareArrays(c._a, resultsSubject.toArray());
//        } else {
//            /** @type {boolean} */
//            this._isDSTShifted = false;
//        }
//        return this._isDSTShifted;
//    });
//    var proto$1 = Locale.prototype;
//    /**
//     * @param {?} key
//     * @param {?} mom
//     * @param {?} now
//     * @return {?}
//     */
//    proto$1.calendar = function (key, mom, now) {
//        var output = this._calendar[key] || this._calendar.sameElse;
//        return isFunction(output) ? output.call(mom, now) : output;
//    };
//    /**
//     * @param {string} key
//     * @return {?}
//     */
//    proto$1.longDateFormat = function (key) {
//        var format = this._longDateFormat[key];
//        var formatUpper = this._longDateFormat[key.toUpperCase()];
//        return format || !formatUpper ? format : (this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (headerPlusSegments) {
//            return headerPlusSegments.slice(1);
//        }), this._longDateFormat[key]);
//    };
//    /**
//     * @return {?}
//     */
//    proto$1.invalidDate = function () {
//        return this._invalidDate;
//    };
//    /**
//     * @param {?} number
//     * @return {?}
//     */
//    proto$1.ordinal = function (number) {
//        return this._ordinal.replace("%d", number);
//    };
//    /** @type {function(?): ?} */
//    proto$1.preparse = preParsePostFormat;
//    /** @type {function(?): ?} */
//    proto$1.postformat = preParsePostFormat;
//    /**
//     * @param {?} number
//     * @param {boolean} withoutSuffix
//     * @param {?} string
//     * @param {?} isFuture
//     * @return {?}
//     */
//    proto$1.relativeTime = function (number, withoutSuffix, string, isFuture) {
//        var output = this._relativeTime[string];
//        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
//    };
//    /**
//     * @param {number} diff
//     * @param {?} output
//     * @return {?}
//     */
//    proto$1.pastFuture = function (diff, output) {
//        var format = this._relativeTime[0 < diff ? "future" : "past"];
//        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
//    };
//    /**
//     * @param {!Object} config
//     * @return {undefined}
//     */
//    proto$1.set = function (config) {
//        var fn;
//        var prop;
//        for (prop in config) {
//            if (isFunction(fn = config[prop])) {
//                this[prop] = fn;
//            } else {
//                this["_" + prop] = fn;
//            }
//        }
//        /** @type {!Object} */
//        this._config = config;
//        /** @type {!RegExp} */
//        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
//    };
//    /**
//     * @param {!Object} m
//     * @param {string} format
//     * @return {?}
//     */
//    proto$1.months = function (m, format) {
//        return m ? isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()] : isArray(this._months) ? this._months : this._months.standalone;
//    };
//    /**
//     * @param {!Object} m
//     * @param {string} format
//     * @return {?}
//     */
//    proto$1.monthsShort = function (m, format) {
//        return m ? isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()] : isArray(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
//    };
//    /**
//     * @param {number} monthName
//     * @param {string} format
//     * @param {(Object|string)} strict
//     * @return {?}
//     */
//    proto$1.monthsParse = function (monthName, format, strict) {
//        var i;
//        var mom;
//        var relativeToPath;
//        if (this._monthsParseExact) {
//            return function (b, boardManager, mmCoreSecondsYear) {
//                var i;
//                var ii;
//                var mom;
//                var llc = b.toLocaleLowerCase();
//                if (!this._monthsParse) {
//                    /** @type {!Array} */
//                    this._monthsParse = [];
//                    /** @type {!Array} */
//                    this._longMonthsParse = [];
//                    /** @type {!Array} */
//                    this._shortMonthsParse = [];
//                    /** @type {number} */
//                    i = 0;
//                    for (; i < 12; ++i) {
//                        mom = createUTC([2e3, i]);
//                        this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
//                        this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
//                    }
//                }
//                return mmCoreSecondsYear ? "MMM" === boardManager ? -1 !== (ii = indexOf$1.call(this._shortMonthsParse, llc)) ? ii : null : -1 !== (ii = indexOf$1.call(this._longMonthsParse, llc)) ? ii : null : "MMM" === boardManager ? -1 !== (ii = indexOf$1.call(this._shortMonthsParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._longMonthsParse, llc)) ? ii : null : -1 !== (ii = indexOf$1.call(this._longMonthsParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._shortMonthsParse, llc)) ? ii : null;
//            }.call(this, monthName, format, strict);
//        }
//        if (!this._monthsParse) {
//            /** @type {!Array} */
//            this._monthsParse = [];
//            /** @type {!Array} */
//            this._longMonthsParse = [];
//            /** @type {!Array} */
//            this._shortMonthsParse = [];
//        }
//        /** @type {number} */
//        i = 0;
//        for (; i < 12; i++) {
//            if (mom = createUTC([2e3, i]), strict && !this._longMonthsParse[i] && (this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i"), this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i")), strict || this._monthsParse[i] || (relativeToPath = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, ""), this._monthsParse[i] = new RegExp(relativeToPath.replace(".", ""), "i")), strict && "MMMM" === format && this._longMonthsParse[i].test(monthName)) {
//                return i;
//            }
//            if (strict && "MMM" === format && this._shortMonthsParse[i].test(monthName)) {
//                return i;
//            }
//            if (!strict && this._monthsParse[i].test(monthName)) {
//                return i;
//            }
//        }
//    };
//    /**
//     * @param {number} isStrict
//     * @return {?}
//     */
//    proto$1.monthsRegex = function (isStrict) {
//        return this._monthsParseExact ? (hasOwnProp(this, "_monthsRegex") || computeMonthsParse.call(this), isStrict ? this._monthsStrictRegex : this._monthsRegex) : (hasOwnProp(this, "_monthsRegex") || (this._monthsRegex = defaultMonthsShortRegex), this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex);
//    };
//    /**
//     * @param {string} isStrict
//     * @return {?}
//     */
//    proto$1.monthsShortRegex = function (isStrict) {
//        return this._monthsParseExact ? (hasOwnProp(this, "_monthsRegex") || computeMonthsParse.call(this), isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex) : (hasOwnProp(this, "_monthsShortRegex") || (this._monthsShortRegex = defaultMonthsShortRegex), this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex);
//    };
//    /**
//     * @param {!Object} mom
//     * @return {?}
//     */
//    proto$1.week = function (mom) {
//        return weekOfYear(mom, this._week.dow, this._week.doy).week;
//    };
//    /**
//     * @return {?}
//     */
//    proto$1.firstDayOfYear = function () {
//        return this._week.doy;
//    };
//    /**
//     * @return {?}
//     */
//    proto$1.firstDayOfWeek = function () {
//        return this._week.dow;
//    };
//    /**
//     * @param {!Object} m
//     * @param {string} format
//     * @return {?}
//     */
//    proto$1.weekdays = function (m, format) {
//        var x = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && true !== m && this._weekdays.isFormat.test(format) ? "format" : "standalone"];
//        return true === m ? data_extract(x, this._week.dow) : m ? x[m.day()] : x;
//    };
//    /**
//     * @param {!Object} m
//     * @return {?}
//     */
//    proto$1.weekdaysMin = function (m) {
//        return true === m ? data_extract(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
//    };
//    /**
//     * @param {!Object} m
//     * @return {?}
//     */
//    proto$1.weekdaysShort = function (m) {
//        return true === m ? data_extract(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
//    };
//    /**
//     * @param {!Object} name
//     * @param {string} data
//     * @param {(!Function|string)} options
//     * @return {?}
//     */
//    proto$1.weekdaysParse = function (name, data, options) {
//        var i;
//        var mom;
//        var relativeToPath;
//        if (this._weekdaysParseExact) {
//            return function (b, canCreateDiscussions, mmCoreSecondsYear) {
//                var i;
//                var ii;
//                var mom;
//                var llc = b.toLocaleLowerCase();
//                if (!this._weekdaysParse) {
//                    /** @type {!Array} */
//                    this._weekdaysParse = [];
//                    /** @type {!Array} */
//                    this._shortWeekdaysParse = [];
//                    /** @type {!Array} */
//                    this._minWeekdaysParse = [];
//                    /** @type {number} */
//                    i = 0;
//                    for (; i < 7; ++i) {
//                        mom = createUTC([2e3, 1]).day(i);
//                        this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
//                        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
//                        this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
//                    }
//                }
//                return mmCoreSecondsYear ? "dddd" === canCreateDiscussions ? -1 !== (ii = indexOf$1.call(this._weekdaysParse, llc)) ? ii : null : "ddd" === canCreateDiscussions ? -1 !== (ii = indexOf$1.call(this._shortWeekdaysParse, llc)) ? ii : null : -1 !== (ii = indexOf$1.call(this._minWeekdaysParse, llc)) ? ii : null : "dddd" === canCreateDiscussions ? -1 !== (ii = indexOf$1.call(this._weekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._shortWeekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._minWeekdaysParse,
//                    llc)) ? ii : null : "ddd" === canCreateDiscussions ? -1 !== (ii = indexOf$1.call(this._shortWeekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._weekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._minWeekdaysParse, llc)) ? ii : null : -1 !== (ii = indexOf$1.call(this._minWeekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._weekdaysParse, llc)) ? ii : -1 !== (ii = indexOf$1.call(this._shortWeekdaysParse, llc)) ? ii : null;
//            }.call(this, name, data, options);
//        }
//        if (!this._weekdaysParse) {
//            /** @type {!Array} */
//            this._weekdaysParse = [];
//            /** @type {!Array} */
//            this._minWeekdaysParse = [];
//            /** @type {!Array} */
//            this._shortWeekdaysParse = [];
//            /** @type {!Array} */
//            this._fullWeekdaysParse = [];
//        }
//        /** @type {number} */
//        i = 0;
//        for (; i < 7; i++) {
//            if (mom = createUTC([2e3, 1]).day(i), options && !this._fulWorkflowDesignerlWeekdaysParse[i] && (this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[i] || (relativeToPath = "^" + this.weekdays(mom, "") + "|^" +
//                this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, ""), this._weekdaysParse[i] = new RegExp(relativeToPath.replace(".", ""), "i")), options && "dddd" === data && this._fullWeekdaysParse[i].test(name)) {
//                return i;
//            }
//            if (options && "ddd" === data && this._shortWeekdaysParse[i].test(name)) {
//                return i;
//            }
//            if (options && "dd" === data && this._minWeekdaysParse[i].test(name)) {
//                return i;
//            }
//            if (!options && this._weekdaysParse[i].test(name)) {
//                return i;
//            }
//        }
//    };
//    /**
//     * @param {string} isStrict
//     * @return {?}
//     */
//    proto$1.weekdaysRegex = function (isStrict) {
//        return this._weekdaysParseExact ? (hasOwnProp(this, "_weekdaysRegex") || computeWeekdaysParse.call(this), isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex) : (hasOwnProp(this, "_weekdaysRegex") || (this._weekdaysRegex = defaultMonthsShortRegex), this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex);
//    };
//    /**
//     * @param {string} isStrict
//     * @return {?}
//     */
//    proto$1.weekdaysShortRegex = function (isStrict) {
//        return this._weekdaysParseExact ? (hasOwnProp(this, "_weekdaysRegex") || computeWeekdaysParse.call(this), isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (hasOwnProp(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = defaultMonthsShortRegex), this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
//    };
//    /**
//     * @param {string} isStrict
//     * @return {?}
//     */
//    proto$1.weekdaysMinRegex = function (isStrict) {
//        return this._weekdaysParseExact ? (hasOwnProp(this, "_weekdaysRegex") || computeWeekdaysParse.call(this), isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (hasOwnProp(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = defaultMonthsShortRegex), this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
//    };
//    /**
//     * @param {string} input
//     * @return {?}
//     */
//    proto$1.isPM = function (input) {
//        return "p" === (input + "").toLowerCase().charAt(0);
//    };
//    /**
//     * @param {number} minutes
//     * @param {?} hours
//     * @param {string} isLower
//     * @return {?}
//     */
//    proto$1.meridiem = function (minutes, hours, isLower) {
//        return 11 < minutes ? isLower ? "pm" : "PM" : isLower ? "am" : "AM";
//    };
//    getSetGlobalLocale("en", {
//        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
//        ordinal: function (number) {
//            /** @type {number} */
//            var rem100 = number % 10;
//            return number + (1 === toInt(number % 100 / 10) ? "th" : 1 === rem100 ? "st" : 2 === rem100 ? "nd" : 3 === rem100 ? "rd" : "th");
//        }
//    });
//    hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
//    hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
//    /** @type {function(?): number} */
//    var mathAbs = Math.abs;
//    var asMilliseconds = makeAs("ms");
//    var asSeconds = makeAs("s");
//    var asMinutes = makeAs("m");
//    var asHours = makeAs("h");
//    var asDays = makeAs("d");
//    var asWeeks = makeAs("w");
//    var asMonths = makeAs("M");
//    var hash = makeAs("Q");
//    var asYears = makeAs("y");
//    var milliseconds = makeGetter("milliseconds");
//    var seconds = makeGetter("seconds");
//    var minutes = makeGetter("minutes");
//    var hours = makeGetter("hours");
//    var days = makeGetter("days");
//    var months = makeGetter("months");
//    var years = makeGetter("years");
//    /** @type {function(?): number} */
//    var parseInt = Math.round;
//    var thresholds = {
//        ss: 44,
//        s: 45,
//        m: 45,
//        h: 22,
//        d: 26,
//        M: 11
//    };
//    /** @type {function(?): number} */
//    var iso_string__abs = Math.abs;
//    var proto$2 = Duration.prototype;
//    return proto$2.isValid = function () {
//        return this._isValid;
//    }, proto$2.abs = function () {
//        var data = this._data;
//        return this._milliseconds = mathAbs(this._milliseconds), this._days = mathAbs(this._days), this._months = mathAbs(this._months), data.milliseconds = mathAbs(data.milliseconds), data.seconds = mathAbs(data.seconds), data.minutes = mathAbs(data.minutes), data.hours = mathAbs(data.hours), data.months = mathAbs(data.months), data.years = mathAbs(data.years), this;
//    }, proto$2.add = function (input, value) {
//        return addSubtract$1(this, input, value, 1);
//    }, proto$2.subtract = function (input, value) {
//        return addSubtract$1(this, input, value, -1);
//    }, proto$2.as = function (units) {
//        if (!this.isValid()) {
//            return NaN;
//        }
//        var days;
//        var months;
//        var milliseconds = this._milliseconds;
//        if ("month" === (units = normalizeUnits(units)) || "quarter" === units || "year" === units) {
//            switch (days = this._days + milliseconds / 864e5, months = this._months + daysToYears(days), units) {
//                case "month":
//                    return months;
//                case "quarter":
//                    return months / 3;
//                case "year":
//                    return months / 12;
//            }
//        } else {
//            switch (days = this._days + Math.round(monthsToDays(this._months)), units) {
//                case "week":
//                    return days / 7 + milliseconds / 6048e5;
//                case "day":
//                    return days + milliseconds / 864e5;
//                case "hour":
//                    return 24 * days + milliseconds / 36e5;
//                case "minute":
//                    return 1440 * days + milliseconds / 6e4;
//                case "second":
//                    return 86400 * days + milliseconds / 1e3;
//                case "millisecond":
//                    return Math.floor(864e5 * days) + milliseconds;
//                default:
//                    throw new Error("Unknown unit " + units);
//            }
//        }
//    }, proto$2.asMilliseconds = asMilliseconds, proto$2.asSeconds = asSeconds, proto$2.asMinutes = asMinutes, proto$2.asHours = asHours, proto$2.asDays = asDays, proto$2.asWeeks = asWeeks, proto$2.asMonths = asMonths, proto$2.asQuarters = hash, proto$2.asYears = asYears, proto$2.valueOf = function () {
//        return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * toInt(this._months / 12) : NaN;
//    }, proto$2._bubble = function () {
//        var seconds;
//        var minutes;
//        var hours;
//        var years;
//        var monthsFromDays;
//        var milliseconds = this._milliseconds;
//        var days = this._days;
//        var months = this._months;
//        var data = this._data;
//        return 0 <= milliseconds && 0 <= days && 0 <= months || milliseconds <= 0 && days <= 0 && months <= 0 || (milliseconds = milliseconds + 864e5 * absCeil(monthsToDays(months) + days), months = days = 0), data.milliseconds = milliseconds % 1e3, seconds = absFloor(milliseconds / 1e3), data.seconds = seconds % 60, minutes = absFloor(seconds / 60), data.minutes = minutes % 60, hours = absFloor(minutes / 60), data.hours = hours % 24, months = months + (monthsFromDays = absFloor(daysToYears(days = days +
//            absFloor(hours / 24)))), days = days - absCeil(monthsToDays(monthsFromDays)), years = absFloor(months / 12), months = months % 12, data.days = days, data.months = months, data.years = years, this;
//    }, proto$2.clone = function () {
//        return createDuration(this);
//    }, proto$2.get = function (units) {
//        return units = normalizeUnits(units), this.isValid() ? this[units + "s"]() : NaN;
//    }, proto$2.milliseconds = milliseconds, proto$2.seconds = seconds, proto$2.minutes = minutes, proto$2.hours = hours, proto$2.days = days, proto$2.weeks = function () {
//        return absFloor(this.days() / 7);
//    }, proto$2.months = months, proto$2.years = years, proto$2.humanize = function (withSuffix) {
//        if (!this.isValid()) {
//            return this.localeData().invalidDate();
//        }
//        var t;
//        var okval;
//        var func;
//        var duration;
//        var seconds;
//        var minutes;
//        var hours;
//        var days;
//        var months;
//        var years;
//        var renderers;
//        var locale = this.localeData();
//        var output = (okval = !withSuffix, func = locale, duration = createDuration(t = this).abs(), seconds = parseInt(duration.as("s")), minutes = parseInt(duration.as("m")), hours = parseInt(duration.as("h")), days = parseInt(duration.as("d")), months = parseInt(duration.as("M")), years = parseInt(duration.as("y")), (renderers = seconds <= thresholds.ss && ["s", seconds] || seconds < thresholds.s && ["ss", seconds] || minutes <= 1 && ["m"] || minutes < thresholds.m && ["mm", minutes] || hours <= 1 &&
//            ["h"] || hours < thresholds.h && ["hh", hours] || days <= 1 && ["d"] || days < thresholds.d && ["dd", days] || months <= 1 && ["M"] || months < thresholds.M && ["MM", months] || years <= 1 && ["y"] || ["yy", years])[2] = okval, renderers[3] = 0 < +t, renderers[4] = func, function (string, number, i, isFuture, locale) {
//                return locale.relativeTime(number || 1, !!i, string, isFuture);
//            }.apply(null, renderers));
//        return withSuffix && (output = locale.pastFuture(+this, output)), locale.postformat(output);
//    }, proto$2.toISOString = toISOString$1, proto$2.toString = toISOString$1, proto$2.toJSON = toISOString$1, proto$2.locale = locale, proto$2.localeData = localeData, proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1), proto$2.lang = lang, addFormatToken("X", 0, 0, "unix"), addFormatToken("x", 0, 0, "valueOf"), addRegexToken("x", matchUnsigned), addRegexToken("X", /[+-]?\d+(\.\d{1,3})?/), addParseToken("X", function (IDM_s0,
//        canCreateDiscussions, day) {
//        /** @type {!Date} */
//        day._d = new Date(1e3 * parseFloat(IDM_s0, 10));
//    }), addParseToken("x", function (value, canCreateDiscussions, day) {
//        /** @type {!Date} */
//        day._d = new Date(toInt(value));
//    }), hooks.version = "2.24.0", oldSetupComputes = createLocal, hooks.fn = proto, hooks.min = function () {
//        return pickBy("isBefore", [].slice.call(arguments, 0));
//    }, hooks.max = function () {
//        return pickBy("isAfter", [].slice.call(arguments, 0));
//    }, hooks.now = function () {
//        return Date.now ? Date.now() : +new Date;
//    }, hooks.utc = createUTC, hooks.unix = function (moment) {
//        return createLocal(1e3 * moment);
//    }, hooks.months = function (format, value) {
//        return listMonthsImpl(format, value, "months");
//    }, hooks.isDate = isDate, hooks.locale = getSetGlobalLocale, hooks.invalid = createInvalid, hooks.duration = createDuration, hooks.isMoment = isMoment, hooks.weekdays = function (m, format, index) {
//        return listWeekdaysImpl(m, format, index, "weekdays");
//    }, hooks.parseZone = function () {
//        return createLocal.apply(null, arguments).parseZone();
//    }, hooks.localeData = getLocale, hooks.isDuration = isDuration, hooks.monthsShort = function (format, index) {
//        return listMonthsImpl(format, index, "monthsShort");
//    }, hooks.weekdaysMin = function (m, format, index) {
//        return listWeekdaysImpl(m, format, index, "weekdaysMin");
//    }, hooks.defineLocale = defineLocale, hooks.updateLocale = function (name, config) {
//        if (null != config) {
//            var locale;
//            var model;
//            var parentConfig = baseConfig;
//            if (null != (model = loadLocale(name))) {
//                parentConfig = model._config;
//            }
//            (locale = new Locale(config = mergeConfigs(parentConfig, config))).parentLocale = locales[name];
//            locales[name] = locale;
//            getSetGlobalLocale(name);
//        } else {
//            if (null != locales[name]) {
//                if (null != locales[name].parentLocale) {
//                    locales[name] = locales[name].parentLocale;
//                } else {
//                    if (null != locales[name]) {
//                        delete locales[name];
//                    }
//                }
//            }
//        }
//        return locales[name];
//    }, hooks.locales = function () {
//        return callback(locales);
//    }, hooks.weekdaysShort = function (m, format, lang) {
//        return listWeekdaysImpl(m, format, lang, "weekdaysShort");
//    }, hooks.normalizeUnits = normalizeUnits, hooks.relativeTimeRounding = function (cond) {
//        return void 0 === cond ? parseInt : "function" == typeof cond && (parseInt = cond, true);
//    }, hooks.relativeTimeThreshold = function (threshold, limit) {
//        return void 0 !== thresholds[threshold] && (void 0 === limit ? thresholds[threshold] : (thresholds[threshold] = limit, "s" === threshold && (thresholds.ss = limit - 1), true));
//    }, hooks.calendarFormat = function (myMoment, now) {
//        var diff = myMoment.diff(now, "days", true);
//        return diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
//    }, hooks.prototype = proto, hooks.HTML5_FMT = {
//        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
//        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
//        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
//        DATE: "YYYY-MM-DD",
//        TIME: "HH:mm",
//        TIME_SECONDS: "HH:mm:ss",
//        TIME_MS: "HH:mm:ss.SSS",
//        WEEK: "GGGG-[W]WW",
//        MONTH: "YYYY-MM"
//    }, hooks;
//});

